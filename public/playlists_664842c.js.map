{"version":3,"sources":["webpack:///./components/Dialogs/ConfirmDialog/index.js","webpack:///../node_modules/@material-ui/icons/es/ModeEdit.js","webpack:///./actions/ImportActionCreators.js","webpack:///./actions/SearchActionCreators.js","webpack:///./components/PlaylistManager/Menu/Row.js","webpack:///./components/PlaylistManager/Menu/NewPlaylist.js","webpack:///../node_modules/@material-ui/icons/es/Search.js","webpack:///./components/PlaylistManager/Menu/SearchResultsRow.js","webpack:///../node_modules/@material-ui/icons/es/Input.js","webpack:///./components/PlaylistManager/Menu/PlaylistImportRow.js","webpack:///./components/PlaylistManager/Menu/index.js","webpack:///./containers/PlaylistManagerMenu.js","webpack:///../node_modules/@material-ui/icons/es/CheckBox.js","webpack:///../node_modules/@material-ui/icons/es/CheckBoxOutlineBlank.js","webpack:///./components/PlaylistManager/Panel/RenamePlaylistButton.js","webpack:///../node_modules/@material-ui/icons/es/Delete.js","webpack:///./components/PlaylistManager/Panel/DeletePlaylistButton.js","webpack:///../node_modules/@material-ui/icons/es/Shuffle.js","webpack:///./components/PlaylistManager/Panel/ShufflePlaylistButton.js","webpack:///./components/PlaylistManager/Panel/PlaylistFilter.js","webpack:///./components/PlaylistManager/Panel/Meta.js","webpack:///./components/PlaylistManager/Panel/PlaylistItemRow.js","webpack:///./components/MediaList/Actions/RemoveFromPlaylist.js","webpack:///./components/MediaList/Actions/EditMedia.js","webpack:///./components/MediaList/Actions/MoveToFirst.js","webpack:///./components/MediaList/Actions/MoveToLast.js","webpack:///./components/PlaylistManager/Panel/index.js","webpack:///./containers/PlaylistManagerPanel.js","webpack:///./components/PlaylistManager/Import/index.js","webpack:///./containers/PlaylistImportManager.js","webpack:///./components/PlaylistManager/Panel/SearchResults.js","webpack:///./containers/SearchResultsPanel.js","webpack:///./components/SearchBar/index.js","webpack:///./components/PlaylistManager/Header/SourcePickerElement.js","webpack:///./components/PlaylistManager/Header/SourcePicker.js","webpack:///./components/PlaylistManager/Header/SearchBar.js","webpack:///./containers/MediaSearchBar.js","webpack:///./components/PlaylistManager/Header/index.js","webpack:///./components/PlaylistManager/Panel/Empty.js","webpack:///./components/PlaylistManager/index.js"],"names":["_babel_runtime_helpers_builtin_jsx__WEBPACK_IMPORTED_MODULE_0___default","className","material_ui_Progress__WEBPACK_IMPORTED_MODULE_8__","size","ConfirmDialog","state","busy","handleSubmit","event","preventDefault","handleConfirm","promise","_this","props","onConfirm","then","setState","onDone","handleClose","onCancel","render","_props","this","children","cancelLabel","confirmLabel","material_ui_Dialog__WEBPACK_IMPORTED_MODULE_6__","classnames__WEBPACK_IMPORTED_MODULE_3___default","onClose","open","material_ui_Dialog__WEBPACK_IMPORTED_MODULE_7__","_Form__WEBPACK_IMPORTED_MODULE_9__","onSubmit","_Form_Group__WEBPACK_IMPORTED_MODULE_10__","_Form_Button__WEBPACK_IMPORTED_MODULE_11__","disabled","onClick","_ref","react__WEBPACK_IMPORTED_MODULE_4___default","a","Component","defaultProps","propTypes","__webpack_exports__","Object","_utils_createSvgIcon__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_0___default","createElement","d","ImportActionCreators_showImportPanel","type","imports","showImportSourcePanel","sourceType","payload","hideImportSourcePanel","SearchActionCreators_showSearchResults","search","deleteSearch","enhance","lib","DDItemTypes","drop","monitor","onAddToPlaylist","playlist","getItem","media","connect","connectDropTarget","dropTarget","isOver","itemClasses","root","selected","jsx_default","CircularProgress","Check","Row_PlaylistRow","icon","activeClass","active","droppableClass","creating","Row_ref2","MenuItem","classnames_default","classes","name","react_default","Row","NewPlaylist_enhance","dist_es","Add","nativeColor","NewPlaylist_NewPlaylist","handleOpen","closeDialog","playlistName","Promise","resolve","onCreatePlaylist","bind","assertThisInitialized_default","t","Fragment","NewPlaylist_ref","PromptDialog","title","NewPlaylist_ref2","submitLabel","Menu_NewPlaylist","Search","createSvgIcon","Close","SearchResultsRow_SearchResultsRow","query","ListItem","role","SearchResultsRow_ref2","IconButton","SearchResultsRow_ref3","Menu_SearchResultsRow","Input","PlaylistImportRow_enhance","PlaylistImportRow_PlaylistImportRow","importing","PlaylistImportRow_ref2","PlaylistImportRow_ref3","Menu_PlaylistImportRow","Menu_PlaylistMenu","playlists","searchQuery","showSearchResults","searchResults","onSelectPlaylist","onSelectSearchResults","onCloseSearchResults","showImportPanel","onShowImportPanel","searchIsSelected","importIsSelected","isSelectingPlaylist","MenuList","map","pl","_id","Menu","mapStateToProps","reselect_es","playlistSelectors","searchSelectors","importSelectors","PlaylistManagerMenu","react_redux_es","dispatch","es","PlaylistActionCreators","CheckBox","CheckBoxOutlineBlank","RenamePlaylistButton_enhance","ModeEdit","RenamePlaylistButton_RenamePlaylistButton","renaming","onRename","Tooltip","placement","RenamePlaylistButton_ref","RenamePlaylistButton_ref2","value","initialName","Panel_RenamePlaylistButton","Delete","DeletePlaylistButton_enhance","DeletePlaylistButton_DeletePlaylistButton","deleting","onNotDeletable","onDelete","DeletePlaylistButton_ref","Group","Panel_DeletePlaylistButton","Shuffle","ShufflePlaylistButton_enhance","compose_default","withState_default","withHandlers_default","setLoading","onShuffle","ShufflePlaylistButton_ShuffleButton","isLoading","ShufflePlaylistButton_ref2","ShufflePlaylistButton_ref3","ShufflePlaylistButton","PlaylistFilter_enhance","PlaylistFilter_PlaylistFilter","onFilter","debounce_default","handleClick","isOpen","clearFilter","input","focus","handleChange","target","refInput","ref","onChange","Panel_PlaylistFilter","Meta_enhance","Meta_PlaylistMeta","onShufflePlaylist","onActivatePlaylist","onRenamePlaylist","onDeletePlaylist","Checkbox","checked","Meta_ref2","checkedIcon","Meta_ref3","Meta","mediaTarget","component","thisID","some","playlistItem","insertBefore","isDraggingNearTopOfRow","onMoveMedia","before","after","hover","insertingAbove","PlaylistItemRow_PlaylistItemRow","objectWithoutProperties_default","dropIndicator","PlaylistItemRow_ref","MediaList_Row","Panel_PlaylistItemRow","RemoveFromPlaylist_RemoveFromPlaylist","onRemove","Action","extends_default","onAction","RemoveFromPlaylist_ref2","Actions_RemoveFromPlaylist","EditMedia_EditMedia","onEdit","EditMedia_ref2","Actions_EditMedia","KeyboardArrowUp","MoveToFirst_MoveToFirst","onFirst","MoveToFirst_ref2","Actions_MoveToFirst","KeyboardArrowDown","MoveToLast_MoveToLast","onLast","MoveToLast_ref2","Actions_MoveToLast","Panel_PlaylistPanel","list","isFiltered","onLoadPlaylistPage","onFilterPlaylistItems","onOpenPreviewMediaDialog","loading","Panel_ref2","MediaList","length","rowComponent","rowProps","makeActions","onOpenAddMediaMenu","onMoveToFirst","onMoveToLast","onEditMedia","onRemoveFromPlaylist","selection","index","AddToPlaylist","onAdd","position","Panel_makeActions","onRequestPage","id","PlaylistManager_Panel","PlaylistManagerPanel_mapStateToProps","selectionOrOne","isSelected","get","PlaylistManagerPanel_onOpenAddMediaMenu","PlaylistManagerPanel","_ref2","DialogActionCreators","at","PlaylistManagerPanel_onMoveToLast","opts","PlaylistManagerPanel_onMoveMedia","PlaylistManagerPanel_onEditMedia","PlaylistManagerPanel_onRemoveFromPlaylist","page","PlaylistManagerPanel_onLoadPlaylistPage","Import_PlaylistImport","getAllMediaSources","selectedSourceType","sourceStates","onHideImportPanel","Panel","getMediaSource","ImportPanel","onClosePanel","forms","sources","keys","forEach","ImportForm","push","Import","injectMediaSources","PlaylistImportManager_mapStateToProps","PlaylistImportManager","SearchResults_SearchResults","results","loadingState","LoadingStates","SearchResults_ref2","Panel_SearchResults","SearchResultsPanel_mapStateToProps","SearchResultsPanel_onOpenAddMediaMenu","SearchResultsPanel_selectionOrOne","SearchResultsPanel","SearchBar_enhance","SearchBar_SearchBar","focused","handleFocus","handleBlur","handleKeyDown","e","key","SearchBar_ref","placeholder","onFocus","onBlur","onKeyDown","components_SearchBar","SourcePickerElement_SourcePickerElement","source","style","backgroundImage","logo","Header_SourcePickerElement","SourcePicker_enhance","popoverPosition","anchorOrigin","vertical","horizontal","transformOrigin","ArrowDropDown","SourcePicker_SourcePicker","anchor","container","refContainer","sourceName","_this2","_this3","_props2","filter","SourcePicker_ref","Popover","paper","anchorEl","Header_SourcePicker","Header_SearchBar_SearchBar","onSourceChange","Header_SearchBar","MediaSearchBar_mapStateToProps","MediaSearchBar_mapDispatchToProps","RequestActionCreators","qs","onStart","searchStart","onComplete","onError","error","MediaSearchBar","Header_enhance","Header_PlaylistManagerHeader","onCloseOverlay","Header","Header_ref2","PlaylistManager_Header","Empty_EmptyPanel","Empty","PlaylistManager_PlaylistManager","panel","selectedPlaylist","PlaylistManager_ref2","PlaylistManager_ref3","Content","_ref5"],"mappings":"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","file":"playlists_664842c.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog, { DialogContent } from 'material-ui/Dialog';\nimport { CircularProgress } from 'material-ui/Progress';\nimport Form from '../../Form';\nimport FormGroup from '../../Form/Group';\nimport Button from '../../Form/Button';\n\nexport default class ConfirmDialog extends React.Component {\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    confirmLabel: PropTypes.string,\n    cancelLabel: PropTypes.string,\n\n    onConfirm: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    cancelLabel: 'Cancel',\n    confirmLabel: 'OK',\n  };\n\n  state = {\n    busy: false,\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n  };\n\n  handleConfirm = (event) => {\n    event.preventDefault();\n    const promise = this.props.onConfirm();\n    if (promise && promise.then) {\n      this.setState({ busy: true });\n      const onDone = () => {\n        this.setState({ busy: false });\n      };\n      promise.then(onDone, onDone);\n    }\n  };\n\n  handleClose = (event) => {\n    if (event && event.preventDefault) {\n      event.preventDefault();\n    }\n    this.props.onCancel();\n  };\n\n  render() {\n    const {\n      children,\n      cancelLabel,\n      confirmLabel,\n      className,\n    } = this.props;\n    const { busy } = this.state;\n\n    return (\n      <Dialog\n        className={cx('Dialog', className)}\n        onClose={this.handleClose}\n        open\n      >\n        <DialogContent className=\"Dialog-body\">\n          <Form onSubmit={this.handleSubmit}>\n            {children}\n            <FormGroup className=\"ConfirmDialog-buttons FormGroup--noSpacing\">\n              <div className=\"ConfirmDialog-button\">\n                <Button disabled={busy} onClick={this.handleClose}>\n                  {cancelLabel}\n                </Button>\n              </div>\n              <div className=\"ConfirmDialog-spacer\" />\n              <div className=\"ConfirmDialog-button\">\n                <Button disabled={busy} onClick={this.handleConfirm}>\n                  {busy ? <div className=\"Button-loading\"><CircularProgress size=\"100%\" /></div> : confirmLabel}\n                </Button>\n              </div>\n            </FormGroup>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n}\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z' })\n), 'ModeEdit');","import {\n  SHOW_IMPORT_PANEL,\n  HIDE_IMPORT_PANEL,\n  SHOW_IMPORT_SOURCE_PANEL,\n  HIDE_IMPORT_SOURCE_PANEL,\n} from '../constants/actionTypes/imports';\n\nexport function showImportPanel() {\n  return {\n    type: SHOW_IMPORT_PANEL,\n  };\n}\n\nexport function hideImportPanel() {\n  return {\n    type: HIDE_IMPORT_PANEL,\n  };\n}\n\nexport function showImportSourcePanel(sourceType) {\n  return {\n    type: SHOW_IMPORT_SOURCE_PANEL,\n    payload: { sourceType },\n  };\n}\n\nexport function hideImportSourcePanel() {\n  return { type: HIDE_IMPORT_SOURCE_PANEL };\n}\n","import {\n  SET_SEARCH_SOURCE,\n  SHOW_SEARCH_RESULTS,\n  SEARCH_START,\n  SEARCH_COMPLETE,\n  SEARCH_DELETE,\n} from '../constants/actionTypes/search';\nimport { get } from './RequestActionCreators';\n\nexport function setSource(source) {\n  return {\n    type: SET_SEARCH_SOURCE,\n    payload: { source },\n  };\n}\n\nexport function showSearchResults() {\n  return { type: SHOW_SEARCH_RESULTS };\n}\n\nfunction searchStart(query) {\n  return {\n    type: SEARCH_START,\n    payload: { query },\n  };\n}\n\nexport function search(query) {\n  return get('/search', {\n    qs: { query },\n    onStart: () => (dispatch) => {\n      dispatch(searchStart(query));\n      dispatch(showSearchResults());\n    },\n    onComplete: results => ({\n      type: SEARCH_COMPLETE,\n      payload: { results },\n    }),\n    onError: error => ({\n      type: SEARCH_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n\nexport function deleteSearch() {\n  return {\n    type: SEARCH_DELETE,\n  };\n}\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropTarget } from 'react-dnd';\nimport { CircularProgress } from 'material-ui/Progress';\nimport { MenuItem } from 'material-ui/Menu';\nimport ActiveIcon from '@material-ui/icons/Check';\nimport { MEDIA } from '../../../constants/DDItemTypes';\n\nconst playlistTarget = {\n  drop({ playlist, onAddToPlaylist }, monitor) {\n    const { media } = monitor.getItem();\n    onAddToPlaylist(playlist, media);\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n});\n\nconst enhance = DropTarget(MEDIA, playlistTarget, collect);\n\nconst itemClasses = {\n  root: 'PlaylistMenuRow',\n  selected: 'is-selected',\n};\n\nclass PlaylistRow extends React.Component {\n  static propTypes = {\n    playlist: PropTypes.object,\n    selected: PropTypes.bool,\n    isOver: PropTypes.bool.isRequired,\n\n    connectDropTarget: PropTypes.func.isRequired,\n    onClick: PropTypes.func,\n    // Used in the drop handler above 👆\n    // eslint-disable-next-line react/no-unused-prop-types\n    onAddToPlaylist: PropTypes.func,\n  };\n\n  render() {\n    const {\n      playlist,\n      selected,\n\n      onClick,\n\n      connectDropTarget,\n      isOver,\n    } = this.props;\n    const activeClass = playlist.active && 'is-active';\n    const droppableClass = isOver && 'is-droppable';\n\n    let icon;\n    if (playlist.creating) {\n      icon = (\n        <div className=\"PlaylistMenuRow-loading\">\n          <CircularProgress size=\"100%\" />\n        </div>\n      );\n    } else if (playlist.active) {\n      icon = (\n        <div className=\"PlaylistMenuRow-active-icon\">\n          <ActiveIcon />\n        </div>\n      );\n    }\n\n    return connectDropTarget((\n      <div>\n        <MenuItem\n          selected={selected}\n          className={cx(activeClass, droppableClass)}\n          classes={itemClasses}\n          onClick={onClick}\n        >\n          <div className=\"PlaylistMenuRow-title\">\n            {icon}\n            {playlist.name}\n          </div>\n          <div className=\"PlaylistMenuRow-count\">{playlist.size}</div>\n        </MenuItem>\n      </div>\n    ));\n  }\n}\n\nexport default enhance(PlaylistRow);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { MenuItem } from 'material-ui/Menu';\nimport CreatePlaylistIcon from '@material-ui/icons/Add';\n\nimport PromptDialog from '../../Dialogs/PromptDialog';\n\nconst enhance = translate();\n\nclass NewPlaylist extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    t: PropTypes.func.isRequired,\n    onCreatePlaylist: PropTypes.func.isRequired,\n  };\n\n  state = {\n    creating: false,\n  };\n\n  closeDialog() {\n    this.setState({ creating: false });\n  }\n\n  handleOpen = () => {\n    this.setState({ creating: true });\n  };\n\n  handleClose = () => {\n    this.closeDialog();\n  };\n\n  handleSubmit = playlistName =>\n    Promise.resolve(this.props.onCreatePlaylist(playlistName))\n      .then(this.closeDialog.bind(this));\n\n  render() {\n    const { t, className } = this.props;\n    return (\n      <React.Fragment>\n        <MenuItem\n          className={cx('PlaylistMenuRow', 'PlaylistMenuRow--create', className)}\n          onClick={this.handleOpen}\n        >\n          <div className=\"PlaylistMenuRow-title\">\n            <div className=\"PlaylistMenuRow-active-icon\">\n              <CreatePlaylistIcon />\n            </div>\n            {t('playlists.new')}\n          </div>\n        </MenuItem>\n        {this.state.creating && (\n          <PromptDialog\n            title={t('dialogs.createPlaylist.nameInputTitle')}\n            icon={<CreatePlaylistIcon nativeColor=\"#777\" />}\n            submitLabel={t('dialogs.createPlaylist.action')}\n            onSubmit={this.handleSubmit}\n            onCancel={this.handleClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default enhance(NewPlaylist);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z' })\n), 'Search');","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from 'material-ui/IconButton';\nimport { ListItem } from 'material-ui/List';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst SearchResultsRow = ({\n  className,\n  query,\n  onClick,\n  onClose,\n}) => (\n  <ListItem role=\"menuitem\" className={cx('PlaylistMenuRow', 'PlaylistMenuRow--search', className)}>\n    <button\n      className=\"PlaylistMenuRow-title\"\n      onClick={onClick}\n    >\n      <div className=\"PlaylistMenuRow-active-icon\">\n        <SearchIcon />\n      </div>\n      &quot;{query}&quot;\n    </button>\n    <div className=\"PlaylistMenuRow-count\">\n      <IconButton className=\"PlaylistMenuRow-closeButton\" onClick={onClose}>\n        <CloseIcon nativeColor=\"#777\" />\n      </IconButton>\n    </div>\n  </ListItem>\n);\n\nSearchResultsRow.propTypes = {\n  className: PropTypes.string,\n  query: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default SearchResultsRow;\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M21 3.01H3c-1.1 0-2 .9-2 2V9h2V4.99h18v14.03H3V15H1v4.01c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98v-14c0-1.11-.9-2-2-2zM11 16l4-4-4-4v3H1v2h10v3z' })\n), 'Input');","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { CircularProgress } from 'material-ui/Progress';\nimport { MenuItem } from 'material-ui/Menu';\nimport ImportIcon from '@material-ui/icons/Input';\n\nconst enhance = translate();\n\nconst PlaylistImportRow = ({\n  t,\n  className,\n  importing,\n  onClick,\n}) => {\n  let icon;\n  if (importing) {\n    icon = (\n      <div className=\"PlaylistMenuRow-loading\">\n        <CircularProgress size=\"100%\" />\n      </div>\n    );\n  } else {\n    icon = (\n      <div className=\"PlaylistMenuRow-active-icon\">\n        <ImportIcon />\n      </div>\n    );\n  }\n  return (\n    <MenuItem\n      className={cx('PlaylistMenuRow', 'PlaylistMenuRow--import', className)}\n      onClick={onClick}\n    >\n      <div className=\"PlaylistMenuRow-title\">\n        {icon}\n        {t('playlists.import.title')}\n      </div>\n    </MenuItem>\n  );\n};\n\nPlaylistImportRow.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  importing: PropTypes.bool,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default enhance(PlaylistImportRow);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { MenuList } from 'material-ui/Menu';\nimport PlaylistRow from './Row';\nimport PlaylistCreateRow from './NewPlaylist';\nimport SearchResultsRow from './SearchResultsRow';\nimport PlaylistImportRow from './PlaylistImportRow';\n\nconst PlaylistMenu = ({\n  className,\n  playlists,\n  selected,\n  searchQuery,\n  showSearchResults,\n  searchResults,\n  onCreatePlaylist,\n  onSelectPlaylist,\n  onSelectSearchResults,\n  onCloseSearchResults,\n  onAddToPlaylist,\n  showImportPanel,\n  onShowImportPanel,\n}) => {\n  const searchIsSelected = showSearchResults ? 'is-selected' : '';\n  const importIsSelected = showImportPanel ? 'is-selected' : '';\n  const isSelectingPlaylist = selected && !showSearchResults && !showImportPanel;\n  return (\n    <MenuList className={cx('PlaylistMenu', className)}>\n      <PlaylistCreateRow\n        className=\"PlaylistMenu-row\"\n        onCreatePlaylist={onCreatePlaylist}\n      />\n      {searchQuery && (\n        <SearchResultsRow\n          className={cx('PlaylistMenu-row', searchIsSelected)}\n          query={searchQuery}\n          size={searchResults}\n          onClick={onSelectSearchResults}\n          onClose={onCloseSearchResults}\n        />\n      )}\n      {playlists.map(pl => (\n        <PlaylistRow\n          key={pl._id}\n          className=\"PlaylistMenu-row\"\n          playlist={pl}\n          selected={isSelectingPlaylist && selected._id === pl._id}\n          onClick={() => onSelectPlaylist(pl._id)}\n          onAddToPlaylist={onAddToPlaylist}\n        />\n      ))}\n      <PlaylistImportRow\n        className={cx('PlaylistMenu-row', importIsSelected)}\n        onClick={onShowImportPanel}\n      />\n    </MenuList>\n  );\n};\n\nPlaylistMenu.propTypes = {\n  className: PropTypes.string,\n  playlists: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selected: PropTypes.object,\n  showSearchResults: PropTypes.bool.isRequired,\n  showImportPanel: PropTypes.bool.isRequired,\n  searchQuery: PropTypes.string,\n  searchResults: PropTypes.number,\n  onCreatePlaylist: PropTypes.func.isRequired,\n  onSelectPlaylist: PropTypes.func.isRequired,\n  onSelectSearchResults: PropTypes.func.isRequired,\n  onCloseSearchResults: PropTypes.func.isRequired,\n  onAddToPlaylist: PropTypes.func.isRequired,\n  onShowImportPanel: PropTypes.func.isRequired,\n};\n\nexport default PlaylistMenu;\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport {\n  addMedia as addToPlaylist,\n  createPlaylist,\n  selectPlaylist,\n} from '../actions/PlaylistActionCreators';\nimport { showImportPanel } from '../actions/ImportActionCreators';\nimport {\n  showSearchResults,\n  deleteSearch,\n} from '../actions/SearchActionCreators';\n\nimport {\n  playlistsSelector,\n  selectedPlaylistSelector,\n} from '../selectors/playlistSelectors';\nimport {\n  searchQuerySelector,\n  showSearchResultsSelector,\n  searchResultsCountSelector,\n} from '../selectors/searchSelectors';\nimport { showImportPanelSelector } from '../selectors/importSelectors';\nimport PlaylistsMenu from '../components/PlaylistManager/Menu';\n\nconst mapStateToProps = createStructuredSelector({\n  playlists: playlistsSelector,\n  selected: selectedPlaylistSelector,\n  searchQuery: searchQuerySelector,\n  showSearchResults: showSearchResultsSelector,\n  searchResults: searchResultsCountSelector,\n  showImportPanel: showImportPanelSelector,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onAddToPlaylist: addToPlaylist,\n  onCreatePlaylist: createPlaylist,\n  onSelectPlaylist: selectPlaylist,\n  onSelectSearchResults: showSearchResults,\n  onCloseSearchResults: deleteSearch,\n  onShowImportPanel: showImportPanel,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistsMenu);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z' })\n), 'CheckBox');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z' })\n), 'CheckBoxOutlineBlank');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Tooltip from 'material-ui/Tooltip';\nimport IconButton from 'material-ui/IconButton';\nimport EditIcon from '@material-ui/icons/ModeEdit';\nimport PromptDialog from '../../Dialogs/PromptDialog';\n\nconst enhance = translate();\n\nclass RenamePlaylistButton extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    onRename: PropTypes.func.isRequired,\n    initialName: PropTypes.string,\n  };\n\n  state = {\n    renaming: false,\n  };\n\n  closeDialog() {\n    this.setState({ renaming: false });\n  }\n\n  handleOpen = () => {\n    this.setState({ renaming: true });\n  };\n\n  handleClose = () => {\n    this.closeDialog();\n  };\n\n  handleSubmit = name =>\n    this.props.onRename(name)\n      .then(this.closeDialog.bind(this));\n\n  render() {\n    const { t } = this.props;\n    return (\n      <React.Fragment>\n        <Tooltip title={t('playlists.rename')} placement=\"top\">\n          <IconButton className=\"PlaylistMeta-iconButton\" onClick={this.handleOpen}>\n            <EditIcon />\n          </IconButton>\n        </Tooltip>\n        {this.state.renaming && (\n          <PromptDialog\n            title={t('dialogs.renamePlaylist.nameInputTitle')}\n            submitLabel={t('dialogs.renamePlaylist.action')}\n            icon={<EditIcon nativeColor=\"#777\" />}\n            value={this.props.initialName}\n            onSubmit={this.handleSubmit}\n            onCancel={this.handleClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default enhance(RenamePlaylistButton);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z' })\n), 'Delete');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Tooltip from 'material-ui/Tooltip';\nimport IconButton from 'material-ui/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport ConfirmDialog from '../../Dialogs/ConfirmDialog';\nimport FormGroup from '../../Form/Group';\n\nconst enhance = translate();\n\nclass DeletePlaylistButton extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onNotDeletable: PropTypes.func.isRequired,\n    active: PropTypes.bool,\n  };\n\n  state = {\n    deleting: false,\n  };\n\n  closeDialog() {\n    this.setState({ deleting: false });\n  }\n\n  handleOpen = () => {\n    if (this.props.active) {\n      this.props.onNotDeletable();\n    } else {\n      this.setState({ deleting: true });\n    }\n  };\n\n  handleClose = () => {\n    this.closeDialog();\n  };\n\n  handleConfirm = name =>\n    this.props.onDelete(name)\n      .then(this.closeDialog.bind(this));\n\n  render() {\n    const { t, active } = this.props;\n    return (\n      <React.Fragment>\n        <Tooltip title={active ? t('playlists.deleteActive') : t('playlists.delete')} placement=\"top\">\n          <IconButton\n            disabled={active}\n            className=\"PlaylistMeta-iconButton\"\n            onClick={this.handleOpen}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n        {this.state.deleting && (\n          <ConfirmDialog\n            title={t('dialogs.deletePlaylist.title')}\n            confirmLabel={t('dialogs.deletePlaylist.action')}\n            onConfirm={this.handleConfirm}\n            onCancel={this.handleClose}\n          >\n            <FormGroup>{t('dialogs.deletePlaylist.confirm')}</FormGroup>\n          </ConfirmDialog>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default enhance(DeletePlaylistButton);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z' })\n), 'Shuffle');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport compose from 'recompose/compose';\nimport withState from 'recompose/withState';\nimport withHandlers from 'recompose/withHandlers';\nimport { translate } from 'react-i18next';\nimport { CircularProgress } from 'material-ui/Progress';\nimport Tooltip from 'material-ui/Tooltip';\nimport IconButton from 'material-ui/IconButton';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\n\nconst enhance = compose(\n  withState('isLoading', 'setLoading', false),\n  withHandlers({\n    onClick: props => () => {\n      props.setLoading(true);\n      props.onShuffle().then(() => {\n        props.setLoading(false);\n      }, () => {\n        props.setLoading(false);\n      });\n    },\n  }),\n  translate(),\n);\n\nconst ShuffleButton = ({\n  t,\n  isLoading,\n  onClick,\n}) => (\n  <Tooltip title={t('playlists.shuffle')} placement=\"top\">\n    <IconButton\n      className=\"PlaylistMeta-iconButton\"\n      onClick={onClick}\n    >\n      {isLoading ? (\n        <CircularProgress size=\"100%\" />\n      ) : (\n        <ShuffleIcon />\n      )}\n    </IconButton>\n  </Tooltip>\n);\n\nShuffleButton.propTypes = {\n  t: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  onShuffle: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types\n};\n\nexport default enhance(ShuffleButton);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport debounce from 'lodash/debounce';\nimport Tooltip from 'material-ui/Tooltip';\nimport IconButton from 'material-ui/IconButton';\nimport FilterIcon from '@material-ui/icons/Search';\n\nconst enhance = translate();\n\nclass PlaylistFilter extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n  };\n\n  state = {\n    open: false,\n    value: '',\n  };\n\n  onFilter = debounce((value) => {\n    this.props.onFilter(value);\n  }, 200);\n\n  clearFilter() {\n    if (this.state.value !== '') {\n      this.props.onFilter('');\n    }\n  }\n\n  handleClick = () => {\n    const isOpen = !this.state.open;\n\n    if (!isOpen) {\n      this.clearFilter();\n    }\n\n    this.setState({\n      open: isOpen,\n      value: '',\n    }, () => {\n      if (isOpen) {\n        this.input.focus();\n      }\n    });\n  };\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n    this.onFilter(event.target.value);\n  };\n\n  refInput = (input) => {\n    this.input = input;\n  };\n\n  render() {\n    const { t } = this.props;\n    const isOpen = this.state.open;\n    return (\n      <div className=\"PlaylistMediaFilter\">\n        <Tooltip title={t('playlists.filter')} placement=\"top\">\n          <IconButton\n            className=\"PlaylistMeta-iconButton\"\n            onClick={this.handleClick}\n          >\n            <FilterIcon nativeColor={isOpen ? '#fff' : null} />\n          </IconButton>\n        </Tooltip>\n        <input\n          type=\"text\"\n          ref={this.refInput}\n          className={cx('PlaylistMediaFilter-input', isOpen && 'is-open')}\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default enhance(PlaylistFilter);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Checkbox from 'material-ui/Checkbox';\nimport ActiveIcon from '@material-ui/icons/CheckBox';\nimport ActivateIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport RenamePlaylistButton from './RenamePlaylistButton';\nimport DeletePlaylistButton from './DeletePlaylistButton';\nimport ShufflePlaylistButton from './ShufflePlaylistButton';\nimport PlaylistFilter from './PlaylistFilter';\n\nconst enhance = translate();\n\nconst PlaylistMeta = ({\n  t,\n  className,\n  active,\n  name,\n  onShufflePlaylist,\n  onActivatePlaylist,\n  onRenamePlaylist,\n  onDeletePlaylist,\n  onNotDeletable,\n  onFilter,\n}) => (\n  <div className={cx('PlaylistMeta', className, active ? 'PlaylistMeta--active' : '')}>\n    <div className=\"PlaylistMeta-name\">\n      {name}\n    </div>\n    <div className=\"PlaylistMeta-active\">\n      <Checkbox\n        checked={active}\n        onChange={active ? null : onActivatePlaylist}\n        icon={<ActivateIcon />}\n        checkedIcon={<ActiveIcon nativeColor=\"#fff\" />}\n      />\n      <span>\n        {active ? t('playlists.active') : t('playlists.activate')}\n      </span>\n    </div>\n    <PlaylistFilter\n      onFilter={onFilter}\n    />\n    <ShufflePlaylistButton onShuffle={onShufflePlaylist} />\n    <RenamePlaylistButton\n      initialName={name}\n      onRename={onRenamePlaylist}\n    />\n    <DeletePlaylistButton\n      active={active}\n      onNotDeletable={onNotDeletable}\n      onDelete={onDeletePlaylist}\n    />\n  </div>\n);\n\nPlaylistMeta.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  active: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  onShufflePlaylist: PropTypes.func.isRequired,\n  onActivatePlaylist: PropTypes.func.isRequired,\n  onRenamePlaylist: PropTypes.func.isRequired,\n  onDeletePlaylist: PropTypes.func.isRequired,\n  onNotDeletable: PropTypes.func.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default enhance(PlaylistMeta);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropTarget } from 'react-dnd';\nimport { MEDIA } from '../../../constants/DDItemTypes';\nimport isDraggingNearTopOfRow from '../../../utils/isDraggingNearTopOfRow';\nimport MediaRow from '../../MediaList/Row';\n\nconst mediaTarget = {\n  drop(props, monitor, component) {\n    const item = monitor.getItem();\n    const { media } = item;\n    if (media) {\n      const thisID = props.media._id;\n      // Do not attempt to move when the selection is dropped on top of an item\n      // that is in the selection.\n      if (media.some(playlistItem => playlistItem._id === thisID)) {\n        return;\n      }\n      const insertBefore = isDraggingNearTopOfRow(monitor, component);\n      props.onMoveMedia(\n        media,\n        insertBefore ? { before: thisID } : { after: thisID },\n      );\n    }\n  },\n  hover(props, monitor, component) {\n    component.setState({\n      insertingAbove: isDraggingNearTopOfRow(monitor, component),\n    });\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n});\n\nclass PlaylistItemRow extends React.Component {\n  static propTypes = {\n    connectDropTarget: PropTypes.func.isRequired,\n    // Used in the drop handler above 👆\n    // eslint-disable-next-line react/no-unused-prop-types\n    onMoveMedia: PropTypes.func.isRequired,\n    isOver: PropTypes.bool.isRequired,\n  };\n\n  state = {\n    insertingAbove: false,\n  };\n\n  render() {\n    const {\n      connectDropTarget,\n      isOver,\n      ...props\n    } = this.props;\n    const { insertingAbove } = this.state;\n\n    const dropIndicator = <div className=\"PlaylistItemRow-drop-indicator\" />;\n\n    return connectDropTarget((\n      <div className=\"PlaylistItemRow\">\n        {isOver && insertingAbove && dropIndicator}\n        <MediaRow {...props} />\n        {isOver && !insertingAbove && dropIndicator}\n      </div>\n    ));\n  }\n}\n\nexport default DropTarget(MEDIA, mediaTarget, collect)(PlaylistItemRow);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Action from './Action';\n\nconst RemoveFromPlaylist = ({ onRemove, ...props }) => (\n  <Action {...props} onAction={onRemove}>\n    <DeleteIcon />\n  </Action>\n);\n\nRemoveFromPlaylist.propTypes = {\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default RemoveFromPlaylist;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport EditIcon from '@material-ui/icons/ModeEdit';\nimport Action from './Action';\n\nconst EditMedia = ({ onEdit, ...props }) => (\n  <Action {...props} onAction={onEdit}>\n    <EditIcon />\n  </Action>\n);\n\nEditMedia.propTypes = {\n  onEdit: PropTypes.func.isRequired,\n};\n\nexport default EditMedia;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MoveToFirstIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Action from './Action';\n\nconst MoveToFirst = ({ onFirst, ...props }) => (\n  <Action {...props} onAction={onFirst}>\n    <MoveToFirstIcon />\n  </Action>\n);\n\nMoveToFirst.propTypes = {\n  onFirst: PropTypes.func.isRequired,\n};\n\nexport default MoveToFirst;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MoveToLastIcon from '@material-ui/icons/KeyboardArrowDown';\nimport Action from './Action';\n\nconst MoveToLast = ({ onLast, ...props }) => (\n  <Action {...props} onAction={onLast}>\n    <MoveToLastIcon />\n  </Action>\n);\n\nMoveToLast.propTypes = {\n  onLast: PropTypes.func.isRequired,\n};\n\nexport default MoveToLast;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CircularProgress } from 'material-ui/Progress';\nimport MediaList from '../../MediaList';\nimport PlaylistMeta from './Meta';\nimport PlainItemRow from '../../MediaList/Row';\nimport PlaylistItemRow from './PlaylistItemRow';\nimport AddToPlaylistAction from '../../MediaList/Actions/AddToPlaylist';\nimport RemoveFromPlaylistAction from '../../MediaList/Actions/RemoveFromPlaylist';\nimport EditMediaAction from '../../MediaList/Actions/EditMedia';\nimport MoveToFirstAction from '../../MediaList/Actions/MoveToFirst';\nimport MoveToLastAction from '../../MediaList/Actions/MoveToLast';\n\nconst makeActions = ({\n  onOpenAddMediaMenu,\n  onMoveToFirst,\n  onMoveToLast,\n  onEditMedia,\n  onRemoveFromPlaylist,\n  isFiltered,\n}) =>\n  (media, selection, index) => [\n    <AddToPlaylistAction\n      key=\"add\"\n      onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n    />,\n    // Don't show the \"move to first\" action on the first item in the playlist.\n    // If the playlist is filtered we don't know if the first item to show is\n    // also the first in the playlist, so just show it always in that case.\n    (index > 0 || isFiltered) && (\n      <MoveToFirstAction\n        key=\"first\"\n        onFirst={() => onMoveToFirst(media, selection)}\n      />\n    ),\n    (index === 0 && !isFiltered) && (\n      <MoveToLastAction\n        key=\"last\"\n        onLast={() => onMoveToLast(media, selection)}\n      />\n    ),\n    <EditMediaAction\n      key=\"edit\"\n      onEdit={() => onEditMedia(media)}\n    />,\n    <RemoveFromPlaylistAction\n      key=\"remove\"\n      onRemove={() => onRemoveFromPlaylist(media, selection)}\n    />,\n  ];\n\nconst PlaylistPanel = (props) => {\n  const {\n    className,\n    playlist,\n    media,\n    loading,\n    isFiltered,\n    onShufflePlaylist,\n    onActivatePlaylist,\n    onRenamePlaylist,\n    onDeletePlaylist,\n    onNotDeletable,\n    onLoadPlaylistPage,\n    onFilterPlaylistItems,\n    onMoveMedia,\n    onOpenPreviewMediaDialog,\n  } = props;\n\n  let list;\n  if (loading) {\n    list = (\n      <div className=\"PlaylistPanel-loading\">\n        <CircularProgress size=\"100%\" />\n      </div>\n    );\n  } else {\n    list = (\n      <MediaList\n        className=\"PlaylistPanel-media\"\n        size={media.length}\n        media={media}\n        rowComponent={isFiltered ? PlainItemRow : PlaylistItemRow}\n        rowProps={{ onMoveMedia }}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        makeActions={makeActions(props)}\n        onRequestPage={onLoadPlaylistPage}\n      />\n    );\n  }\n\n  return (\n    <div className={cx('PlaylistPanel', className)}>\n      <PlaylistMeta\n        className=\"PlaylistPanel-meta\"\n        id={playlist._id}\n        name={playlist.name}\n        active={playlist.active}\n        onShufflePlaylist={onShufflePlaylist}\n        onActivatePlaylist={onActivatePlaylist}\n        onRenamePlaylist={onRenamePlaylist}\n        onDeletePlaylist={onDeletePlaylist}\n        onNotDeletable={onNotDeletable}\n        onFilter={onFilterPlaylistItems}\n      />\n      {list}\n    </div>\n  );\n};\n\nPlaylistPanel.propTypes = {\n  className: PropTypes.string,\n  playlist: PropTypes.object.isRequired,\n  media: PropTypes.array.isRequired,\n  loading: PropTypes.bool.isRequired,\n  isFiltered: PropTypes.bool.isRequired,\n  onShufflePlaylist: PropTypes.func.isRequired,\n  onActivatePlaylist: PropTypes.func.isRequired,\n  onRenamePlaylist: PropTypes.func.isRequired,\n  onDeletePlaylist: PropTypes.func.isRequired,\n  onLoadPlaylistPage: PropTypes.func.isRequired,\n  onFilterPlaylistItems: PropTypes.func.isRequired,\n  onNotDeletable: PropTypes.func.isRequired,\n  onMoveMedia: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default PlaylistPanel;\n","import { bindActionCreators } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\n\nimport {\n  selectedPlaylistSelector,\n  filteredSelectedPlaylistItemsSelector,\n  isSelectedPlaylistLoadingSelector,\n  isFilteredSelector,\n} from '../selectors/playlistSelectors';\n\nimport { openPreviewMediaDialog } from '../actions/DialogActionCreators';\nimport {\n  addMediaMenu,\n  editMedia,\n  moveMedia,\n  removeMedia,\n  filterPlaylistItems,\n  renamePlaylist,\n  deletePlaylist,\n  cannotDeleteActivePlaylist,\n  shufflePlaylist,\n  activatePlaylist,\n  loadPlaylist,\n  loadFilteredPlaylistItems,\n} from '../actions/PlaylistActionCreators';\n\nimport PlaylistPanel from '../components/PlaylistManager/Panel';\n\nconst mapStateToProps = createStructuredSelector({\n  playlist: selectedPlaylistSelector,\n  media: filteredSelectedPlaylistItemsSelector,\n  loading: isSelectedPlaylistLoadingSelector,\n  isFiltered: isFilteredSelector,\n});\n\nconst selectionOrOne = (media, selection) => {\n  if (selection.isSelected(media)) {\n    return selection.get();\n  }\n  return [media];\n};\n\nconst onOpenAddMediaMenu = (position, media, selection) =>\n  addMediaMenu(selectionOrOne(media, selection), position);\nconst onRemoveFromPlaylist = playlist => (media, selection) =>\n  removeMedia(playlist, selectionOrOne(media, selection));\nconst onMoveMedia = playlist => (media, opts) =>\n  moveMedia(playlist, media, opts);\nconst onMoveToFirst = playlist => (media, selection) =>\n  moveMedia(playlist, selectionOrOne(media, selection), { at: 'start' });\nconst onMoveToLast = playlist => (media, selection) =>\n  moveMedia(playlist, selectionOrOne(media, selection), { at: 'end' });\nconst onEditMedia = playlist => media =>\n  editMedia(playlist, media);\nconst onLoadPlaylistPage = ({ isFiltered, playlist }) => page => (\n  isFiltered ? loadFilteredPlaylistItems(playlist._id, page) :\n    loadPlaylist(playlist._id, page)\n);\n\n// Most of the playlist-related action creators need to know which playlist to\n// use, i.e. need to have a reference to the selected playlist. The selected\n// playlist is picked out in `mapStateToProps`, but we can't access its result\n// in `mapDispatchToProps` yet. Instead, `mapDispatchToProps` passes the\n// `dispatch` function to the `mergeProps` function below, and then that\n// configures the action creators.\n// TODO Maybe it's better to have versions of these action creators that work on\n// the selected playlist by default? using redux-thunk.\nconst mapDispatchToProps = dispatch => ({ dispatch });\n\nconst mergeProps = (state, { dispatch }, props) => ({\n  ...props,\n  ...state,\n  ...bindActionCreators({\n    onShufflePlaylist: shufflePlaylist.bind(null, state.playlist._id),\n    onActivatePlaylist: activatePlaylist.bind(null, state.playlist._id),\n    onRenamePlaylist: renamePlaylist.bind(null, state.playlist._id),\n    onDeletePlaylist: deletePlaylist.bind(null, state.playlist._id),\n    onNotDeletable: cannotDeleteActivePlaylist,\n\n    onOpenAddMediaMenu,\n    onOpenPreviewMediaDialog: openPreviewMediaDialog,\n    onMoveToFirst: onMoveToFirst(state.playlist._id),\n    onMoveToLast: onMoveToLast(state.playlist._id),\n    onMoveMedia: onMoveMedia(state.playlist._id),\n    onEditMedia: onEditMedia(state.playlist._id),\n    onRemoveFromPlaylist: onRemoveFromPlaylist(state.playlist._id),\n    onLoadPlaylistPage: onLoadPlaylistPage(state),\n    onFilterPlaylistItems: filterPlaylistItems.bind(null, state.playlist._id),\n  }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(PlaylistPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport injectMediaSources from '../../../utils/injectMediaSources';\n\nconst PlaylistImport = ({\n  getMediaSource,\n  getAllMediaSources,\n  selectedSourceType,\n  sourceStates,\n  onShowImportPanel,\n  onHideImportPanel,\n}) => {\n  if (selectedSourceType) {\n    const Panel = getMediaSource(selectedSourceType).ImportPanel;\n    const state = sourceStates[selectedSourceType];\n    return (\n      <Panel\n        onClosePanel={onHideImportPanel}\n        {...state}\n      />\n    );\n  }\n\n  const forms = [];\n  const sources = getAllMediaSources();\n  Object.keys(sources).forEach((sourceType) => {\n    const { ImportForm } = sources[sourceType];\n    if (ImportForm) {\n      forms.push((\n        <ImportForm\n          key={sourceType}\n          onShowImportPanel={() => onShowImportPanel(sourceType)}\n          onHideImportPanel={onHideImportPanel}\n        />\n      ));\n    }\n  });\n\n  return (\n    <div className=\"PlaylistImport\">\n      {forms}\n    </div>\n  );\n};\n\nPlaylistImport.propTypes = {\n  selectedSourceType: PropTypes.string,\n  sourceStates: PropTypes.object,\n\n  getMediaSource: PropTypes.func.isRequired,\n  getAllMediaSources: PropTypes.func.isRequired,\n  onShowImportPanel: PropTypes.func.isRequired,\n  onHideImportPanel: PropTypes.func.isRequired,\n};\n\nexport default injectMediaSources()(PlaylistImport);\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport {\n  showImportSourcePanel,\n  hideImportSourcePanel,\n} from '../actions/ImportActionCreators';\nimport { selectedSourceTypeSelector } from '../selectors/importSelectors';\nimport PlaylistImport from '../components/PlaylistManager/Import';\n\nconst mapStateToProps = createStructuredSelector({\n  selectedSourceType: selectedSourceTypeSelector,\n  sourceStates: state => state.sources,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onShowImportPanel: showImportSourcePanel,\n  onHideImportPanel: hideImportSourcePanel,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistImport);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { CircularProgress } from 'material-ui/Progress';\nimport { IDLE, LOADING, LOADED } from '../../../constants/LoadingStates';\nimport MediaList from '../../MediaList';\nimport AddToPlaylistAction from '../../MediaList/Actions/AddToPlaylist';\n\nconst SearchResults = ({\n  t,\n  className,\n  query,\n  results,\n  loadingState,\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog,\n}) => {\n  let list;\n  if (loadingState === LOADED) {\n    list = (\n      <MediaList\n        className=\"PlaylistPanel-media\"\n        media={results}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        makeActions={(media, selection) => (\n          <React.Fragment>\n            <AddToPlaylistAction\n              onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n            />\n          </React.Fragment>\n        )}\n      />\n    );\n  } else {\n    list = (\n      <div className=\"PlaylistPanel-loading\">\n        <CircularProgress size=\"100%\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className={cx('PlaylistPanel', 'SearchResults', className)}>\n      <div className=\"SearchResults-query\">\n        {t('playlists.search.results', { query })}\n      </div>\n      {list}\n    </div>\n  );\n};\n\nSearchResults.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  query: PropTypes.string.isRequired,\n  results: PropTypes.arrayOf(PropTypes.object),\n  loadingState: PropTypes.oneOf([IDLE, LOADING, LOADED]).isRequired,\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default translate()(SearchResults);\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { openPreviewMediaDialog } from '../actions/DialogActionCreators';\nimport { addMediaMenu } from '../actions/PlaylistActionCreators';\n\nimport {\n  searchQuerySelector,\n  searchResultsSelector,\n  searchLoadingStateSelector,\n} from '../selectors/searchSelectors';\nimport SearchResults from '../components/PlaylistManager/Panel/SearchResults';\n\nconst mapStateToProps = createStructuredSelector({\n  query: searchQuerySelector,\n  results: searchResultsSelector,\n  loadingState: searchLoadingStateSelector,\n});\n\nconst selectionOrOne = (media, selection) => {\n  if (selection.isSelected(media)) {\n    return selection.get();\n  }\n  return [media];\n};\n\nconst onOpenAddMediaMenu = (position, media, selection) =>\n  addMediaMenu(selectionOrOne(media, selection), position);\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog: openPreviewMediaDialog,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResults);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst enhance = translate();\n\nclass SearchBar extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = { focused: false };\n\n  handleFocus = () => {\n    this.setState({ focused: true });\n  };\n  handleBlur = () => {\n    this.setState({ focused: false });\n  };\n\n  handleKeyDown = (e) => {\n    const { onSubmit } = this.props;\n    if (e.key === 'Enter') {\n      onSubmit(this.input.value);\n    }\n  };\n\n  refInput = (input) => {\n    this.input = input;\n  };\n\n  render() {\n    const { t, children } = this.props;\n    const { focused } = this.state;\n    return (\n      <div className={cx('SearchBar', focused ? 'is-focused' : '', this.props.className)}>\n        <div className=\"SearchBar-icon\">\n          <SearchIcon />\n        </div>\n        {children}\n        <div className=\"SearchBar-query\">\n          <input\n            ref={this.refInput}\n            className=\"SearchBar-input\"\n            type=\"text\"\n            placeholder={focused ? '' : t('playlists.search.action')}\n            onFocus={this.handleFocus}\n            onBlur={this.handleBlur}\n            onKeyDown={this.handleKeyDown}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default enhance(SearchBar);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SourcePickerElement = ({\n  className,\n  name,\n  source,\n  active,\n}) => (\n  <div\n    className={cx(\n      'SourcePickerElement',\n      `SourcePickerElement--${name}`,\n      active && 'SourcePickerElement--active',\n      className,\n    )}\n    style={{ backgroundImage: `url(${source.logo})` }}\n  />\n);\n\nSourcePickerElement.propTypes = {\n  className: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  source: PropTypes.shape({\n    logo: PropTypes.string.isRequired,\n  }).isRequired,\n  active: PropTypes.bool,\n};\n\nexport default SourcePickerElement;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Popover from 'material-ui/Popover';\nimport ArrowIcon from '@material-ui/icons/ArrowDropDown';\nimport injectMediaSources from '../../../utils/injectMediaSources';\nimport SourcePickerElement from './SourcePickerElement';\n\nconst enhance = injectMediaSources();\n\nconst popoverPosition = {\n  anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n  transformOrigin: { vertical: 'top', horizontal: 'left' },\n};\n\nclass SourcePicker extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    selected: PropTypes.string,\n    onChange: PropTypes.func,\n\n    getMediaSource: PropTypes.func.isRequired,\n    getAllMediaSources: PropTypes.func.isRequired,\n  };\n\n  state = { open: false };\n\n  createElement(sourceName) {\n    const { selected, getMediaSource } = this.props;\n    return (\n      <button\n        className=\"SourcePicker-item\"\n        key={sourceName}\n        onClick={() => this.handleChange(sourceName)}\n      >\n        <SourcePickerElement\n          name={sourceName}\n          source={getMediaSource(sourceName)}\n          active={selected === sourceName}\n        />\n      </button>\n    );\n  }\n\n  handleOpen = () => {\n    this.setState({\n      open: true,\n      anchor: this.container,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleChange(sourceName) {\n    this.handleClose();\n    this.props.onChange(sourceName);\n  }\n\n  refContainer = (container) => {\n    this.container = container;\n  };\n\n  render() {\n    const {\n      className,\n      selected,\n      getMediaSource,\n      getAllMediaSources,\n    } = this.props;\n\n    const sourceNames = Object.keys(getAllMediaSources());\n    const sources = sourceNames\n      .filter(name => name !== selected)\n      .map(name => this.createElement(name));\n\n    return (\n      <div\n        className={cx('SourcePicker', className)}\n        ref={this.refContainer}\n      >\n        <button\n          className=\"SourcePicker-active\"\n          onClick={this.handleOpen}\n        >\n          <SourcePickerElement\n            name={selected}\n            source={getMediaSource(selected)}\n            active\n          />\n          <ArrowIcon className=\"SourcePicker-arrow\" />\n        </button>\n        <Popover\n          classes={{ paper: 'SourcePicker-list' }}\n          open={this.state.open}\n          anchorEl={this.state.anchor}\n          onClose={this.handleClose}\n          {...popoverPosition}\n        >\n          {sources}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nexport default enhance(SourcePicker);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BaseSearchBar from '../../SearchBar';\nimport SourcePicker from './SourcePicker';\n\nconst SearchBar = ({\n  className,\n  source,\n  onSubmit,\n  onSourceChange,\n}) => (\n  <BaseSearchBar className={className} onSubmit={onSubmit}>\n    <SourcePicker\n      className=\"SearchBar-source\"\n      selected={source}\n      onChange={onSourceChange}\n    />\n  </BaseSearchBar>\n);\n\nSearchBar.propTypes = {\n  className: PropTypes.string,\n  source: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onSourceChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport SearchBar from '../components/PlaylistManager/Header/SearchBar';\nimport {\n  search,\n  setSource,\n} from '../actions/SearchActionCreators';\nimport { searchSourceTypeSelector } from '../selectors/searchSelectors';\n\nconst mapStateToProps = createStructuredSelector({\n  source: searchSourceTypeSelector,\n});\n\nconst mapDispatchToProps = {\n  onSubmit: search,\n  onSourceChange: setSource,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport OverlayHeader from '../../Overlay/Header';\nimport SearchBar from '../../../containers/MediaSearchBar';\n\nconst enhance = translate();\n\nconst PlaylistManagerHeader = ({\n  t,\n  className,\n  onCloseOverlay,\n}) => (\n  <OverlayHeader\n    className={cx('PlaylistHeader', className)}\n    title={t('playlists.title')}\n    onCloseOverlay={onCloseOverlay}\n  >\n    <SearchBar className=\"PlaylistHeader-search\" />\n  </OverlayHeader>\n);\n\nPlaylistManagerHeader.propTypes = {\n  className: PropTypes.string,\n  t: PropTypes.func.isRequired,\n  onCloseOverlay: PropTypes.func.isRequired,\n};\n\nexport default enhance(PlaylistManagerHeader);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\n\nconst EmptyPanel = ({ t, className }) => (\n  <div className={cx('PlaylistPanel', 'PlaylistPanel--empty', className)}>\n    {t('playlists.noPlaylists')}\n  </div>\n);\n\nEmptyPanel.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default translate()(EmptyPanel);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport OverlayContent from '../Overlay/Content';\nimport PlaylistMenu from '../../containers/PlaylistManagerMenu';\nimport PlaylistPanel from '../../containers/PlaylistManagerPanel';\nimport PlaylistImport from '../../containers/PlaylistImportManager';\nimport SearchResults from '../../containers/SearchResultsPanel';\nimport PlaylistHeader from './Header';\nimport PlaylistPanelEmpty from './Panel/Empty';\n\nconst PlaylistManager = ({\n  className,\n  selectedPlaylist,\n  showSearchResults,\n  showImportPanel,\n  onCloseOverlay,\n}) => {\n  let panel;\n  if (showImportPanel) {\n    panel = (\n      <div className=\"PlaylistPanel\">\n        <PlaylistImport />\n      </div>\n    );\n  } else if (showSearchResults) {\n    panel = <SearchResults />;\n  } else if (selectedPlaylist) {\n    // HACK Give this a key so it's remounted when you switch playlists.\n    // This is because there is some statefulness down the tree, especially\n    // in playlist filters and scroll position.\n    // By forcing a remount using a key we throw away all state and keep it\n    // consistent.\n    // TODO To *actually* fix playlist filters bleeding across playlist lines,\n    // we should reset the playlist filter state alone somehow when the\n    // selected playlist changes.\n    panel = <PlaylistPanel key={selectedPlaylist._id} />;\n  } else {\n    panel = <PlaylistPanelEmpty />;\n  }\n\n  return (\n    <div className={cx('PlaylistManager', className)}>\n      <PlaylistHeader\n        className=\"PlaylistManager-header AppRow AppRow--top\"\n        onCloseOverlay={onCloseOverlay}\n      />\n\n      <OverlayContent>\n        <PlaylistMenu className=\"PlaylistManager-menu\" />\n        <div className=\"PlaylistManager-panel\">\n          {panel}\n        </div>\n      </OverlayContent>\n    </div>\n  );\n};\n\nPlaylistManager.propTypes = {\n  className: PropTypes.string,\n  selectedPlaylist: PropTypes.object,\n  showSearchResults: PropTypes.bool.isRequired,\n  showImportPanel: PropTypes.bool.isRequired,\n  onCloseOverlay: PropTypes.func,\n};\n\nexport default PlaylistManager;\n"],"sourceRoot":""}