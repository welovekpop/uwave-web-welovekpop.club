{"version":3,"sources":["webpack:///./components/TimeAgo/index.js","webpack:///./components/RoomHistory/Votes.js","webpack:///./components/RoomHistory/Row.js","webpack:///./components/RoomHistory/HistoryList.js","webpack:///./components/RoomHistory/index.js"],"names":["TimeAgo_TimeAgo","_ref","t","secondsAgo","Math","max","floor","currentTime","timestamp","msString","ms_default","long","_translateMs","str","_str$split","split","count","key","replace","parseInt","translateMs","jsx_default","time","defaultValue","propTypes","components_TimeAgo","compose_default","Object","es","timed","Votes_Votes","upvotes","downvotes","favorites","isUpvote","isDownvote","CurrentFavoriteIcon","isFavorite","Favorite","FavoriteBorder","className","ThumbUp","classnames_default","length","ThumbDown","RoomHistory_Votes","mediaSource","beginDrag","selection","media","some","item","_id","inSelection","enhance","lib","DDItemTypes","connect","connectDragSource","dragSource","connectDragPreview","dragPreview","Row_HistoryRow","state","showActions","handleMouseEnter","_this","setState","handleMouseLeave","handleDoubleClick","props","onOpenPreviewMediaDialog","handleKeyPress","event","code","onClick","componentDidMount","this","react_dnd_html5_backend_lib","render","_props","historyEntry","makeActions","user","stats","selectedClass","selected","thumbnail","src","alt","onMouseEnter","onMouseLeave","onDoubleClick","onKeyPress","SongTitle","size","artist","title","react_default","a","createElement","username","dateTime","Actions","Component","defaultProps","Row","noActions","HistoryList","withProps_default","listComponent","rowComponent","onOpenAddMediaMenu","AddToPlaylist","onAdd","position","BaseMediaList","prop_types_default","func","isRequired","RoomHistory_HistoryList","RoomHistory_enhance","RoomHistory_RoomHistory","onCloseOverlay","objectWithoutProperties_default","Header","direction","Content","extends_default","__webpack_exports__"],"mappings":"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","file":"history_2510319.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport compose from 'recompose/compose';\nimport ms from 'ms';\n\nimport timed from '../../utils/timed';\n\n// Bit weird to do it like this perhaps, convert to an english string first and\n// then translate afterwards.\nfunction translateMs(str) {\n  // `ms` output of the form \"3 hours\"\n  const [count, key] = str.split(' ');\n  return {\n    key: `${key.replace(/s$/, '')}s`,\n    count: parseInt(count, 10),\n  };\n}\n\nconst TimeAgo = ({ t, currentTime, timestamp }) => {\n  const secondsAgo = Math.max(0, Math.floor((currentTime - timestamp) / 1000));\n  const msString = ms(secondsAgo * 1000, { long: true });\n  const { key, count } = translateMs(msString);\n  return (\n    <span>\n      {t('timeAgo.format', {\n        time: t(`timeAgo.${key}`, {\n          count,\n          defaultValue: msString,\n        }),\n      })}\n    </span>\n  );\n};\n\nTimeAgo.propTypes = {\n  t: PropTypes.func.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  timestamp: PropTypes.number.isRequired,\n};\n\nexport default compose(\n  translate(),\n  timed(),\n)(TimeAgo);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport DownvoteIcon from '@material-ui/icons/ThumbDown';\nimport UpvoteIcon from '@material-ui/icons/ThumbUp';\nimport FavoritedIcon from '@material-ui/icons/Favorite';\nimport FavoriteIcon from '@material-ui/icons/FavoriteBorder';\n\nconst Votes = ({\n  upvotes, downvotes, favorites, isUpvote, isDownvote, isFavorite,\n}) => {\n  const CurrentFavoriteIcon = isFavorite ? FavoritedIcon : FavoriteIcon;\n  return (\n    <div className=\"HistoryVotes AudienceResponse\">\n      <div className=\"ResponseButton ResponseButton--static\">\n        <div className=\"ResponseButton-content\">\n          <UpvoteIcon className={cx('HistoryVotes-icon', isUpvote && 'ResponseButton-icon--upvoted')} />\n          <span className=\"ResponseButton-count\">{upvotes.length}</span>\n        </div>\n      </div>\n      <div className=\"ResponseButton ResponseButton--static\">\n        <div className=\"ResponseButton-content\">\n          <CurrentFavoriteIcon className=\"HistoryVotes-icon ResponseButton-icon--favorite\" />\n          <span className=\"ResponseButton-count\">{favorites.length}</span>\n        </div>\n      </div>\n      <div className=\"ResponseButton ResponseButton--static\">\n        <div className=\"ResponseButton-content\">\n          <DownvoteIcon className={cx('HistoryVotes-icon', isDownvote && 'ResponseButton-icon--downvoted')} />\n          <span className=\"ResponseButton-count\">{downvotes.length}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nVotes.propTypes = {\n  upvotes: PropTypes.array.isRequired,\n  favorites: PropTypes.array.isRequired,\n  downvotes: PropTypes.array.isRequired,\n  isUpvote: PropTypes.bool.isRequired,\n  isFavorite: PropTypes.bool.isRequired,\n  isDownvote: PropTypes.bool.isRequired,\n};\n\nexport default Votes;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { MEDIA } from '../../constants/DDItemTypes';\n\nimport Actions from '../MediaList/Actions';\nimport SongTitle from '../SongTitle';\nimport TimeAgo from '../TimeAgo';\n\nimport HistoryVotes from './Votes';\n\nconst inSelection = (selection, media) =>\n  selection.some(item => item._id === media._id);\n\nconst mediaSource = {\n  beginDrag({ selection, media }) {\n    return {\n      media: inSelection(selection, media.media) ? selection : [media.media],\n    };\n  },\n};\n\nconst collect = connect => ({\n  connectDragSource: connect.dragSource(),\n  connectDragPreview: connect.dragPreview(),\n});\n\nconst enhance = DragSource(MEDIA, mediaSource, collect);\n\nclass HistoryRow extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    connectDragSource: PropTypes.func.isRequired,\n    connectDragPreview: PropTypes.func.isRequired,\n    media: PropTypes.object,\n    selected: PropTypes.bool,\n    selection: PropTypes.array,\n\n    onOpenPreviewMediaDialog: PropTypes.func,\n    onClick: PropTypes.func,\n    makeActions: PropTypes.func,\n  };\n\n  static defaultProps = {\n    selected: false,\n  };\n\n  state = { showActions: false };\n\n  componentDidMount() {\n    this.props.connectDragPreview(getEmptyImage());\n  }\n\n  handleMouseEnter = () => {\n    this.setState({ showActions: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ showActions: false });\n  };\n\n  handleDoubleClick = () => {\n    this.props.onOpenPreviewMediaDialog(this.props.media.media);\n  };\n\n  handleKeyPress = (event) => {\n    if (event.code === 'Space') {\n      this.props.onClick();\n    }\n  };\n\n  render() {\n    const {\n      media: historyEntry,\n      className,\n      selection,\n      selected,\n      connectDragSource,\n      // actions\n      makeActions,\n      // etc\n      onClick,\n    } = this.props;\n    const {\n      media, timestamp, user, stats,\n    } = historyEntry;\n    const { showActions } = this.state;\n    const selectedClass = selected ? 'is-selected' : '';\n    const thumbnail = (\n      <div className=\"MediaListRow-thumb\">\n        <img\n          className=\"MediaListRow-image\"\n          src={media.thumbnail}\n          alt=\"\"\n        />\n      </div>\n    );\n    return connectDragSource((\n      // See PlaylistManager/Panel/Row.js\n      // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n      <div\n        className={cx('MediaListRow', 'HistoryRow', className, selectedClass)}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n        onDoubleClick={this.handleDoubleClick}\n        onKeyPress={this.handleKeyPress}\n        onClick={onClick}\n      >\n        {thumbnail}\n        <SongTitle\n          className=\"HistoryRow-song\"\n          size=\"mediaRow\"\n          artist={media.artist}\n          title={media.title}\n        />\n        <div className=\"HistoryRow-votes\">\n          <HistoryVotes {...stats} />\n        </div>\n        <div className=\"HistoryRow-user\">\n          {user.username}\n        </div>\n        <div className=\"HistoryRow-time\" dateTime={timestamp}>\n          <TimeAgo timestamp={timestamp} />\n        </div>\n        {showActions && (\n          <Actions\n            className={cx('MediaListRow-actions', selectedClass)}\n            selection={selection}\n            media={media}\n            makeActions={makeActions}\n          />\n        )}\n      </div>\n    ));\n  }\n}\n\nexport default enhance(HistoryRow);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport withProps from 'recompose/withProps';\nimport Base from '../MediaList/BaseMediaList';\nimport AddToPlaylistAction from '../MediaList/Actions/AddToPlaylist';\nimport HistoryRow from './Row';\n\nconst addMediaActions = onOpenAddMediaMenu =>\n  (media, selection) => [\n    <AddToPlaylistAction\n      key=\"add\"\n      onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n    />,\n  ];\n\nconst noActions = () => [];\n\nconst HistoryList = withProps(props => ({\n  className: 'RoomHistory-list',\n  listComponent: 'div',\n  rowComponent: HistoryRow,\n  makeActions: props.onOpenAddMediaMenu\n    ? addMediaActions(props.onOpenAddMediaMenu)\n    : noActions,\n}))(Base);\n\nHistoryList.propTypes = {\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n};\n\nexport default HistoryList;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport OverlayHeader from '../Overlay/Header';\nimport OverlayContent from '../Overlay/Content';\nimport HistoryList from './HistoryList';\n\nconst enhance = translate();\n\nconst RoomHistory = ({\n  t,\n  className,\n  onCloseOverlay,\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog,\n  ...props\n}) => (\n  <div className={cx('RoomHistory', className)}>\n    <OverlayHeader\n      direction=\"top\"\n      className=\"AppRow AppRow--top\"\n      title={t('history.title')}\n      onCloseOverlay={onCloseOverlay}\n    />\n    <OverlayContent className=\"RoomHistory-body\">\n      <HistoryList\n        onOpenAddMediaMenu={onOpenAddMediaMenu}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        {...props}\n      />\n    </OverlayContent>\n  </div>\n);\n\nRoomHistory.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  onCloseOverlay: PropTypes.func.isRequired,\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default enhance(RoomHistory);\n"],"sourceRoot":""}