{"version":3,"sources":["webpack:///./components/TimeAgo/index.js","webpack:///./components/RoomHistory/Votes.js","webpack:///./components/RoomHistory/Row.js","webpack:///./components/RoomHistory/HistoryList.js","webpack:///./components/RoomHistory/index.js"],"names":["TimeAgo_TimeAgo","_ref","t","secondsAgo","Math","max","floor","currentTime","timestamp","msString","ms_default","long","_translateMs","str","_str$split","split","count","key","replace","parseInt","translateMs","jsx_default","time","defaultValue","propTypes","components_TimeAgo","compose_default","Object","es","timed","Votes_Votes","upvotes","downvotes","favorites","isUpvote","isDownvote","CurrentFavoriteIcon","isFavorite","Favorite_default","a","FavoriteBorder_default","className","ThumbUp_default","classnames_default","length","ThumbDown_default","RoomHistory_Votes","mediaSource","beginDrag","selection","media","some","item","_id","inSelection","enhance","lib","DDItemTypes","connect","connectDragSource","dragSource","connectDragPreview","dragPreview","Row_HistoryRow","state","showActions","handleMouseEnter","_this","setState","handleMouseLeave","handleDoubleClick","_this$props","props","onOpenPreviewMediaDialog","handleKeyPress","event","code","onClick","componentDidMount","this","react_dnd_html5_backend_lib","render","_this$props2","historyEntry","makeActions","user","stats","selectedClass","selected","thumbnail","src","alt","onMouseEnter","onMouseLeave","onDoubleClick","onKeyPress","SongTitle","size","artist","title","react_default","createElement","username","dateTime","Actions","Component","defaultProps","Row","noActions","HistoryList","withProps_default","onOpenAddMediaMenu","listComponent","rowComponent","Fragment","AddToPlaylist","onAdd","position","HistoryList_addMediaActions","BaseMediaList","prop_types_default","func","isRequired","RoomHistory_HistoryList","RoomHistory_enhance","RoomHistory_RoomHistory","onCloseOverlay","objectWithoutPropertiesLoose_default","Header","direction","Content","extends_default","__webpack_exports__"],"mappings":"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","file":"static/history_a2c8e63.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport compose from 'recompose/compose';\nimport ms from 'ms';\n\nimport timed from '../../utils/timed';\n\n// Bit weird to do it like this perhaps, convert to an english string first and\n// then translate afterwards.\nfunction translateMs(str) {\n  // `ms` output of the form \"3 hours\"\n  const [count, key] = str.split(' ');\n  return {\n    key: `${key.replace(/s$/, '')}s`,\n    count: parseInt(count, 10),\n  };\n}\n\nconst TimeAgo = ({ t, currentTime, timestamp }) => {\n  const secondsAgo = Math.max(0, Math.floor((currentTime - timestamp) / 1000));\n  const msString = ms(secondsAgo * 1000, { long: true });\n  const { key, count } = translateMs(msString);\n  return (\n    <span>\n      {t('timeAgo.format', {\n        time: t(`timeAgo.${key}`, {\n          count,\n          defaultValue: msString,\n        }),\n      })}\n    </span>\n  );\n};\n\nTimeAgo.propTypes = {\n  t: PropTypes.func.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  timestamp: PropTypes.number.isRequired,\n};\n\nexport default compose(\n  translate(),\n  timed(),\n)(TimeAgo);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport DownvoteIcon from '@material-ui/icons/ThumbDown';\nimport UpvoteIcon from '@material-ui/icons/ThumbUp';\nimport FavoritedIcon from '@material-ui/icons/Favorite';\nimport FavoriteIcon from '@material-ui/icons/FavoriteBorder';\n\nconst Votes = ({\n  upvotes, downvotes, favorites, isUpvote, isDownvote, isFavorite,\n}) => {\n  const CurrentFavoriteIcon = isFavorite ? FavoritedIcon : FavoriteIcon;\n  return (\n    <div className=\"HistoryVotes AudienceResponse\">\n      <div className=\"ResponseButton ResponseButton--static\">\n        <div className=\"ResponseButton-content\">\n          <UpvoteIcon className={cx('HistoryVotes-icon', isUpvote && 'ResponseButton-icon--upvoted')} />\n          <span className=\"ResponseButton-count\">{upvotes.length}</span>\n        </div>\n      </div>\n      <div className=\"ResponseButton ResponseButton--static\">\n        <div className=\"ResponseButton-content\">\n          <CurrentFavoriteIcon className=\"HistoryVotes-icon ResponseButton-icon--favorite\" />\n          <span className=\"ResponseButton-count\">{favorites.length}</span>\n        </div>\n      </div>\n      <div className=\"ResponseButton ResponseButton--static\">\n        <div className=\"ResponseButton-content\">\n          <DownvoteIcon className={cx('HistoryVotes-icon', isDownvote && 'ResponseButton-icon--downvoted')} />\n          <span className=\"ResponseButton-count\">{downvotes.length}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nVotes.propTypes = {\n  upvotes: PropTypes.array.isRequired,\n  favorites: PropTypes.array.isRequired,\n  downvotes: PropTypes.array.isRequired,\n  isUpvote: PropTypes.bool.isRequired,\n  isFavorite: PropTypes.bool.isRequired,\n  isDownvote: PropTypes.bool.isRequired,\n};\n\nexport default Votes;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { MEDIA } from '../../constants/DDItemTypes';\n\nimport Actions from '../MediaList/Actions';\nimport SongTitle from '../SongTitle';\nimport TimeAgo from '../TimeAgo';\n\nimport HistoryVotes from './Votes';\n\nconst inSelection = (selection, media) => selection.some(item => item._id === media._id);\n\nconst mediaSource = {\n  beginDrag({ selection, media }) {\n    return {\n      media: inSelection(selection, media.media) ? selection : [media.media],\n    };\n  },\n};\n\nconst collect = connect => ({\n  connectDragSource: connect.dragSource(),\n  connectDragPreview: connect.dragPreview(),\n});\n\nconst enhance = DragSource(MEDIA, mediaSource, collect);\n\nclass HistoryRow extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    connectDragSource: PropTypes.func.isRequired,\n    connectDragPreview: PropTypes.func.isRequired,\n    media: PropTypes.object,\n    selected: PropTypes.bool,\n    selection: PropTypes.array,\n\n    onOpenPreviewMediaDialog: PropTypes.func,\n    onClick: PropTypes.func,\n    makeActions: PropTypes.func,\n  };\n\n  static defaultProps = {\n    selected: false,\n  };\n\n  state = { showActions: false };\n\n  componentDidMount() {\n    const { connectDragPreview } = this.props;\n\n    connectDragPreview(getEmptyImage());\n  }\n\n  handleMouseEnter = () => {\n    this.setState({ showActions: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ showActions: false });\n  };\n\n  handleDoubleClick = () => {\n    const { onOpenPreviewMediaDialog, media } = this.props;\n\n    onOpenPreviewMediaDialog(media.media);\n  };\n\n  handleKeyPress = (event) => {\n    const { onClick } = this.props;\n\n    if (event.code === 'Space') {\n      onClick();\n    }\n  };\n\n  render() {\n    const {\n      media: historyEntry,\n      className,\n      selection,\n      selected,\n      connectDragSource,\n      // actions\n      makeActions,\n      // etc\n      onClick,\n    } = this.props;\n    const { showActions } = this.state;\n\n    const {\n      media, timestamp, user, stats,\n    } = historyEntry;\n\n    const selectedClass = selected ? 'is-selected' : '';\n    const thumbnail = (\n      <div className=\"MediaListRow-thumb\">\n        <img\n          className=\"MediaListRow-image\"\n          src={media.thumbnail}\n          alt=\"\"\n        />\n      </div>\n    );\n    return connectDragSource((\n      // See PlaylistManager/Panel/Row.js\n      // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n      <div\n        className={cx('MediaListRow', 'HistoryRow', className, selectedClass)}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n        onDoubleClick={this.handleDoubleClick}\n        onKeyPress={this.handleKeyPress}\n        onClick={onClick}\n      >\n        {thumbnail}\n        <SongTitle\n          className=\"HistoryRow-song\"\n          size=\"mediaRow\"\n          artist={media.artist}\n          title={media.title}\n        />\n        <div className=\"HistoryRow-votes\">\n          <HistoryVotes {...stats} />\n        </div>\n        <div className=\"HistoryRow-user\">\n          {user.username}\n        </div>\n        <div className=\"HistoryRow-time\" dateTime={timestamp}>\n          <TimeAgo timestamp={timestamp} />\n        </div>\n        {showActions && (\n          <Actions\n            className={cx('MediaListRow-actions', selectedClass)}\n            selection={selection}\n            media={media}\n            makeActions={makeActions}\n          />\n        )}\n      </div>\n    ));\n  }\n}\n\nexport default enhance(HistoryRow);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport withProps from 'recompose/withProps';\nimport Base from '../MediaList/BaseMediaList';\nimport AddToPlaylistAction from '../MediaList/Actions/AddToPlaylist';\nimport HistoryRow from './Row';\n\nconst addMediaActions = onOpenAddMediaMenu => (media, selection) => (\n  <React.Fragment>\n    <AddToPlaylistAction onAdd={position => onOpenAddMediaMenu(position, media, selection)} />\n  </React.Fragment>\n);\n\nconst noActions = () => [];\n\nconst HistoryList = withProps(({ onOpenAddMediaMenu }) => ({\n  className: 'RoomHistory-list',\n  listComponent: 'div',\n  rowComponent: HistoryRow,\n  makeActions: onOpenAddMediaMenu\n    ? addMediaActions(onOpenAddMediaMenu)\n    : noActions,\n}))(Base);\n\nHistoryList.propTypes = {\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n};\n\nexport default HistoryList;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport OverlayHeader from '../Overlay/Header';\nimport OverlayContent from '../Overlay/Content';\nimport HistoryList from './HistoryList';\n\nconst enhance = translate();\n\nconst RoomHistory = ({\n  t,\n  className,\n  onCloseOverlay,\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog,\n  ...props\n}) => (\n  <div className={cx('RoomHistory', className)}>\n    <OverlayHeader\n      direction=\"top\"\n      className=\"AppRow AppRow--top\"\n      title={t('history.title')}\n      onCloseOverlay={onCloseOverlay}\n    />\n    <OverlayContent className=\"RoomHistory-body\">\n      <HistoryList\n        onOpenAddMediaMenu={onOpenAddMediaMenu}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        {...props}\n      />\n    </OverlayContent>\n  </div>\n);\n\nRoomHistory.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  onCloseOverlay: PropTypes.func.isRequired,\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default enhance(RoomHistory);\n"],"sourceRoot":""}