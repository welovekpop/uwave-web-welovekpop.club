{"version":3,"sources":["webpack:///./components/Dialogs/ConfirmDialog/index.js","webpack:///../node_modules/@material-ui/icons/es/ModeEdit.js","webpack:///./actions/ImportActionCreators.js","webpack:///./actions/SearchActionCreators.js","webpack:///./components/PlaylistManager/Menu/Row.js","webpack:///./components/PlaylistManager/Menu/NewPlaylist.js","webpack:///../node_modules/@material-ui/icons/es/Search.js","webpack:///./components/PlaylistManager/Menu/SearchResultsRow.js","webpack:///../node_modules/@material-ui/icons/es/Input.js","webpack:///./components/PlaylistManager/Menu/PlaylistImportRow.js","webpack:///./components/PlaylistManager/Menu/index.js","webpack:///./containers/PlaylistManagerMenu.js","webpack:///../node_modules/@material-ui/icons/es/CheckBox.js","webpack:///../node_modules/@material-ui/icons/es/CheckBoxOutlineBlank.js","webpack:///./components/PlaylistManager/Panel/RenamePlaylistButton.js","webpack:///../node_modules/@material-ui/icons/es/Delete.js","webpack:///./components/PlaylistManager/Panel/DeletePlaylistButton.js","webpack:///../node_modules/@material-ui/icons/es/Shuffle.js","webpack:///./components/PlaylistManager/Panel/ShufflePlaylistButton.js","webpack:///./components/PlaylistManager/Panel/PlaylistFilter.js","webpack:///./components/PlaylistManager/Panel/Meta.js","webpack:///./components/PlaylistManager/Panel/PlaylistItemRow.js","webpack:///./components/MediaList/Actions/RemoveFromPlaylist.js","webpack:///./components/MediaList/Actions/EditMedia.js","webpack:///./components/MediaList/Actions/MoveToFirst.js","webpack:///./components/MediaList/Actions/MoveToLast.js","webpack:///./components/PlaylistManager/Panel/index.js","webpack:///./containers/PlaylistManagerPanel.js","webpack:///./components/PlaylistManager/Import/index.js","webpack:///./containers/PlaylistImportManager.js","webpack:///./components/PlaylistManager/SearchResults/NoSearchResults.js","webpack:///./components/PlaylistManager/SearchResults/LoadingSearchResults.js","webpack:///./components/PlaylistManager/SearchResults/SearchResultsList.js","webpack:///./components/PlaylistManager/SearchResults/index.js","webpack:///./containers/SearchResultsPanel.js","webpack:///./components/SearchBar/index.js","webpack:///./components/PlaylistManager/Header/SourcePickerElement.js","webpack:///./components/PlaylistManager/Header/SourcePicker.js","webpack:///./components/PlaylistManager/Header/SearchBar.js","webpack:///./containers/MediaSearchBar.js","webpack:///./components/PlaylistManager/Header/index.js","webpack:///./components/PlaylistManager/Panel/Empty.js","webpack:///./components/PlaylistManager/index.js"],"names":["_babel_runtime_helpers_builtin_jsx__WEBPACK_IMPORTED_MODULE_0___default","className","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_8__","size","ConfirmDialog","state","busy","handleSubmit","event","preventDefault","handleConfirm","promise","_this","props","onConfirm","then","setState","onDone","handleClose","onCancel","render","_this$props","this","children","cancelLabel","confirmLabel","_material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_6__","classnames__WEBPACK_IMPORTED_MODULE_3___default","onClose","open","_material_ui_core_DialogContent__WEBPACK_IMPORTED_MODULE_7__","_Form__WEBPACK_IMPORTED_MODULE_9__","onSubmit","_Form_Group__WEBPACK_IMPORTED_MODULE_10__","_Form_Button__WEBPACK_IMPORTED_MODULE_11__","disabled","onClick","_ref","react__WEBPACK_IMPORTED_MODULE_4___default","a","Component","defaultProps","propTypes","__webpack_exports__","Object","_utils_createSvgIcon__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_0___default","createElement","d","ImportActionCreators_showImportPanel","type","ActionTypes","showImportSourcePanel","sourceType","payload","hideImportSourcePanel","SearchActionCreators_showSearchResults","deleteSearch","enhance","lib","DDItemTypes","drop","monitor","onAddToPlaylist","playlist","getItem","media","connect","connectDropTarget","dropTarget","isOver","itemClasses","root","selected","jsx_default","CircularProgress","Check","Row_PlaylistRow","icon","activeClass","active","droppableClass","creating","Row_ref2","MenuItem","classnames_default","classes","name","react_default","Row","NewPlaylist_enhance","dist_es","Add","nativeColor","NewPlaylist_NewPlaylist","handleOpen","closeDialog","playlistName","Promise","resolve","onCreatePlaylist","bind","assertThisInitialized_default","t","Fragment","NewPlaylist_ref","PromptDialog","title","NewPlaylist_ref2","submitLabel","Menu_NewPlaylist","Search","createSvgIcon","Close","SearchResultsRow_SearchResultsRow","query","ListItem","role","SearchResultsRow_ref2","IconButton","SearchResultsRow_ref3","Menu_SearchResultsRow","Input","PlaylistImportRow_enhance","PlaylistImportRow_PlaylistImportRow","importing","PlaylistImportRow_ref2","PlaylistImportRow_ref3","Menu_PlaylistImportRow","Menu_PlaylistMenu","playlists","searchQuery","showSearchResults","searchResults","onSelectPlaylist","onSelectSearchResults","onCloseSearchResults","showImportPanel","onShowImportPanel","searchIsSelected","importIsSelected","isSelectingPlaylist","MenuList","disablePadding","map","pl","_id","Menu","mapStateToProps","reselect_es","playlistSelectors","searchSelectors","importSelectors","PlaylistManagerMenu","es","dispatch","redux","PlaylistActionCreators","CheckBox","CheckBoxOutlineBlank","RenamePlaylistButton_enhance","ModeEdit","RenamePlaylistButton_RenamePlaylistButton","renaming","onRename","Tooltip","placement","RenamePlaylistButton_ref","RenamePlaylistButton_ref2","value","initialName","Panel_RenamePlaylistButton","Delete","DeletePlaylistButton_enhance","DeletePlaylistButton_DeletePlaylistButton","deleting","onNotDeletable","onDelete","DeletePlaylistButton_ref","Group","Panel_DeletePlaylistButton","Shuffle","ShufflePlaylistButton_enhance","compose_default","withState_default","withHandlers_default","setLoading","onShuffle","ShufflePlaylistButton_ShuffleButton","isLoading","ShufflePlaylistButton_ref2","ShufflePlaylistButton_ref3","ShufflePlaylistButton","PlaylistFilter_enhance","PlaylistFilter_PlaylistFilter","onFilter","debounce_default","handleClick","isOpen","clearFilter","input","focus","handleChange","target","refInput","ref","onChange","Panel_PlaylistFilter","Meta_enhance","ID","Meta_PlaylistMeta","onShufflePlaylist","onActivatePlaylist","onRenamePlaylist","onDeletePlaylist","htmlFor","Checkbox","id","checked","Meta_ref2","checkedIcon","Meta_ref3","Meta","mediaTarget","component","thisID","some","playlistItem","insertBefore","isDraggingNearTopOfRow","onMoveMedia","before","after","hover","insertingAbove","PlaylistItemRow_PlaylistItemRow","objectWithoutProperties_default","dropIndicator","PlaylistItemRow_ref","MediaList_Row","Panel_PlaylistItemRow","RemoveFromPlaylist_RemoveFromPlaylist","onRemove","Action","extends_default","onAction","RemoveFromPlaylist_ref2","Actions_RemoveFromPlaylist","EditMedia_EditMedia","onEdit","EditMedia_ref2","Actions_EditMedia","KeyboardArrowUp","MoveToFirst_MoveToFirst","onFirst","MoveToFirst_ref2","Actions_MoveToFirst","KeyboardArrowDown","MoveToLast_MoveToLast","onLast","MoveToLast_ref2","Actions_MoveToLast","Panel_PlaylistPanel","list","isFiltered","onLoadPlaylistPage","onFilterPlaylistItems","onOpenPreviewMediaDialog","loading","Panel_ref2","MediaList","length","rowComponent","rowProps","makeActions","onOpenAddMediaMenu","onMoveToFirst","onMoveToLast","onEditMedia","onRemoveFromPlaylist","selection","index","AddToPlaylist","onAdd","position","Panel_makeActions","onRequestPage","PlaylistManager_Panel","PlaylistManagerPanel_mapStateToProps","selectionOrOne","isSelected","get","PlaylistManagerPanel_onOpenAddMediaMenu","PlaylistManagerPanel","_ref2","DialogActionCreators","at","PlaylistManagerPanel_onMoveToLast","opts","PlaylistManagerPanel_onMoveMedia","PlaylistManagerPanel_onEditMedia","PlaylistManagerPanel_onRemoveFromPlaylist","page","PlaylistManagerPanel_onLoadPlaylistPage","Import_PlaylistImport","getAllMediaSources","selectedSourceType","sourceStates","onHideImportPanel","Panel","getMediaSource","ImportPanel","onClosePanel","forms","sources","keys","forEach","ImportForm","push","Import","injectMediaSources","PlaylistImportManager_mapStateToProps","PlaylistImportManager","NoSearchResults_enhance","NoSearchResults_NoResults","NoSearchResults_ref2","Typography","NoSearchResults","SearchResults_LoadingSearchResults","LoadingSearchResults_ref","SearchResultsList_SearchResultsList","results","SearchResultsList_makeActions","SearchResults_SearchResultsList","SearchResults_enhance","SearchResults_SearchResultsPanel","loadingState","LoadingStates","SearchResults_ref2","SearchResults_ref3","SearchResults","SearchResultsPanel_mapStateToProps","SearchResultsPanel_onOpenAddMediaMenu","SearchResultsPanel_selectionOrOne","containers_SearchResultsPanel","SearchBar_enhance","SearchBar_SearchBar","focused","handleFocus","handleBlur","handleKeyDown","e","key","SearchBar_ref","placeholder","onFocus","onBlur","onKeyDown","components_SearchBar","SourcePickerElement_SourcePickerElement","source","style","backgroundImage","logo","Header_SourcePickerElement","SourcePicker_enhance","popoverPosition","anchorOrigin","vertical","horizontal","transformOrigin","ArrowDropDown","SourcePicker_SourcePicker","anchor","container","refContainer","sourceName","_this2","_this3","_this$props2","filter","SourcePicker_ref","Popover","paper","anchorEl","Header_SourcePicker","Header_SearchBar_SearchBar","onSourceChange","Header_SearchBar","MediaSearchBar_mapStateToProps","MediaSearchBar_mapDispatchToProps","RequestActionCreators","qs","onStart","searchStart","onComplete","onError","error","MediaSearchBar","Header_enhance","Header_PlaylistManagerHeader","onCloseOverlay","Header","Header_ref2","PlaylistManager_Header","Empty_EmptyPanel","Empty","PlaylistManager_PlaylistManager","panel","selectedPlaylist","PlaylistManager_ref2","PlaylistManager_ref3","Content","_ref5"],"mappings":"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","file":"playlists_2808521.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Form from '../../Form';\nimport FormGroup from '../../Form/Group';\nimport Button from '../../Form/Button';\n\nexport default class ConfirmDialog extends React.Component {\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    confirmLabel: PropTypes.string,\n    cancelLabel: PropTypes.string,\n\n    onConfirm: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    cancelLabel: 'Cancel',\n    confirmLabel: 'OK',\n  };\n\n  state = {\n    busy: false,\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n  };\n\n  handleConfirm = (event) => {\n    event.preventDefault();\n    const promise = this.props.onConfirm();\n    if (promise && promise.then) {\n      this.setState({ busy: true });\n      const onDone = () => {\n        this.setState({ busy: false });\n      };\n      promise.then(onDone, onDone);\n    }\n  };\n\n  handleClose = (event) => {\n    if (event && event.preventDefault) {\n      event.preventDefault();\n    }\n    this.props.onCancel();\n  };\n\n  render() {\n    const {\n      children,\n      cancelLabel,\n      confirmLabel,\n      className,\n    } = this.props;\n    const { busy } = this.state;\n\n    return (\n      <Dialog\n        className={cx('Dialog', className)}\n        onClose={this.handleClose}\n        open\n      >\n        <DialogContent className=\"Dialog-body\">\n          <Form onSubmit={this.handleSubmit}>\n            {children}\n            <FormGroup className=\"ConfirmDialog-buttons FormGroup--noSpacing\">\n              <div className=\"ConfirmDialog-button\">\n                <Button disabled={busy} onClick={this.handleClose}>\n                  {cancelLabel}\n                </Button>\n              </div>\n              <div className=\"ConfirmDialog-spacer\" />\n              <div className=\"ConfirmDialog-button\">\n                <Button disabled={busy} onClick={this.handleConfirm}>\n                  {busy ? <div className=\"Button-loading\"><CircularProgress size=\"100%\" /></div> : confirmLabel}\n                </Button>\n              </div>\n            </FormGroup>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n}\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n})), 'ModeEdit');","import {\n  SHOW_IMPORT_PANEL,\n  HIDE_IMPORT_PANEL,\n  SHOW_IMPORT_SOURCE_PANEL,\n  HIDE_IMPORT_SOURCE_PANEL,\n} from '../constants/ActionTypes';\n\nexport function showImportPanel() {\n  return {\n    type: SHOW_IMPORT_PANEL,\n  };\n}\n\nexport function hideImportPanel() {\n  return {\n    type: HIDE_IMPORT_PANEL,\n  };\n}\n\nexport function showImportSourcePanel(sourceType) {\n  return {\n    type: SHOW_IMPORT_SOURCE_PANEL,\n    payload: { sourceType },\n  };\n}\n\nexport function hideImportSourcePanel() {\n  return { type: HIDE_IMPORT_SOURCE_PANEL };\n}\n","import { get } from './RequestActionCreators';\nimport {\n  SET_SEARCH_SOURCE,\n  SHOW_SEARCH_RESULTS,\n  SEARCH_START,\n  SEARCH_COMPLETE,\n  SEARCH_DELETE,\n} from '../constants/ActionTypes';\n\nexport function setSource(source) {\n  return {\n    type: SET_SEARCH_SOURCE,\n    payload: { source },\n  };\n}\n\nexport function showSearchResults() {\n  return { type: SHOW_SEARCH_RESULTS };\n}\n\nfunction searchStart(query) {\n  return {\n    type: SEARCH_START,\n    payload: { query },\n  };\n}\n\nexport function search(query) {\n  return get('/search', {\n    qs: { query },\n    onStart: () => (dispatch) => {\n      dispatch(searchStart(query));\n      dispatch(showSearchResults());\n    },\n    onComplete: results => ({\n      type: SEARCH_COMPLETE,\n      payload: { results },\n    }),\n    onError: error => ({\n      type: SEARCH_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n\nexport function deleteSearch() {\n  return {\n    type: SEARCH_DELETE,\n  };\n}\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropTarget } from 'react-dnd';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ActiveIcon from '@material-ui/icons/Check';\nimport { MEDIA } from '../../../constants/DDItemTypes';\n\nconst playlistTarget = {\n  drop({ playlist, onAddToPlaylist }, monitor) {\n    const { media } = monitor.getItem();\n    onAddToPlaylist(playlist, media);\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n});\n\nconst enhance = DropTarget(MEDIA, playlistTarget, collect);\n\nconst itemClasses = {\n  root: 'PlaylistMenuRow',\n  selected: 'is-selected',\n};\n\nclass PlaylistRow extends React.Component {\n  static propTypes = {\n    playlist: PropTypes.object,\n    selected: PropTypes.bool,\n    isOver: PropTypes.bool.isRequired,\n\n    connectDropTarget: PropTypes.func.isRequired,\n    onClick: PropTypes.func,\n    // Used in the drop handler above 👆\n    // eslint-disable-next-line react/no-unused-prop-types\n    onAddToPlaylist: PropTypes.func,\n  };\n\n  render() {\n    const {\n      playlist,\n      selected,\n\n      onClick,\n\n      connectDropTarget,\n      isOver,\n    } = this.props;\n    const activeClass = playlist.active && 'is-active';\n    const droppableClass = isOver && 'is-droppable';\n\n    let icon;\n    if (playlist.creating) {\n      icon = (\n        <div className=\"PlaylistMenuRow-loading\">\n          <CircularProgress size=\"100%\" />\n        </div>\n      );\n    } else if (playlist.active) {\n      icon = (\n        <div className=\"PlaylistMenuRow-active-icon\">\n          <ActiveIcon />\n        </div>\n      );\n    }\n\n    return connectDropTarget((\n      <div>\n        <MenuItem\n          selected={selected}\n          className={cx(activeClass, droppableClass)}\n          classes={itemClasses}\n          onClick={onClick}\n        >\n          <div className=\"PlaylistMenuRow-title\">\n            {icon}\n            {playlist.name}\n          </div>\n          <div className=\"PlaylistMenuRow-count\">{playlist.size}</div>\n        </MenuItem>\n      </div>\n    ));\n  }\n}\n\nexport default enhance(PlaylistRow);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CreatePlaylistIcon from '@material-ui/icons/Add';\n\nimport PromptDialog from '../../Dialogs/PromptDialog';\n\nconst enhance = translate();\n\nclass NewPlaylist extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    t: PropTypes.func.isRequired,\n    onCreatePlaylist: PropTypes.func.isRequired,\n  };\n\n  state = {\n    creating: false,\n  };\n\n  closeDialog() {\n    this.setState({ creating: false });\n  }\n\n  handleOpen = () => {\n    this.setState({ creating: true });\n  };\n\n  handleClose = () => {\n    this.closeDialog();\n  };\n\n  handleSubmit = playlistName =>\n    Promise.resolve(this.props.onCreatePlaylist(playlistName))\n      .then(this.closeDialog.bind(this));\n\n  render() {\n    const { t, className } = this.props;\n    return (\n      <React.Fragment>\n        <MenuItem\n          className={cx('PlaylistMenuRow', 'PlaylistMenuRow--create', className)}\n          onClick={this.handleOpen}\n        >\n          <div className=\"PlaylistMenuRow-title\">\n            <div className=\"PlaylistMenuRow-active-icon\">\n              <CreatePlaylistIcon />\n            </div>\n            {t('playlists.new')}\n          </div>\n        </MenuItem>\n        {this.state.creating && (\n          <PromptDialog\n            title={t('dialogs.createPlaylist.nameInputTitle')}\n            icon={<CreatePlaylistIcon nativeColor=\"#777\" />}\n            submitLabel={t('dialogs.createPlaylist.action')}\n            onSubmit={this.handleSubmit}\n            onCancel={this.handleClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default enhance(NewPlaylist);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"\n})), 'Search');","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItem from '@material-ui/core/ListItem';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst SearchResultsRow = ({\n  className,\n  query,\n  onClick,\n  onClose,\n}) => (\n  <ListItem role=\"menuitem\" className={cx('PlaylistMenuRow', 'PlaylistMenuRow--search', className)}>\n    <button\n      className=\"PlaylistMenuRow-title\"\n      onClick={onClick}\n    >\n      <div className=\"PlaylistMenuRow-active-icon\">\n        <SearchIcon />\n      </div>\n      &quot;{query}&quot;\n    </button>\n    <div className=\"PlaylistMenuRow-count\">\n      <IconButton className=\"PlaylistMenuRow-closeButton\" onClick={onClose}>\n        <CloseIcon nativeColor=\"#777\" />\n      </IconButton>\n    </div>\n  </ListItem>\n);\n\nSearchResultsRow.propTypes = {\n  className: PropTypes.string,\n  query: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default SearchResultsRow;\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M21 3.01H3c-1.1 0-2 .9-2 2V9h2V4.99h18v14.03H3V15H1v4.01c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98v-14c0-1.11-.9-2-2-2zM11 16l4-4-4-4v3H1v2h10v3z\"\n})), 'Input');","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ImportIcon from '@material-ui/icons/Input';\n\nconst enhance = translate();\n\nconst PlaylistImportRow = ({\n  t,\n  className,\n  importing,\n  onClick,\n}) => {\n  let icon;\n  if (importing) {\n    icon = (\n      <div className=\"PlaylistMenuRow-loading\">\n        <CircularProgress size=\"100%\" />\n      </div>\n    );\n  } else {\n    icon = (\n      <div className=\"PlaylistMenuRow-active-icon\">\n        <ImportIcon />\n      </div>\n    );\n  }\n  return (\n    <MenuItem\n      className={cx('PlaylistMenuRow', 'PlaylistMenuRow--import', className)}\n      onClick={onClick}\n    >\n      <div className=\"PlaylistMenuRow-title\">\n        {icon}\n        {t('playlists.import.title')}\n      </div>\n    </MenuItem>\n  );\n};\n\nPlaylistImportRow.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  importing: PropTypes.bool,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default enhance(PlaylistImportRow);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuList from '@material-ui/core/MenuList';\nimport PlaylistRow from './Row';\nimport PlaylistCreateRow from './NewPlaylist';\nimport SearchResultsRow from './SearchResultsRow';\nimport PlaylistImportRow from './PlaylistImportRow';\n\nconst PlaylistMenu = ({\n  className,\n  playlists,\n  selected,\n  searchQuery,\n  showSearchResults,\n  searchResults,\n  onCreatePlaylist,\n  onSelectPlaylist,\n  onSelectSearchResults,\n  onCloseSearchResults,\n  onAddToPlaylist,\n  showImportPanel,\n  onShowImportPanel,\n}) => {\n  const searchIsSelected = showSearchResults ? 'is-selected' : '';\n  const importIsSelected = showImportPanel ? 'is-selected' : '';\n  const isSelectingPlaylist = selected && !showSearchResults && !showImportPanel;\n  return (\n    <MenuList className={cx('PlaylistMenu', className)} disablePadding>\n      <PlaylistCreateRow\n        className=\"PlaylistMenu-row\"\n        onCreatePlaylist={onCreatePlaylist}\n      />\n      {searchQuery && (\n        <SearchResultsRow\n          className={cx('PlaylistMenu-row', searchIsSelected)}\n          query={searchQuery}\n          size={searchResults}\n          onClick={onSelectSearchResults}\n          onClose={onCloseSearchResults}\n        />\n      )}\n      {playlists.map(pl => (\n        <PlaylistRow\n          key={pl._id}\n          className=\"PlaylistMenu-row\"\n          playlist={pl}\n          selected={isSelectingPlaylist && selected._id === pl._id}\n          onClick={() => onSelectPlaylist(pl._id)}\n          onAddToPlaylist={onAddToPlaylist}\n        />\n      ))}\n      <PlaylistImportRow\n        className={cx('PlaylistMenu-row', importIsSelected)}\n        onClick={onShowImportPanel}\n      />\n    </MenuList>\n  );\n};\n\nPlaylistMenu.propTypes = {\n  className: PropTypes.string,\n  playlists: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selected: PropTypes.object,\n  showSearchResults: PropTypes.bool.isRequired,\n  showImportPanel: PropTypes.bool.isRequired,\n  searchQuery: PropTypes.string,\n  searchResults: PropTypes.number,\n  onCreatePlaylist: PropTypes.func.isRequired,\n  onSelectPlaylist: PropTypes.func.isRequired,\n  onSelectSearchResults: PropTypes.func.isRequired,\n  onCloseSearchResults: PropTypes.func.isRequired,\n  onAddToPlaylist: PropTypes.func.isRequired,\n  onShowImportPanel: PropTypes.func.isRequired,\n};\n\nexport default PlaylistMenu;\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport {\n  addMedia as addToPlaylist,\n  createPlaylist,\n  selectPlaylist,\n} from '../actions/PlaylistActionCreators';\nimport { showImportPanel } from '../actions/ImportActionCreators';\nimport {\n  showSearchResults,\n  deleteSearch,\n} from '../actions/SearchActionCreators';\n\nimport {\n  playlistsSelector,\n  selectedPlaylistSelector,\n} from '../selectors/playlistSelectors';\nimport {\n  searchQuerySelector,\n  showSearchResultsSelector,\n  searchResultsCountSelector,\n} from '../selectors/searchSelectors';\nimport { showImportPanelSelector } from '../selectors/importSelectors';\nimport PlaylistsMenu from '../components/PlaylistManager/Menu';\n\nconst mapStateToProps = createStructuredSelector({\n  playlists: playlistsSelector,\n  selected: selectedPlaylistSelector,\n  searchQuery: searchQuerySelector,\n  showSearchResults: showSearchResultsSelector,\n  searchResults: searchResultsCountSelector,\n  showImportPanel: showImportPanelSelector,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onAddToPlaylist: addToPlaylist,\n  onCreatePlaylist: createPlaylist,\n  onSelectPlaylist: selectPlaylist,\n  onSelectSearchResults: showSearchResults,\n  onCloseSearchResults: deleteSearch,\n  onShowImportPanel: showImportPanel,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistsMenu);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n})), 'CheckBox');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n})), 'CheckBoxOutlineBlank');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/ModeEdit';\nimport PromptDialog from '../../Dialogs/PromptDialog';\n\nconst enhance = translate();\n\nclass RenamePlaylistButton extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    onRename: PropTypes.func.isRequired,\n    initialName: PropTypes.string,\n  };\n\n  state = {\n    renaming: false,\n  };\n\n  closeDialog() {\n    this.setState({ renaming: false });\n  }\n\n  handleOpen = () => {\n    this.setState({ renaming: true });\n  };\n\n  handleClose = () => {\n    this.closeDialog();\n  };\n\n  handleSubmit = name =>\n    this.props.onRename(name)\n      .then(this.closeDialog.bind(this));\n\n  render() {\n    const { t } = this.props;\n    return (\n      <React.Fragment>\n        <Tooltip title={t('playlists.rename')} placement=\"top\">\n          <IconButton className=\"PlaylistMeta-iconButton\" onClick={this.handleOpen}>\n            <EditIcon />\n          </IconButton>\n        </Tooltip>\n        {this.state.renaming && (\n          <PromptDialog\n            title={t('dialogs.renamePlaylist.nameInputTitle')}\n            submitLabel={t('dialogs.renamePlaylist.action')}\n            icon={<EditIcon nativeColor=\"#777\" />}\n            value={this.props.initialName}\n            onSubmit={this.handleSubmit}\n            onCancel={this.handleClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default enhance(RenamePlaylistButton);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n})), 'Delete');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport ConfirmDialog from '../../Dialogs/ConfirmDialog';\nimport FormGroup from '../../Form/Group';\n\nconst enhance = translate();\n\nclass DeletePlaylistButton extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onNotDeletable: PropTypes.func.isRequired,\n    active: PropTypes.bool,\n  };\n\n  state = {\n    deleting: false,\n  };\n\n  closeDialog() {\n    this.setState({ deleting: false });\n  }\n\n  handleOpen = () => {\n    if (this.props.active) {\n      this.props.onNotDeletable();\n    } else {\n      this.setState({ deleting: true });\n    }\n  };\n\n  handleClose = () => {\n    this.closeDialog();\n  };\n\n  handleConfirm = name =>\n    this.props.onDelete(name)\n      .then(this.closeDialog.bind(this));\n\n  render() {\n    const { t, active } = this.props;\n    return (\n      <React.Fragment>\n        <Tooltip title={active ? t('playlists.deleteActive') : t('playlists.delete')} placement=\"top\">\n          <IconButton\n            disabled={active}\n            className=\"PlaylistMeta-iconButton\"\n            onClick={this.handleOpen}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n        {this.state.deleting && (\n          <ConfirmDialog\n            title={t('dialogs.deletePlaylist.title')}\n            confirmLabel={t('dialogs.deletePlaylist.action')}\n            onConfirm={this.handleConfirm}\n            onCancel={this.handleClose}\n          >\n            <FormGroup>{t('dialogs.deletePlaylist.confirm')}</FormGroup>\n          </ConfirmDialog>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default enhance(DeletePlaylistButton);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"g\", null, React.createElement(\"path\", {\n  d: \"M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z\"\n})), 'Shuffle');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport compose from 'recompose/compose';\nimport withState from 'recompose/withState';\nimport withHandlers from 'recompose/withHandlers';\nimport { translate } from 'react-i18next';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\n\nconst enhance = compose(\n  withState('isLoading', 'setLoading', false),\n  withHandlers({\n    onClick: props => () => {\n      props.setLoading(true);\n      props.onShuffle().then(() => {\n        props.setLoading(false);\n      }, () => {\n        props.setLoading(false);\n      });\n    },\n  }),\n  translate(),\n);\n\nconst ShuffleButton = ({\n  t,\n  isLoading,\n  onClick,\n}) => (\n  <Tooltip title={t('playlists.shuffle')} placement=\"top\">\n    <IconButton\n      className=\"PlaylistMeta-iconButton\"\n      onClick={onClick}\n    >\n      {isLoading ? (\n        <CircularProgress size=\"100%\" />\n      ) : (\n        <ShuffleIcon />\n      )}\n    </IconButton>\n  </Tooltip>\n);\n\nShuffleButton.propTypes = {\n  t: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  onShuffle: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types\n};\n\nexport default enhance(ShuffleButton);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport debounce from 'lodash/debounce';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport FilterIcon from '@material-ui/icons/Search';\n\nconst enhance = translate();\n\nclass PlaylistFilter extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n  };\n\n  state = {\n    open: false,\n    value: '',\n  };\n\n  onFilter = debounce((value) => {\n    this.props.onFilter(value);\n  }, 200);\n\n  clearFilter() {\n    if (this.state.value !== '') {\n      this.props.onFilter('');\n    }\n  }\n\n  handleClick = () => {\n    const isOpen = !this.state.open;\n\n    if (!isOpen) {\n      this.clearFilter();\n    }\n\n    this.setState({\n      open: isOpen,\n      value: '',\n    }, () => {\n      if (isOpen) {\n        this.input.focus();\n      }\n    });\n  };\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n    this.onFilter(event.target.value);\n  };\n\n  refInput = (input) => {\n    this.input = input;\n  };\n\n  render() {\n    const { t } = this.props;\n    const isOpen = this.state.open;\n    return (\n      <div className=\"PlaylistMediaFilter\">\n        <Tooltip title={t('playlists.filter')} placement=\"top\">\n          <IconButton\n            className=\"PlaylistMeta-iconButton\"\n            onClick={this.handleClick}\n          >\n            <FilterIcon nativeColor={isOpen ? '#fff' : null} />\n          </IconButton>\n        </Tooltip>\n        <input\n          type=\"text\"\n          ref={this.refInput}\n          className={cx('PlaylistMediaFilter-input', isOpen && 'is-open')}\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default enhance(PlaylistFilter);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ActiveIcon from '@material-ui/icons/CheckBox';\nimport ActivateIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport RenamePlaylistButton from './RenamePlaylistButton';\nimport DeletePlaylistButton from './DeletePlaylistButton';\nimport ShufflePlaylistButton from './ShufflePlaylistButton';\nimport PlaylistFilter from './PlaylistFilter';\n\nconst enhance = translate();\n\nconst ID = 'playlist-meta-active';\n\nconst PlaylistMeta = ({\n  t,\n  className,\n  active,\n  name,\n  onShufflePlaylist,\n  onActivatePlaylist,\n  onRenamePlaylist,\n  onDeletePlaylist,\n  onNotDeletable,\n  onFilter,\n}) => (\n  <div className={cx('PlaylistMeta', className, active && 'PlaylistMeta--active')}>\n    <div className=\"PlaylistMeta-name\">\n      {name}\n    </div>\n    <label htmlFor={ID} className={cx('PlaylistMeta-active', active && 'is-active')}>\n      <Checkbox\n        id={ID}\n        checked={active}\n        disabled={active}\n        onChange={active ? null : onActivatePlaylist}\n        icon={<ActivateIcon />}\n        checkedIcon={<ActiveIcon nativeColor=\"#fff\" />}\n      />\n      <span>\n        {active ? t('playlists.active') : t('playlists.activate')}\n      </span>\n    </label>\n    <PlaylistFilter\n      onFilter={onFilter}\n    />\n    <ShufflePlaylistButton onShuffle={onShufflePlaylist} />\n    <RenamePlaylistButton\n      initialName={name}\n      onRename={onRenamePlaylist}\n    />\n    <DeletePlaylistButton\n      active={active}\n      onNotDeletable={onNotDeletable}\n      onDelete={onDeletePlaylist}\n    />\n  </div>\n);\n\nPlaylistMeta.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  active: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  onShufflePlaylist: PropTypes.func.isRequired,\n  onActivatePlaylist: PropTypes.func.isRequired,\n  onRenamePlaylist: PropTypes.func.isRequired,\n  onDeletePlaylist: PropTypes.func.isRequired,\n  onNotDeletable: PropTypes.func.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default enhance(PlaylistMeta);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropTarget } from 'react-dnd';\nimport { MEDIA } from '../../../constants/DDItemTypes';\nimport isDraggingNearTopOfRow from '../../../utils/isDraggingNearTopOfRow';\nimport MediaRow from '../../MediaList/Row';\n\nconst mediaTarget = {\n  drop(props, monitor, component) {\n    const item = monitor.getItem();\n    const { media } = item;\n    if (media) {\n      const thisID = props.media._id;\n      // Do not attempt to move when the selection is dropped on top of an item\n      // that is in the selection.\n      if (media.some(playlistItem => playlistItem._id === thisID)) {\n        return;\n      }\n      const insertBefore = isDraggingNearTopOfRow(monitor, component);\n      props.onMoveMedia(\n        media,\n        insertBefore ? { before: thisID } : { after: thisID },\n      );\n    }\n  },\n  hover(props, monitor, component) {\n    component.setState({\n      insertingAbove: isDraggingNearTopOfRow(monitor, component),\n    });\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n});\n\nclass PlaylistItemRow extends React.Component {\n  static propTypes = {\n    connectDropTarget: PropTypes.func.isRequired,\n    // Used in the drop handler above 👆\n    // eslint-disable-next-line react/no-unused-prop-types\n    onMoveMedia: PropTypes.func.isRequired,\n    isOver: PropTypes.bool.isRequired,\n  };\n\n  state = {\n    insertingAbove: false,\n  };\n\n  render() {\n    const {\n      connectDropTarget,\n      isOver,\n      ...props\n    } = this.props;\n    const { insertingAbove } = this.state;\n\n    const dropIndicator = <div className=\"PlaylistItemRow-drop-indicator\" />;\n\n    return connectDropTarget((\n      <div className=\"PlaylistItemRow\">\n        {isOver && insertingAbove && dropIndicator}\n        <MediaRow {...props} />\n        {isOver && !insertingAbove && dropIndicator}\n      </div>\n    ));\n  }\n}\n\nexport default DropTarget(MEDIA, mediaTarget, collect)(PlaylistItemRow);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Action from './Action';\n\nconst RemoveFromPlaylist = ({ onRemove, ...props }) => (\n  <Action {...props} onAction={onRemove}>\n    <DeleteIcon />\n  </Action>\n);\n\nRemoveFromPlaylist.propTypes = {\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default RemoveFromPlaylist;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport EditIcon from '@material-ui/icons/ModeEdit';\nimport Action from './Action';\n\nconst EditMedia = ({ onEdit, ...props }) => (\n  <Action {...props} onAction={onEdit}>\n    <EditIcon />\n  </Action>\n);\n\nEditMedia.propTypes = {\n  onEdit: PropTypes.func.isRequired,\n};\n\nexport default EditMedia;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MoveToFirstIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Action from './Action';\n\nconst MoveToFirst = ({ onFirst, ...props }) => (\n  <Action {...props} onAction={onFirst}>\n    <MoveToFirstIcon />\n  </Action>\n);\n\nMoveToFirst.propTypes = {\n  onFirst: PropTypes.func.isRequired,\n};\n\nexport default MoveToFirst;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MoveToLastIcon from '@material-ui/icons/KeyboardArrowDown';\nimport Action from './Action';\n\nconst MoveToLast = ({ onLast, ...props }) => (\n  <Action {...props} onAction={onLast}>\n    <MoveToLastIcon />\n  </Action>\n);\n\nMoveToLast.propTypes = {\n  onLast: PropTypes.func.isRequired,\n};\n\nexport default MoveToLast;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MediaList from '../../MediaList';\nimport PlaylistMeta from './Meta';\nimport PlainItemRow from '../../MediaList/Row';\nimport PlaylistItemRow from './PlaylistItemRow';\nimport AddToPlaylistAction from '../../MediaList/Actions/AddToPlaylist';\nimport RemoveFromPlaylistAction from '../../MediaList/Actions/RemoveFromPlaylist';\nimport EditMediaAction from '../../MediaList/Actions/EditMedia';\nimport MoveToFirstAction from '../../MediaList/Actions/MoveToFirst';\nimport MoveToLastAction from '../../MediaList/Actions/MoveToLast';\n\nconst makeActions = ({\n  onOpenAddMediaMenu,\n  onMoveToFirst,\n  onMoveToLast,\n  onEditMedia,\n  onRemoveFromPlaylist,\n  isFiltered,\n}) =>\n  (media, selection, index) => [\n    <AddToPlaylistAction\n      key=\"add\"\n      onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n    />,\n    // Don't show the \"move to first\" action on the first item in the playlist.\n    // If the playlist is filtered we don't know if the first item to show is\n    // also the first in the playlist, so just show it always in that case.\n    (index > 0 || isFiltered) && (\n      <MoveToFirstAction\n        key=\"first\"\n        onFirst={() => onMoveToFirst(media, selection)}\n      />\n    ),\n    (index === 0 && !isFiltered) && (\n      <MoveToLastAction\n        key=\"last\"\n        onLast={() => onMoveToLast(media, selection)}\n      />\n    ),\n    <EditMediaAction\n      key=\"edit\"\n      onEdit={() => onEditMedia(media)}\n    />,\n    <RemoveFromPlaylistAction\n      key=\"remove\"\n      onRemove={() => onRemoveFromPlaylist(media, selection)}\n    />,\n  ];\n\nconst PlaylistPanel = (props) => {\n  const {\n    className,\n    playlist,\n    media,\n    loading,\n    isFiltered,\n    onShufflePlaylist,\n    onActivatePlaylist,\n    onRenamePlaylist,\n    onDeletePlaylist,\n    onNotDeletable,\n    onLoadPlaylistPage,\n    onFilterPlaylistItems,\n    onMoveMedia,\n    onOpenPreviewMediaDialog,\n  } = props;\n\n  let list;\n  if (loading) {\n    list = (\n      <div className=\"PlaylistPanel-loading\">\n        <CircularProgress size=\"100%\" />\n      </div>\n    );\n  } else {\n    list = (\n      <MediaList\n        className=\"PlaylistPanel-media\"\n        size={media.length}\n        media={media}\n        rowComponent={isFiltered ? PlainItemRow : PlaylistItemRow}\n        rowProps={{ onMoveMedia }}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        makeActions={makeActions(props)}\n        onRequestPage={onLoadPlaylistPage}\n      />\n    );\n  }\n\n  return (\n    <div className={cx('PlaylistPanel', className)}>\n      <PlaylistMeta\n        className=\"PlaylistPanel-meta\"\n        id={playlist._id}\n        name={playlist.name}\n        active={playlist.active}\n        onShufflePlaylist={onShufflePlaylist}\n        onActivatePlaylist={onActivatePlaylist}\n        onRenamePlaylist={onRenamePlaylist}\n        onDeletePlaylist={onDeletePlaylist}\n        onNotDeletable={onNotDeletable}\n        onFilter={onFilterPlaylistItems}\n      />\n      {list}\n    </div>\n  );\n};\n\nPlaylistPanel.propTypes = {\n  className: PropTypes.string,\n  playlist: PropTypes.object.isRequired,\n  media: PropTypes.array.isRequired,\n  loading: PropTypes.bool.isRequired,\n  isFiltered: PropTypes.bool.isRequired,\n  onShufflePlaylist: PropTypes.func.isRequired,\n  onActivatePlaylist: PropTypes.func.isRequired,\n  onRenamePlaylist: PropTypes.func.isRequired,\n  onDeletePlaylist: PropTypes.func.isRequired,\n  onLoadPlaylistPage: PropTypes.func.isRequired,\n  onFilterPlaylistItems: PropTypes.func.isRequired,\n  onNotDeletable: PropTypes.func.isRequired,\n  onMoveMedia: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default PlaylistPanel;\n","import { bindActionCreators } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\n\nimport {\n  selectedPlaylistSelector,\n  filteredSelectedPlaylistItemsSelector,\n  isSelectedPlaylistLoadingSelector,\n  isFilteredSelector,\n} from '../selectors/playlistSelectors';\n\nimport { openPreviewMediaDialog } from '../actions/DialogActionCreators';\nimport {\n  addMediaMenu,\n  editMedia,\n  moveMedia,\n  removeMedia,\n  filterPlaylistItems,\n  renamePlaylist,\n  deletePlaylist,\n  cannotDeleteActivePlaylist,\n  shufflePlaylist,\n  activatePlaylist,\n  loadPlaylist,\n  loadFilteredPlaylistItems,\n} from '../actions/PlaylistActionCreators';\n\nimport PlaylistPanel from '../components/PlaylistManager/Panel';\n\nconst mapStateToProps = createStructuredSelector({\n  playlist: selectedPlaylistSelector,\n  media: filteredSelectedPlaylistItemsSelector,\n  loading: isSelectedPlaylistLoadingSelector,\n  isFiltered: isFilteredSelector,\n});\n\nconst selectionOrOne = (media, selection) => {\n  if (selection.isSelected(media)) {\n    return selection.get();\n  }\n  return [media];\n};\n\nconst onOpenAddMediaMenu = (position, media, selection) =>\n  addMediaMenu(selectionOrOne(media, selection), position);\nconst onRemoveFromPlaylist = playlist => (media, selection) =>\n  removeMedia(playlist, selectionOrOne(media, selection));\nconst onMoveMedia = playlist => (media, opts) =>\n  moveMedia(playlist, media, opts);\nconst onMoveToFirst = playlist => (media, selection) =>\n  moveMedia(playlist, selectionOrOne(media, selection), { at: 'start' });\nconst onMoveToLast = playlist => (media, selection) =>\n  moveMedia(playlist, selectionOrOne(media, selection), { at: 'end' });\nconst onEditMedia = playlist => media =>\n  editMedia(playlist, media);\nconst onLoadPlaylistPage = ({ isFiltered, playlist }) => page => (\n  isFiltered ? loadFilteredPlaylistItems(playlist._id, page) :\n    loadPlaylist(playlist._id, page)\n);\n\n// Most of the playlist-related action creators need to know which playlist to\n// use, i.e. need to have a reference to the selected playlist. The selected\n// playlist is picked out in `mapStateToProps`, but we can't access its result\n// in `mapDispatchToProps` yet. Instead, `mapDispatchToProps` passes the\n// `dispatch` function to the `mergeProps` function below, and then that\n// configures the action creators.\n// TODO Maybe it's better to have versions of these action creators that work on\n// the selected playlist by default? using redux-thunk.\nconst mapDispatchToProps = dispatch => ({ dispatch });\n\nconst mergeProps = (state, { dispatch }, props) => ({\n  ...props,\n  ...state,\n  ...bindActionCreators({\n    onShufflePlaylist: shufflePlaylist.bind(null, state.playlist._id),\n    onActivatePlaylist: activatePlaylist.bind(null, state.playlist._id),\n    onRenamePlaylist: renamePlaylist.bind(null, state.playlist._id),\n    onDeletePlaylist: deletePlaylist.bind(null, state.playlist._id),\n    onNotDeletable: cannotDeleteActivePlaylist,\n\n    onOpenAddMediaMenu,\n    onOpenPreviewMediaDialog: openPreviewMediaDialog,\n    onMoveToFirst: onMoveToFirst(state.playlist._id),\n    onMoveToLast: onMoveToLast(state.playlist._id),\n    onMoveMedia: onMoveMedia(state.playlist._id),\n    onEditMedia: onEditMedia(state.playlist._id),\n    onRemoveFromPlaylist: onRemoveFromPlaylist(state.playlist._id),\n    onLoadPlaylistPage: onLoadPlaylistPage(state),\n    onFilterPlaylistItems: filterPlaylistItems.bind(null, state.playlist._id),\n  }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(PlaylistPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport injectMediaSources from '../../../utils/injectMediaSources';\n\nconst PlaylistImport = ({\n  getMediaSource,\n  getAllMediaSources,\n  selectedSourceType,\n  sourceStates,\n  onShowImportPanel,\n  onHideImportPanel,\n}) => {\n  if (selectedSourceType) {\n    const Panel = getMediaSource(selectedSourceType).ImportPanel;\n    const state = sourceStates[selectedSourceType];\n    return (\n      <Panel\n        onClosePanel={onHideImportPanel}\n        {...state}\n      />\n    );\n  }\n\n  const forms = [];\n  const sources = getAllMediaSources();\n  Object.keys(sources).forEach((sourceType) => {\n    const { ImportForm } = sources[sourceType];\n    if (ImportForm) {\n      forms.push((\n        <ImportForm\n          key={sourceType}\n          onShowImportPanel={() => onShowImportPanel(sourceType)}\n          onHideImportPanel={onHideImportPanel}\n        />\n      ));\n    }\n  });\n\n  return (\n    <div className=\"PlaylistImport\">\n      {forms}\n    </div>\n  );\n};\n\nPlaylistImport.propTypes = {\n  selectedSourceType: PropTypes.string,\n  sourceStates: PropTypes.object,\n\n  getMediaSource: PropTypes.func.isRequired,\n  getAllMediaSources: PropTypes.func.isRequired,\n  onShowImportPanel: PropTypes.func.isRequired,\n  onHideImportPanel: PropTypes.func.isRequired,\n};\n\nexport default injectMediaSources()(PlaylistImport);\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport {\n  showImportSourcePanel,\n  hideImportSourcePanel,\n} from '../actions/ImportActionCreators';\nimport { selectedSourceTypeSelector } from '../selectors/importSelectors';\nimport PlaylistImport from '../components/PlaylistManager/Import';\n\nconst mapStateToProps = createStructuredSelector({\n  selectedSourceType: selectedSourceTypeSelector,\n  sourceStates: state => state.sources,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onShowImportPanel: showImportSourcePanel,\n  onHideImportPanel: hideImportSourcePanel,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistImport);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Typography from '@material-ui/core/Typography';\nimport NoResultsIcon from '@material-ui/icons/Search';\n\nconst enhance = translate();\n\nconst NoResults = ({ t }) => (\n  <div className=\"SearchResults-none\">\n    <NoResultsIcon className=\"SearchResults-noneIcon\" />\n    <Typography className=\"SearchResults-noneHeader\">{t('playlists.search.noResults')}</Typography>\n    <Typography>{t('playlists.search.noResultsSub')}</Typography>\n  </div>\n);\n\nNoResults.propTypes = {\n  t: PropTypes.func.isRequired,\n};\n\nexport default enhance(NoResults);\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst LoadingSearchResults = () => (\n  <div className=\"PlaylistPanel-loading\">\n    <CircularProgress size=\"100%\" />\n  </div>\n);\n\nexport default LoadingSearchResults;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MediaList from '../../MediaList';\nimport AddToPlaylistAction from '../../MediaList/Actions/AddToPlaylist';\n\nconst makeActions = onOpenAddMediaMenu => (media, selection) => (\n  <React.Fragment>\n    <AddToPlaylistAction\n      onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n    />\n  </React.Fragment>\n);\n\nconst SearchResultsList = ({\n  results,\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog,\n}) => (\n  <MediaList\n    className=\"PlaylistPanel-media\"\n    media={results}\n    onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n    makeActions={makeActions(onOpenAddMediaMenu)}\n  />\n);\n\nSearchResultsList.propTypes = {\n  results: PropTypes.array.isRequired,\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default SearchResultsList;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { IDLE, LOADING, LOADED } from '../../../constants/LoadingStates';\nimport NoSearchResults from './NoSearchResults';\nimport LoadingSearchResults from './LoadingSearchResults';\nimport SearchResultsList from './SearchResultsList';\n\nconst enhance = translate();\n\nconst SearchResultsPanel = ({\n  t,\n  className,\n  query,\n  loadingState,\n  results,\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog,\n}) => {\n  let list;\n  if (loadingState === LOADED) {\n    list = results.length > 0 ? (\n      <SearchResultsList\n        results={results}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        onOpenAddMediaMenu={onOpenAddMediaMenu}\n      />\n    ) : (\n      <NoSearchResults />\n    );\n  } else {\n    list = (\n      <LoadingSearchResults />\n    );\n  }\n\n  return (\n    <div className={cx('PlaylistPanel', 'SearchResults', className)}>\n      <div className=\"SearchResults-query\">\n        {t('playlists.search.results', { query })}\n      </div>\n      {list}\n    </div>\n  );\n};\n\nSearchResultsPanel.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  query: PropTypes.string.isRequired,\n  loadingState: PropTypes.oneOf([IDLE, LOADING, LOADED]).isRequired,\n  results: PropTypes.arrayOf(PropTypes.object),\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default enhance(SearchResultsPanel);\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { openPreviewMediaDialog } from '../actions/DialogActionCreators';\nimport { addMediaMenu } from '../actions/PlaylistActionCreators';\n\nimport {\n  searchQuerySelector,\n  searchResultsSelector,\n  searchLoadingStateSelector,\n} from '../selectors/searchSelectors';\nimport SearchResults from '../components/PlaylistManager/SearchResults';\n\nconst mapStateToProps = createStructuredSelector({\n  query: searchQuerySelector,\n  results: searchResultsSelector,\n  loadingState: searchLoadingStateSelector,\n});\n\nconst selectionOrOne = (media, selection) => {\n  if (selection.isSelected(media)) {\n    return selection.get();\n  }\n  return [media];\n};\n\nconst onOpenAddMediaMenu = (position, media, selection) =>\n  addMediaMenu(selectionOrOne(media, selection), position);\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog: openPreviewMediaDialog,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResults);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst enhance = translate();\n\nclass SearchBar extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = { focused: false };\n\n  handleFocus = () => {\n    this.setState({ focused: true });\n  };\n  handleBlur = () => {\n    this.setState({ focused: false });\n  };\n\n  handleKeyDown = (e) => {\n    const { onSubmit } = this.props;\n    if (e.key === 'Enter') {\n      onSubmit(this.input.value);\n    }\n  };\n\n  refInput = (input) => {\n    this.input = input;\n  };\n\n  render() {\n    const { t, children } = this.props;\n    const { focused } = this.state;\n    return (\n      <div className={cx('SearchBar', focused ? 'is-focused' : '', this.props.className)}>\n        <div className=\"SearchBar-icon\">\n          <SearchIcon />\n        </div>\n        {children}\n        <div className=\"SearchBar-query\">\n          <input\n            ref={this.refInput}\n            className=\"SearchBar-input\"\n            type=\"text\"\n            placeholder={focused ? '' : t('playlists.search.action')}\n            onFocus={this.handleFocus}\n            onBlur={this.handleBlur}\n            onKeyDown={this.handleKeyDown}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default enhance(SearchBar);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SourcePickerElement = ({\n  className,\n  name,\n  source,\n  active,\n}) => (\n  <div\n    className={cx(\n      'SourcePickerElement',\n      `SourcePickerElement--${name}`,\n      active && 'SourcePickerElement--active',\n      className,\n    )}\n    style={{ backgroundImage: `url(${source.logo})` }}\n  />\n);\n\nSourcePickerElement.propTypes = {\n  className: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  source: PropTypes.shape({\n    logo: PropTypes.string.isRequired,\n  }).isRequired,\n  active: PropTypes.bool,\n};\n\nexport default SourcePickerElement;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Popover from '@material-ui/core/Popover';\nimport ArrowIcon from '@material-ui/icons/ArrowDropDown';\nimport injectMediaSources from '../../../utils/injectMediaSources';\nimport SourcePickerElement from './SourcePickerElement';\n\nconst enhance = injectMediaSources();\n\nconst popoverPosition = {\n  anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n  transformOrigin: { vertical: 'top', horizontal: 'left' },\n};\n\nclass SourcePicker extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    selected: PropTypes.string,\n    onChange: PropTypes.func,\n\n    getMediaSource: PropTypes.func.isRequired,\n    getAllMediaSources: PropTypes.func.isRequired,\n  };\n\n  state = { open: false };\n\n  createElement(sourceName) {\n    const { selected, getMediaSource } = this.props;\n    return (\n      <button\n        className=\"SourcePicker-item\"\n        key={sourceName}\n        onClick={() => this.handleChange(sourceName)}\n      >\n        <SourcePickerElement\n          name={sourceName}\n          source={getMediaSource(sourceName)}\n          active={selected === sourceName}\n        />\n      </button>\n    );\n  }\n\n  handleOpen = () => {\n    this.setState({\n      open: true,\n      anchor: this.container,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleChange(sourceName) {\n    this.handleClose();\n    this.props.onChange(sourceName);\n  }\n\n  refContainer = (container) => {\n    this.container = container;\n  };\n\n  render() {\n    const {\n      className,\n      selected,\n      getMediaSource,\n      getAllMediaSources,\n    } = this.props;\n\n    const sourceNames = Object.keys(getAllMediaSources());\n    const sources = sourceNames\n      .filter(name => name !== selected)\n      .map(name => this.createElement(name));\n\n    return (\n      <div\n        className={cx('SourcePicker', className)}\n        ref={this.refContainer}\n      >\n        <button\n          className=\"SourcePicker-active\"\n          onClick={this.handleOpen}\n        >\n          <SourcePickerElement\n            name={selected}\n            source={getMediaSource(selected)}\n            active\n          />\n          <ArrowIcon className=\"SourcePicker-arrow\" />\n        </button>\n        <Popover\n          classes={{ paper: 'SourcePicker-list' }}\n          open={this.state.open}\n          anchorEl={this.state.anchor}\n          onClose={this.handleClose}\n          {...popoverPosition}\n        >\n          {sources}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nexport default enhance(SourcePicker);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BaseSearchBar from '../../SearchBar';\nimport SourcePicker from './SourcePicker';\n\nconst SearchBar = ({\n  className,\n  source,\n  onSubmit,\n  onSourceChange,\n}) => (\n  <BaseSearchBar className={className} onSubmit={onSubmit}>\n    <SourcePicker\n      className=\"SearchBar-source\"\n      selected={source}\n      onChange={onSourceChange}\n    />\n  </BaseSearchBar>\n);\n\nSearchBar.propTypes = {\n  className: PropTypes.string,\n  source: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onSourceChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport SearchBar from '../components/PlaylistManager/Header/SearchBar';\nimport {\n  search,\n  setSource,\n} from '../actions/SearchActionCreators';\nimport { searchSourceTypeSelector } from '../selectors/searchSelectors';\n\nconst mapStateToProps = createStructuredSelector({\n  source: searchSourceTypeSelector,\n});\n\nconst mapDispatchToProps = {\n  onSubmit: search,\n  onSourceChange: setSource,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport OverlayHeader from '../../Overlay/Header';\nimport SearchBar from '../../../containers/MediaSearchBar';\n\nconst enhance = translate();\n\nconst PlaylistManagerHeader = ({\n  t,\n  className,\n  onCloseOverlay,\n}) => (\n  <OverlayHeader\n    className={cx('PlaylistHeader', className)}\n    title={t('playlists.title')}\n    onCloseOverlay={onCloseOverlay}\n  >\n    <SearchBar className=\"PlaylistHeader-search\" />\n  </OverlayHeader>\n);\n\nPlaylistManagerHeader.propTypes = {\n  className: PropTypes.string,\n  t: PropTypes.func.isRequired,\n  onCloseOverlay: PropTypes.func.isRequired,\n};\n\nexport default enhance(PlaylistManagerHeader);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\n\nconst EmptyPanel = ({ t, className }) => (\n  <div className={cx('PlaylistPanel', 'PlaylistPanel--empty', className)}>\n    {t('playlists.noPlaylists')}\n  </div>\n);\n\nEmptyPanel.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default translate()(EmptyPanel);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport OverlayContent from '../Overlay/Content';\nimport PlaylistMenu from '../../containers/PlaylistManagerMenu';\nimport PlaylistPanel from '../../containers/PlaylistManagerPanel';\nimport PlaylistImport from '../../containers/PlaylistImportManager';\nimport SearchResults from '../../containers/SearchResultsPanel';\nimport PlaylistHeader from './Header';\nimport PlaylistPanelEmpty from './Panel/Empty';\n\nconst PlaylistManager = ({\n  className,\n  selectedPlaylist,\n  showSearchResults,\n  showImportPanel,\n  onCloseOverlay,\n}) => {\n  let panel;\n  if (showImportPanel) {\n    panel = (\n      <div className=\"PlaylistPanel\">\n        <PlaylistImport />\n      </div>\n    );\n  } else if (showSearchResults) {\n    panel = <SearchResults />;\n  } else if (selectedPlaylist) {\n    // HACK Give this a key so it's remounted when you switch playlists.\n    // This is because there is some statefulness down the tree, especially\n    // in playlist filters and scroll position.\n    // By forcing a remount using a key we throw away all state and keep it\n    // consistent.\n    // TODO To *actually* fix playlist filters bleeding across playlist lines,\n    // we should reset the playlist filter state alone somehow when the\n    // selected playlist changes.\n    panel = <PlaylistPanel key={selectedPlaylist._id} />;\n  } else {\n    panel = <PlaylistPanelEmpty />;\n  }\n\n  return (\n    <div className={cx('PlaylistManager', className)}>\n      <PlaylistHeader\n        className=\"PlaylistManager-header AppRow AppRow--top\"\n        onCloseOverlay={onCloseOverlay}\n      />\n\n      <OverlayContent>\n        <PlaylistMenu className=\"PlaylistManager-menu\" />\n        <div className=\"PlaylistManager-panel\">\n          {panel}\n        </div>\n      </OverlayContent>\n    </div>\n  );\n};\n\nPlaylistManager.propTypes = {\n  className: PropTypes.string,\n  selectedPlaylist: PropTypes.object,\n  showSearchResults: PropTypes.bool.isRequired,\n  showImportPanel: PropTypes.bool.isRequired,\n  onCloseOverlay: PropTypes.func,\n};\n\nexport default PlaylistManager;\n"],"sourceRoot":""}