{"version":3,"sources":["webpack:///./actions/ImportActionCreators.js","webpack:///./actions/SearchActionCreators.js","webpack:///./components/PlaylistManager/Menu/Row.js","webpack:///./components/PlaylistManager/Menu/NewPlaylist.js","webpack:///../node_modules/@material-ui/icons/es/Search.js","webpack:///./components/PlaylistManager/Menu/SearchResultsRow.js","webpack:///../node_modules/@material-ui/icons/es/Input.js","webpack:///./components/PlaylistManager/Menu/PlaylistImportRow.js","webpack:///./components/PlaylistManager/Menu/index.js","webpack:///./containers/PlaylistManagerMenu.js","webpack:///../node_modules/@material-ui/icons/es/CheckBox.js","webpack:///../node_modules/@material-ui/icons/es/CheckBoxOutlineBlank.js","webpack:///./components/PlaylistManager/Panel/RenamePlaylistButton.js","webpack:///../node_modules/@material-ui/icons/es/Delete.js","webpack:///./components/PlaylistManager/Panel/DeletePlaylistButton.js","webpack:///../node_modules/@material-ui/icons/es/Shuffle.js","webpack:///./components/PlaylistManager/Panel/ShufflePlaylistButton.js","webpack:///./components/PlaylistManager/Panel/PlaylistFilter.js","webpack:///./components/PlaylistManager/Panel/Meta.js","webpack:///./components/PlaylistManager/Panel/PlaylistItemRow.js","webpack:///./components/MediaList/Actions/RemoveFromPlaylist.js","webpack:///./components/MediaList/Actions/EditMedia.js","webpack:///./components/MediaList/Actions/MoveToFirst.js","webpack:///./components/MediaList/Actions/MoveToLast.js","webpack:///./components/PlaylistManager/Panel/index.js","webpack:///./containers/PlaylistManagerPanel.js","webpack:///./components/PlaylistManager/Import/index.js","webpack:///./containers/PlaylistImportManager.js","webpack:///./components/PlaylistManager/SearchResults/NoSearchResults.js","webpack:///./components/PlaylistManager/SearchResults/LoadingSearchResults.js","webpack:///./components/PlaylistManager/SearchResults/SearchResultsList.js","webpack:///./components/PlaylistManager/SearchResults/index.js","webpack:///./containers/SearchResultsPanel.js","webpack:///./components/SearchBar/index.js","webpack:///./components/PlaylistManager/Header/SourcePickerElement.js","webpack:///./components/PlaylistManager/Header/SourcePicker.js","webpack:///./components/PlaylistManager/Header/SearchBar.js","webpack:///./containers/MediaSearchBar.js","webpack:///./components/PlaylistManager/Header/index.js","webpack:///./components/PlaylistManager/Panel/Empty.js","webpack:///./components/PlaylistManager/index.js","webpack:///./components/Dialogs/ConfirmDialog/index.js","webpack:///../node_modules/@material-ui/icons/es/ModeEdit.js"],"names":["ImportActionCreators_showImportPanel","type","imports","showImportSourcePanel","sourceType","payload","hideImportSourcePanel","SearchActionCreators_showSearchResults","search","deleteSearch","enhance","Object","lib","DDItemTypes","drop","_ref","monitor","onAddToPlaylist","playlist","getItem","media","connect","connectDropTarget","dropTarget","isOver","itemClasses","root","selected","jsx_default","className","CircularProgress","size","Check","Row_PlaylistRow","render","icon","_props","this","props","onClick","activeClass","active","droppableClass","creating","Row_ref2","MenuItem","classnames_default","classes","name","react_default","a","Component","propTypes","Row","NewPlaylist_enhance","dist_es","Add","nativeColor","NewPlaylist_NewPlaylist","state","handleOpen","_this","setState","handleClose","closeDialog","handleSubmit","playlistName","Promise","resolve","onCreatePlaylist","then","bind","assertThisInitialized_default","t","Fragment","NewPlaylist_ref","PromptDialog","title","NewPlaylist_ref2","submitLabel","onSubmit","onCancel","Menu_NewPlaylist","Search","createSvgIcon","createElement","d","Close","SearchResultsRow_SearchResultsRow","query","onClose","ListItem","role","SearchResultsRow_ref2","IconButton","SearchResultsRow_ref3","Menu_SearchResultsRow","Input","PlaylistImportRow_enhance","PlaylistImportRow_PlaylistImportRow","importing","PlaylistImportRow_ref2","PlaylistImportRow_ref3","Menu_PlaylistImportRow","Menu_PlaylistMenu","playlists","searchQuery","showSearchResults","searchResults","onSelectPlaylist","onSelectSearchResults","onCloseSearchResults","showImportPanel","onShowImportPanel","searchIsSelected","importIsSelected","isSelectingPlaylist","MenuList","map","pl","_id","Menu","mapStateToProps","reselect_es","playlistSelectors","searchSelectors","importSelectors","PlaylistManagerMenu","react_redux_es","dispatch","es","PlaylistActionCreators","CheckBox","CheckBoxOutlineBlank","RenamePlaylistButton_enhance","ModeEdit","RenamePlaylistButton_RenamePlaylistButton","renaming","onRename","Tooltip","placement","RenamePlaylistButton_ref","RenamePlaylistButton_ref2","value","initialName","Panel_RenamePlaylistButton","Delete","DeletePlaylistButton_enhance","DeletePlaylistButton_DeletePlaylistButton","deleting","onNotDeletable","handleConfirm","onDelete","disabled","DeletePlaylistButton_ref","ConfirmDialog","confirmLabel","onConfirm","Group","Panel_DeletePlaylistButton","Shuffle","ShufflePlaylistButton_enhance","compose_default","withState_default","withHandlers_default","setLoading","onShuffle","ShufflePlaylistButton_ShuffleButton","isLoading","ShufflePlaylistButton_ref2","ShufflePlaylistButton_ref3","ShufflePlaylistButton","PlaylistFilter_enhance","PlaylistFilter_PlaylistFilter","open","onFilter","debounce_default","handleClick","isOpen","clearFilter","input","focus","handleChange","event","target","refInput","ref","onChange","Panel_PlaylistFilter","Meta_enhance","ID","Meta_PlaylistMeta","onShufflePlaylist","onActivatePlaylist","onRenamePlaylist","onDeletePlaylist","htmlFor","Checkbox","id","checked","Meta_ref2","checkedIcon","Meta_ref3","Meta","mediaTarget","component","thisID","some","playlistItem","insertBefore","isDraggingNearTopOfRow","onMoveMedia","before","after","hover","insertingAbove","PlaylistItemRow_PlaylistItemRow","objectWithoutProperties_default","dropIndicator","PlaylistItemRow_ref","MediaList_Row","Panel_PlaylistItemRow","RemoveFromPlaylist_RemoveFromPlaylist","onRemove","Action","extends_default","onAction","RemoveFromPlaylist_ref2","Actions_RemoveFromPlaylist","EditMedia_EditMedia","onEdit","EditMedia_ref2","Actions_EditMedia","KeyboardArrowUp","MoveToFirst_MoveToFirst","onFirst","MoveToFirst_ref2","Actions_MoveToFirst","KeyboardArrowDown","MoveToLast_MoveToLast","onLast","MoveToLast_ref2","Actions_MoveToLast","Panel_PlaylistPanel","list","isFiltered","onLoadPlaylistPage","onFilterPlaylistItems","onOpenPreviewMediaDialog","loading","Panel_ref2","MediaList","length","rowComponent","rowProps","makeActions","onOpenAddMediaMenu","onMoveToFirst","onMoveToLast","onEditMedia","onRemoveFromPlaylist","selection","index","AddToPlaylist","onAdd","position","Panel_makeActions","onRequestPage","PlaylistManager_Panel","PlaylistManagerPanel_mapStateToProps","selectionOrOne","isSelected","get","PlaylistManagerPanel_onOpenAddMediaMenu","PlaylistManagerPanel","_ref2","DialogActionCreators","at","PlaylistManagerPanel_onMoveToLast","opts","PlaylistManagerPanel_onMoveMedia","PlaylistManagerPanel_onEditMedia","PlaylistManagerPanel_onRemoveFromPlaylist","page","PlaylistManagerPanel_onLoadPlaylistPage","Import_PlaylistImport","getAllMediaSources","selectedSourceType","sourceStates","onHideImportPanel","Panel","getMediaSource","ImportPanel","onClosePanel","forms","sources","keys","forEach","ImportForm","push","Import","injectMediaSources","PlaylistImportManager_mapStateToProps","PlaylistImportManager","NoSearchResults_enhance","NoSearchResults_NoResults","NoSearchResults_ref2","Typography","NoSearchResults","SearchResults_LoadingSearchResults","LoadingSearchResults_ref","SearchResultsList_SearchResultsList","results","SearchResultsList_makeActions","SearchResults_SearchResultsList","SearchResults_enhance","SearchResults_SearchResultsPanel","loadingState","LoadingStates","SearchResults_ref2","SearchResults_ref3","SearchResults","SearchResultsPanel_mapStateToProps","SearchResultsPanel_onOpenAddMediaMenu","SearchResultsPanel_selectionOrOne","containers_SearchResultsPanel","SearchBar_enhance","SearchBar_SearchBar","focused","handleFocus","handleBlur","handleKeyDown","e","key","children","SearchBar_ref","placeholder","onFocus","onBlur","onKeyDown","components_SearchBar","SourcePickerElement_SourcePickerElement","source","style","backgroundImage","logo","Header_SourcePickerElement","SourcePicker_enhance","popoverPosition","anchorOrigin","vertical","horizontal","transformOrigin","ArrowDropDown","SourcePicker_SourcePicker","anchor","container","refContainer","sourceName","_this2","_this3","_props2","filter","SourcePicker_ref","Popover","paper","anchorEl","Header_SourcePicker","Header_SearchBar_SearchBar","onSourceChange","Header_SearchBar","MediaSearchBar_mapStateToProps","MediaSearchBar_mapDispatchToProps","RequestActionCreators","qs","onStart","searchStart","onComplete","onError","error","MediaSearchBar","Header_enhance","Header_PlaylistManagerHeader","onCloseOverlay","Header","Header_ref2","PlaylistManager_Header","Empty_EmptyPanel","Empty","PlaylistManager_PlaylistManager","panel","selectedPlaylist","PlaylistManager_ref2","PlaylistManager_ref3","Content","_ref5","__webpack_exports__","_babel_runtime_helpers_builtin_jsx__WEBPACK_IMPORTED_MODULE_0___default","material_ui_Progress__WEBPACK_IMPORTED_MODULE_8__","busy","preventDefault","promise","onDone","cancelLabel","material_ui_Dialog__WEBPACK_IMPORTED_MODULE_6__","classnames__WEBPACK_IMPORTED_MODULE_3___default","material_ui_Dialog__WEBPACK_IMPORTED_MODULE_7__","_Form__WEBPACK_IMPORTED_MODULE_9__","_Form_Group__WEBPACK_IMPORTED_MODULE_10__","_Form_Button__WEBPACK_IMPORTED_MODULE_11__","react__WEBPACK_IMPORTED_MODULE_4___default","defaultProps","_utils_createSvgIcon__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_0___default"],"mappings":"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","file":"playlists_adfd415.js","sourcesContent":["import {\n  SHOW_IMPORT_PANEL,\n  HIDE_IMPORT_PANEL,\n  SHOW_IMPORT_SOURCE_PANEL,\n  HIDE_IMPORT_SOURCE_PANEL,\n} from '../constants/actionTypes/imports';\n\nexport function showImportPanel() {\n  return {\n    type: SHOW_IMPORT_PANEL,\n  };\n}\n\nexport function hideImportPanel() {\n  return {\n    type: HIDE_IMPORT_PANEL,\n  };\n}\n\nexport function showImportSourcePanel(sourceType) {\n  return {\n    type: SHOW_IMPORT_SOURCE_PANEL,\n    payload: { sourceType },\n  };\n}\n\nexport function hideImportSourcePanel() {\n  return { type: HIDE_IMPORT_SOURCE_PANEL };\n}\n","import {\n  SET_SEARCH_SOURCE,\n  SHOW_SEARCH_RESULTS,\n  SEARCH_START,\n  SEARCH_COMPLETE,\n  SEARCH_DELETE,\n} from '../constants/actionTypes/search';\nimport { get } from './RequestActionCreators';\n\nexport function setSource(source) {\n  return {\n    type: SET_SEARCH_SOURCE,\n    payload: { source },\n  };\n}\n\nexport function showSearchResults() {\n  return { type: SHOW_SEARCH_RESULTS };\n}\n\nfunction searchStart(query) {\n  return {\n    type: SEARCH_START,\n    payload: { query },\n  };\n}\n\nexport function search(query) {\n  return get('/search', {\n    qs: { query },\n    onStart: () => (dispatch) => {\n      dispatch(searchStart(query));\n      dispatch(showSearchResults());\n    },\n    onComplete: results => ({\n      type: SEARCH_COMPLETE,\n      payload: { results },\n    }),\n    onError: error => ({\n      type: SEARCH_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n\nexport function deleteSearch() {\n  return {\n    type: SEARCH_DELETE,\n  };\n}\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropTarget } from 'react-dnd';\nimport { CircularProgress } from 'material-ui/Progress';\nimport { MenuItem } from 'material-ui/Menu';\nimport ActiveIcon from '@material-ui/icons/Check';\nimport { MEDIA } from '../../../constants/DDItemTypes';\n\nconst playlistTarget = {\n  drop({ playlist, onAddToPlaylist }, monitor) {\n    const { media } = monitor.getItem();\n    onAddToPlaylist(playlist, media);\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n});\n\nconst enhance = DropTarget(MEDIA, playlistTarget, collect);\n\nconst itemClasses = {\n  root: 'PlaylistMenuRow',\n  selected: 'is-selected',\n};\n\nclass PlaylistRow extends React.Component {\n  static propTypes = {\n    playlist: PropTypes.object,\n    selected: PropTypes.bool,\n    isOver: PropTypes.bool.isRequired,\n\n    connectDropTarget: PropTypes.func.isRequired,\n    onClick: PropTypes.func,\n    // Used in the drop handler above 👆\n    // eslint-disable-next-line react/no-unused-prop-types\n    onAddToPlaylist: PropTypes.func,\n  };\n\n  render() {\n    const {\n      playlist,\n      selected,\n\n      onClick,\n\n      connectDropTarget,\n      isOver,\n    } = this.props;\n    const activeClass = playlist.active && 'is-active';\n    const droppableClass = isOver && 'is-droppable';\n\n    let icon;\n    if (playlist.creating) {\n      icon = (\n        <div className=\"PlaylistMenuRow-loading\">\n          <CircularProgress size=\"100%\" />\n        </div>\n      );\n    } else if (playlist.active) {\n      icon = (\n        <div className=\"PlaylistMenuRow-active-icon\">\n          <ActiveIcon />\n        </div>\n      );\n    }\n\n    return connectDropTarget((\n      <div>\n        <MenuItem\n          selected={selected}\n          className={cx(activeClass, droppableClass)}\n          classes={itemClasses}\n          onClick={onClick}\n        >\n          <div className=\"PlaylistMenuRow-title\">\n            {icon}\n            {playlist.name}\n          </div>\n          <div className=\"PlaylistMenuRow-count\">{playlist.size}</div>\n        </MenuItem>\n      </div>\n    ));\n  }\n}\n\nexport default enhance(PlaylistRow);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { MenuItem } from 'material-ui/Menu';\nimport CreatePlaylistIcon from '@material-ui/icons/Add';\n\nimport PromptDialog from '../../Dialogs/PromptDialog';\n\nconst enhance = translate();\n\nclass NewPlaylist extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    t: PropTypes.func.isRequired,\n    onCreatePlaylist: PropTypes.func.isRequired,\n  };\n\n  state = {\n    creating: false,\n  };\n\n  closeDialog() {\n    this.setState({ creating: false });\n  }\n\n  handleOpen = () => {\n    this.setState({ creating: true });\n  };\n\n  handleClose = () => {\n    this.closeDialog();\n  };\n\n  handleSubmit = playlistName =>\n    Promise.resolve(this.props.onCreatePlaylist(playlistName))\n      .then(this.closeDialog.bind(this));\n\n  render() {\n    const { t, className } = this.props;\n    return (\n      <React.Fragment>\n        <MenuItem\n          className={cx('PlaylistMenuRow', 'PlaylistMenuRow--create', className)}\n          onClick={this.handleOpen}\n        >\n          <div className=\"PlaylistMenuRow-title\">\n            <div className=\"PlaylistMenuRow-active-icon\">\n              <CreatePlaylistIcon />\n            </div>\n            {t('playlists.new')}\n          </div>\n        </MenuItem>\n        {this.state.creating && (\n          <PromptDialog\n            title={t('dialogs.createPlaylist.nameInputTitle')}\n            icon={<CreatePlaylistIcon nativeColor=\"#777\" />}\n            submitLabel={t('dialogs.createPlaylist.action')}\n            onSubmit={this.handleSubmit}\n            onCancel={this.handleClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default enhance(NewPlaylist);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z' })\n), 'Search');","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from 'material-ui/IconButton';\nimport { ListItem } from 'material-ui/List';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst SearchResultsRow = ({\n  className,\n  query,\n  onClick,\n  onClose,\n}) => (\n  <ListItem role=\"menuitem\" className={cx('PlaylistMenuRow', 'PlaylistMenuRow--search', className)}>\n    <button\n      className=\"PlaylistMenuRow-title\"\n      onClick={onClick}\n    >\n      <div className=\"PlaylistMenuRow-active-icon\">\n        <SearchIcon />\n      </div>\n      &quot;{query}&quot;\n    </button>\n    <div className=\"PlaylistMenuRow-count\">\n      <IconButton className=\"PlaylistMenuRow-closeButton\" onClick={onClose}>\n        <CloseIcon nativeColor=\"#777\" />\n      </IconButton>\n    </div>\n  </ListItem>\n);\n\nSearchResultsRow.propTypes = {\n  className: PropTypes.string,\n  query: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default SearchResultsRow;\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M21 3.01H3c-1.1 0-2 .9-2 2V9h2V4.99h18v14.03H3V15H1v4.01c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98v-14c0-1.11-.9-2-2-2zM11 16l4-4-4-4v3H1v2h10v3z' })\n), 'Input');","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { CircularProgress } from 'material-ui/Progress';\nimport { MenuItem } from 'material-ui/Menu';\nimport ImportIcon from '@material-ui/icons/Input';\n\nconst enhance = translate();\n\nconst PlaylistImportRow = ({\n  t,\n  className,\n  importing,\n  onClick,\n}) => {\n  let icon;\n  if (importing) {\n    icon = (\n      <div className=\"PlaylistMenuRow-loading\">\n        <CircularProgress size=\"100%\" />\n      </div>\n    );\n  } else {\n    icon = (\n      <div className=\"PlaylistMenuRow-active-icon\">\n        <ImportIcon />\n      </div>\n    );\n  }\n  return (\n    <MenuItem\n      className={cx('PlaylistMenuRow', 'PlaylistMenuRow--import', className)}\n      onClick={onClick}\n    >\n      <div className=\"PlaylistMenuRow-title\">\n        {icon}\n        {t('playlists.import.title')}\n      </div>\n    </MenuItem>\n  );\n};\n\nPlaylistImportRow.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  importing: PropTypes.bool,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default enhance(PlaylistImportRow);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { MenuList } from 'material-ui/Menu';\nimport PlaylistRow from './Row';\nimport PlaylistCreateRow from './NewPlaylist';\nimport SearchResultsRow from './SearchResultsRow';\nimport PlaylistImportRow from './PlaylistImportRow';\n\nconst PlaylistMenu = ({\n  className,\n  playlists,\n  selected,\n  searchQuery,\n  showSearchResults,\n  searchResults,\n  onCreatePlaylist,\n  onSelectPlaylist,\n  onSelectSearchResults,\n  onCloseSearchResults,\n  onAddToPlaylist,\n  showImportPanel,\n  onShowImportPanel,\n}) => {\n  const searchIsSelected = showSearchResults ? 'is-selected' : '';\n  const importIsSelected = showImportPanel ? 'is-selected' : '';\n  const isSelectingPlaylist = selected && !showSearchResults && !showImportPanel;\n  return (\n    <MenuList className={cx('PlaylistMenu', className)}>\n      <PlaylistCreateRow\n        className=\"PlaylistMenu-row\"\n        onCreatePlaylist={onCreatePlaylist}\n      />\n      {searchQuery && (\n        <SearchResultsRow\n          className={cx('PlaylistMenu-row', searchIsSelected)}\n          query={searchQuery}\n          size={searchResults}\n          onClick={onSelectSearchResults}\n          onClose={onCloseSearchResults}\n        />\n      )}\n      {playlists.map(pl => (\n        <PlaylistRow\n          key={pl._id}\n          className=\"PlaylistMenu-row\"\n          playlist={pl}\n          selected={isSelectingPlaylist && selected._id === pl._id}\n          onClick={() => onSelectPlaylist(pl._id)}\n          onAddToPlaylist={onAddToPlaylist}\n        />\n      ))}\n      <PlaylistImportRow\n        className={cx('PlaylistMenu-row', importIsSelected)}\n        onClick={onShowImportPanel}\n      />\n    </MenuList>\n  );\n};\n\nPlaylistMenu.propTypes = {\n  className: PropTypes.string,\n  playlists: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selected: PropTypes.object,\n  showSearchResults: PropTypes.bool.isRequired,\n  showImportPanel: PropTypes.bool.isRequired,\n  searchQuery: PropTypes.string,\n  searchResults: PropTypes.number,\n  onCreatePlaylist: PropTypes.func.isRequired,\n  onSelectPlaylist: PropTypes.func.isRequired,\n  onSelectSearchResults: PropTypes.func.isRequired,\n  onCloseSearchResults: PropTypes.func.isRequired,\n  onAddToPlaylist: PropTypes.func.isRequired,\n  onShowImportPanel: PropTypes.func.isRequired,\n};\n\nexport default PlaylistMenu;\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport {\n  addMedia as addToPlaylist,\n  createPlaylist,\n  selectPlaylist,\n} from '../actions/PlaylistActionCreators';\nimport { showImportPanel } from '../actions/ImportActionCreators';\nimport {\n  showSearchResults,\n  deleteSearch,\n} from '../actions/SearchActionCreators';\n\nimport {\n  playlistsSelector,\n  selectedPlaylistSelector,\n} from '../selectors/playlistSelectors';\nimport {\n  searchQuerySelector,\n  showSearchResultsSelector,\n  searchResultsCountSelector,\n} from '../selectors/searchSelectors';\nimport { showImportPanelSelector } from '../selectors/importSelectors';\nimport PlaylistsMenu from '../components/PlaylistManager/Menu';\n\nconst mapStateToProps = createStructuredSelector({\n  playlists: playlistsSelector,\n  selected: selectedPlaylistSelector,\n  searchQuery: searchQuerySelector,\n  showSearchResults: showSearchResultsSelector,\n  searchResults: searchResultsCountSelector,\n  showImportPanel: showImportPanelSelector,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onAddToPlaylist: addToPlaylist,\n  onCreatePlaylist: createPlaylist,\n  onSelectPlaylist: selectPlaylist,\n  onSelectSearchResults: showSearchResults,\n  onCloseSearchResults: deleteSearch,\n  onShowImportPanel: showImportPanel,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistsMenu);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z' })\n), 'CheckBox');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z' })\n), 'CheckBoxOutlineBlank');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Tooltip from 'material-ui/Tooltip';\nimport IconButton from 'material-ui/IconButton';\nimport EditIcon from '@material-ui/icons/ModeEdit';\nimport PromptDialog from '../../Dialogs/PromptDialog';\n\nconst enhance = translate();\n\nclass RenamePlaylistButton extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    onRename: PropTypes.func.isRequired,\n    initialName: PropTypes.string,\n  };\n\n  state = {\n    renaming: false,\n  };\n\n  closeDialog() {\n    this.setState({ renaming: false });\n  }\n\n  handleOpen = () => {\n    this.setState({ renaming: true });\n  };\n\n  handleClose = () => {\n    this.closeDialog();\n  };\n\n  handleSubmit = name =>\n    this.props.onRename(name)\n      .then(this.closeDialog.bind(this));\n\n  render() {\n    const { t } = this.props;\n    return (\n      <React.Fragment>\n        <Tooltip title={t('playlists.rename')} placement=\"top\">\n          <IconButton className=\"PlaylistMeta-iconButton\" onClick={this.handleOpen}>\n            <EditIcon />\n          </IconButton>\n        </Tooltip>\n        {this.state.renaming && (\n          <PromptDialog\n            title={t('dialogs.renamePlaylist.nameInputTitle')}\n            submitLabel={t('dialogs.renamePlaylist.action')}\n            icon={<EditIcon nativeColor=\"#777\" />}\n            value={this.props.initialName}\n            onSubmit={this.handleSubmit}\n            onCancel={this.handleClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default enhance(RenamePlaylistButton);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z' })\n), 'Delete');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Tooltip from 'material-ui/Tooltip';\nimport IconButton from 'material-ui/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport ConfirmDialog from '../../Dialogs/ConfirmDialog';\nimport FormGroup from '../../Form/Group';\n\nconst enhance = translate();\n\nclass DeletePlaylistButton extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onNotDeletable: PropTypes.func.isRequired,\n    active: PropTypes.bool,\n  };\n\n  state = {\n    deleting: false,\n  };\n\n  closeDialog() {\n    this.setState({ deleting: false });\n  }\n\n  handleOpen = () => {\n    if (this.props.active) {\n      this.props.onNotDeletable();\n    } else {\n      this.setState({ deleting: true });\n    }\n  };\n\n  handleClose = () => {\n    this.closeDialog();\n  };\n\n  handleConfirm = name =>\n    this.props.onDelete(name)\n      .then(this.closeDialog.bind(this));\n\n  render() {\n    const { t, active } = this.props;\n    return (\n      <React.Fragment>\n        <Tooltip title={active ? t('playlists.deleteActive') : t('playlists.delete')} placement=\"top\">\n          <IconButton\n            disabled={active}\n            className=\"PlaylistMeta-iconButton\"\n            onClick={this.handleOpen}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n        {this.state.deleting && (\n          <ConfirmDialog\n            title={t('dialogs.deletePlaylist.title')}\n            confirmLabel={t('dialogs.deletePlaylist.action')}\n            onConfirm={this.handleConfirm}\n            onCancel={this.handleClose}\n          >\n            <FormGroup>{t('dialogs.deletePlaylist.confirm')}</FormGroup>\n          </ConfirmDialog>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default enhance(DeletePlaylistButton);\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z' })\n), 'Shuffle');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport compose from 'recompose/compose';\nimport withState from 'recompose/withState';\nimport withHandlers from 'recompose/withHandlers';\nimport { translate } from 'react-i18next';\nimport { CircularProgress } from 'material-ui/Progress';\nimport Tooltip from 'material-ui/Tooltip';\nimport IconButton from 'material-ui/IconButton';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\n\nconst enhance = compose(\n  withState('isLoading', 'setLoading', false),\n  withHandlers({\n    onClick: props => () => {\n      props.setLoading(true);\n      props.onShuffle().then(() => {\n        props.setLoading(false);\n      }, () => {\n        props.setLoading(false);\n      });\n    },\n  }),\n  translate(),\n);\n\nconst ShuffleButton = ({\n  t,\n  isLoading,\n  onClick,\n}) => (\n  <Tooltip title={t('playlists.shuffle')} placement=\"top\">\n    <IconButton\n      className=\"PlaylistMeta-iconButton\"\n      onClick={onClick}\n    >\n      {isLoading ? (\n        <CircularProgress size=\"100%\" />\n      ) : (\n        <ShuffleIcon />\n      )}\n    </IconButton>\n  </Tooltip>\n);\n\nShuffleButton.propTypes = {\n  t: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  onShuffle: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types\n};\n\nexport default enhance(ShuffleButton);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport debounce from 'lodash/debounce';\nimport Tooltip from 'material-ui/Tooltip';\nimport IconButton from 'material-ui/IconButton';\nimport FilterIcon from '@material-ui/icons/Search';\n\nconst enhance = translate();\n\nclass PlaylistFilter extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n  };\n\n  state = {\n    open: false,\n    value: '',\n  };\n\n  onFilter = debounce((value) => {\n    this.props.onFilter(value);\n  }, 200);\n\n  clearFilter() {\n    if (this.state.value !== '') {\n      this.props.onFilter('');\n    }\n  }\n\n  handleClick = () => {\n    const isOpen = !this.state.open;\n\n    if (!isOpen) {\n      this.clearFilter();\n    }\n\n    this.setState({\n      open: isOpen,\n      value: '',\n    }, () => {\n      if (isOpen) {\n        this.input.focus();\n      }\n    });\n  };\n\n  handleChange = (event) => {\n    this.setState({ value: event.target.value });\n    this.onFilter(event.target.value);\n  };\n\n  refInput = (input) => {\n    this.input = input;\n  };\n\n  render() {\n    const { t } = this.props;\n    const isOpen = this.state.open;\n    return (\n      <div className=\"PlaylistMediaFilter\">\n        <Tooltip title={t('playlists.filter')} placement=\"top\">\n          <IconButton\n            className=\"PlaylistMeta-iconButton\"\n            onClick={this.handleClick}\n          >\n            <FilterIcon nativeColor={isOpen ? '#fff' : null} />\n          </IconButton>\n        </Tooltip>\n        <input\n          type=\"text\"\n          ref={this.refInput}\n          className={cx('PlaylistMediaFilter-input', isOpen && 'is-open')}\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default enhance(PlaylistFilter);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Checkbox from 'material-ui/Checkbox';\nimport ActiveIcon from '@material-ui/icons/CheckBox';\nimport ActivateIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport RenamePlaylistButton from './RenamePlaylistButton';\nimport DeletePlaylistButton from './DeletePlaylistButton';\nimport ShufflePlaylistButton from './ShufflePlaylistButton';\nimport PlaylistFilter from './PlaylistFilter';\n\nconst enhance = translate();\n\nconst ID = 'playlist-meta-active';\n\nconst PlaylistMeta = ({\n  t,\n  className,\n  active,\n  name,\n  onShufflePlaylist,\n  onActivatePlaylist,\n  onRenamePlaylist,\n  onDeletePlaylist,\n  onNotDeletable,\n  onFilter,\n}) => (\n  <div className={cx('PlaylistMeta', className, active && 'PlaylistMeta--active')}>\n    <div className=\"PlaylistMeta-name\">\n      {name}\n    </div>\n    <label htmlFor={ID} className={cx('PlaylistMeta-active', active && 'is-active')}>\n      <Checkbox\n        id={ID}\n        checked={active}\n        disabled={active}\n        onChange={active ? null : onActivatePlaylist}\n        icon={<ActivateIcon />}\n        checkedIcon={<ActiveIcon nativeColor=\"#fff\" />}\n      />\n      <span>\n        {active ? t('playlists.active') : t('playlists.activate')}\n      </span>\n    </label>\n    <PlaylistFilter\n      onFilter={onFilter}\n    />\n    <ShufflePlaylistButton onShuffle={onShufflePlaylist} />\n    <RenamePlaylistButton\n      initialName={name}\n      onRename={onRenamePlaylist}\n    />\n    <DeletePlaylistButton\n      active={active}\n      onNotDeletable={onNotDeletable}\n      onDelete={onDeletePlaylist}\n    />\n  </div>\n);\n\nPlaylistMeta.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  active: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  onShufflePlaylist: PropTypes.func.isRequired,\n  onActivatePlaylist: PropTypes.func.isRequired,\n  onRenamePlaylist: PropTypes.func.isRequired,\n  onDeletePlaylist: PropTypes.func.isRequired,\n  onNotDeletable: PropTypes.func.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default enhance(PlaylistMeta);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropTarget } from 'react-dnd';\nimport { MEDIA } from '../../../constants/DDItemTypes';\nimport isDraggingNearTopOfRow from '../../../utils/isDraggingNearTopOfRow';\nimport MediaRow from '../../MediaList/Row';\n\nconst mediaTarget = {\n  drop(props, monitor, component) {\n    const item = monitor.getItem();\n    const { media } = item;\n    if (media) {\n      const thisID = props.media._id;\n      // Do not attempt to move when the selection is dropped on top of an item\n      // that is in the selection.\n      if (media.some(playlistItem => playlistItem._id === thisID)) {\n        return;\n      }\n      const insertBefore = isDraggingNearTopOfRow(monitor, component);\n      props.onMoveMedia(\n        media,\n        insertBefore ? { before: thisID } : { after: thisID },\n      );\n    }\n  },\n  hover(props, monitor, component) {\n    component.setState({\n      insertingAbove: isDraggingNearTopOfRow(monitor, component),\n    });\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n});\n\nclass PlaylistItemRow extends React.Component {\n  static propTypes = {\n    connectDropTarget: PropTypes.func.isRequired,\n    // Used in the drop handler above 👆\n    // eslint-disable-next-line react/no-unused-prop-types\n    onMoveMedia: PropTypes.func.isRequired,\n    isOver: PropTypes.bool.isRequired,\n  };\n\n  state = {\n    insertingAbove: false,\n  };\n\n  render() {\n    const {\n      connectDropTarget,\n      isOver,\n      ...props\n    } = this.props;\n    const { insertingAbove } = this.state;\n\n    const dropIndicator = <div className=\"PlaylistItemRow-drop-indicator\" />;\n\n    return connectDropTarget((\n      <div className=\"PlaylistItemRow\">\n        {isOver && insertingAbove && dropIndicator}\n        <MediaRow {...props} />\n        {isOver && !insertingAbove && dropIndicator}\n      </div>\n    ));\n  }\n}\n\nexport default DropTarget(MEDIA, mediaTarget, collect)(PlaylistItemRow);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Action from './Action';\n\nconst RemoveFromPlaylist = ({ onRemove, ...props }) => (\n  <Action {...props} onAction={onRemove}>\n    <DeleteIcon />\n  </Action>\n);\n\nRemoveFromPlaylist.propTypes = {\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default RemoveFromPlaylist;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport EditIcon from '@material-ui/icons/ModeEdit';\nimport Action from './Action';\n\nconst EditMedia = ({ onEdit, ...props }) => (\n  <Action {...props} onAction={onEdit}>\n    <EditIcon />\n  </Action>\n);\n\nEditMedia.propTypes = {\n  onEdit: PropTypes.func.isRequired,\n};\n\nexport default EditMedia;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MoveToFirstIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Action from './Action';\n\nconst MoveToFirst = ({ onFirst, ...props }) => (\n  <Action {...props} onAction={onFirst}>\n    <MoveToFirstIcon />\n  </Action>\n);\n\nMoveToFirst.propTypes = {\n  onFirst: PropTypes.func.isRequired,\n};\n\nexport default MoveToFirst;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MoveToLastIcon from '@material-ui/icons/KeyboardArrowDown';\nimport Action from './Action';\n\nconst MoveToLast = ({ onLast, ...props }) => (\n  <Action {...props} onAction={onLast}>\n    <MoveToLastIcon />\n  </Action>\n);\n\nMoveToLast.propTypes = {\n  onLast: PropTypes.func.isRequired,\n};\n\nexport default MoveToLast;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CircularProgress } from 'material-ui/Progress';\nimport MediaList from '../../MediaList';\nimport PlaylistMeta from './Meta';\nimport PlainItemRow from '../../MediaList/Row';\nimport PlaylistItemRow from './PlaylistItemRow';\nimport AddToPlaylistAction from '../../MediaList/Actions/AddToPlaylist';\nimport RemoveFromPlaylistAction from '../../MediaList/Actions/RemoveFromPlaylist';\nimport EditMediaAction from '../../MediaList/Actions/EditMedia';\nimport MoveToFirstAction from '../../MediaList/Actions/MoveToFirst';\nimport MoveToLastAction from '../../MediaList/Actions/MoveToLast';\n\nconst makeActions = ({\n  onOpenAddMediaMenu,\n  onMoveToFirst,\n  onMoveToLast,\n  onEditMedia,\n  onRemoveFromPlaylist,\n  isFiltered,\n}) =>\n  (media, selection, index) => [\n    <AddToPlaylistAction\n      key=\"add\"\n      onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n    />,\n    // Don't show the \"move to first\" action on the first item in the playlist.\n    // If the playlist is filtered we don't know if the first item to show is\n    // also the first in the playlist, so just show it always in that case.\n    (index > 0 || isFiltered) && (\n      <MoveToFirstAction\n        key=\"first\"\n        onFirst={() => onMoveToFirst(media, selection)}\n      />\n    ),\n    (index === 0 && !isFiltered) && (\n      <MoveToLastAction\n        key=\"last\"\n        onLast={() => onMoveToLast(media, selection)}\n      />\n    ),\n    <EditMediaAction\n      key=\"edit\"\n      onEdit={() => onEditMedia(media)}\n    />,\n    <RemoveFromPlaylistAction\n      key=\"remove\"\n      onRemove={() => onRemoveFromPlaylist(media, selection)}\n    />,\n  ];\n\nconst PlaylistPanel = (props) => {\n  const {\n    className,\n    playlist,\n    media,\n    loading,\n    isFiltered,\n    onShufflePlaylist,\n    onActivatePlaylist,\n    onRenamePlaylist,\n    onDeletePlaylist,\n    onNotDeletable,\n    onLoadPlaylistPage,\n    onFilterPlaylistItems,\n    onMoveMedia,\n    onOpenPreviewMediaDialog,\n  } = props;\n\n  let list;\n  if (loading) {\n    list = (\n      <div className=\"PlaylistPanel-loading\">\n        <CircularProgress size=\"100%\" />\n      </div>\n    );\n  } else {\n    list = (\n      <MediaList\n        className=\"PlaylistPanel-media\"\n        size={media.length}\n        media={media}\n        rowComponent={isFiltered ? PlainItemRow : PlaylistItemRow}\n        rowProps={{ onMoveMedia }}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        makeActions={makeActions(props)}\n        onRequestPage={onLoadPlaylistPage}\n      />\n    );\n  }\n\n  return (\n    <div className={cx('PlaylistPanel', className)}>\n      <PlaylistMeta\n        className=\"PlaylistPanel-meta\"\n        id={playlist._id}\n        name={playlist.name}\n        active={playlist.active}\n        onShufflePlaylist={onShufflePlaylist}\n        onActivatePlaylist={onActivatePlaylist}\n        onRenamePlaylist={onRenamePlaylist}\n        onDeletePlaylist={onDeletePlaylist}\n        onNotDeletable={onNotDeletable}\n        onFilter={onFilterPlaylistItems}\n      />\n      {list}\n    </div>\n  );\n};\n\nPlaylistPanel.propTypes = {\n  className: PropTypes.string,\n  playlist: PropTypes.object.isRequired,\n  media: PropTypes.array.isRequired,\n  loading: PropTypes.bool.isRequired,\n  isFiltered: PropTypes.bool.isRequired,\n  onShufflePlaylist: PropTypes.func.isRequired,\n  onActivatePlaylist: PropTypes.func.isRequired,\n  onRenamePlaylist: PropTypes.func.isRequired,\n  onDeletePlaylist: PropTypes.func.isRequired,\n  onLoadPlaylistPage: PropTypes.func.isRequired,\n  onFilterPlaylistItems: PropTypes.func.isRequired,\n  onNotDeletable: PropTypes.func.isRequired,\n  onMoveMedia: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default PlaylistPanel;\n","import { bindActionCreators } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\n\nimport {\n  selectedPlaylistSelector,\n  filteredSelectedPlaylistItemsSelector,\n  isSelectedPlaylistLoadingSelector,\n  isFilteredSelector,\n} from '../selectors/playlistSelectors';\n\nimport { openPreviewMediaDialog } from '../actions/DialogActionCreators';\nimport {\n  addMediaMenu,\n  editMedia,\n  moveMedia,\n  removeMedia,\n  filterPlaylistItems,\n  renamePlaylist,\n  deletePlaylist,\n  cannotDeleteActivePlaylist,\n  shufflePlaylist,\n  activatePlaylist,\n  loadPlaylist,\n  loadFilteredPlaylistItems,\n} from '../actions/PlaylistActionCreators';\n\nimport PlaylistPanel from '../components/PlaylistManager/Panel';\n\nconst mapStateToProps = createStructuredSelector({\n  playlist: selectedPlaylistSelector,\n  media: filteredSelectedPlaylistItemsSelector,\n  loading: isSelectedPlaylistLoadingSelector,\n  isFiltered: isFilteredSelector,\n});\n\nconst selectionOrOne = (media, selection) => {\n  if (selection.isSelected(media)) {\n    return selection.get();\n  }\n  return [media];\n};\n\nconst onOpenAddMediaMenu = (position, media, selection) =>\n  addMediaMenu(selectionOrOne(media, selection), position);\nconst onRemoveFromPlaylist = playlist => (media, selection) =>\n  removeMedia(playlist, selectionOrOne(media, selection));\nconst onMoveMedia = playlist => (media, opts) =>\n  moveMedia(playlist, media, opts);\nconst onMoveToFirst = playlist => (media, selection) =>\n  moveMedia(playlist, selectionOrOne(media, selection), { at: 'start' });\nconst onMoveToLast = playlist => (media, selection) =>\n  moveMedia(playlist, selectionOrOne(media, selection), { at: 'end' });\nconst onEditMedia = playlist => media =>\n  editMedia(playlist, media);\nconst onLoadPlaylistPage = ({ isFiltered, playlist }) => page => (\n  isFiltered ? loadFilteredPlaylistItems(playlist._id, page) :\n    loadPlaylist(playlist._id, page)\n);\n\n// Most of the playlist-related action creators need to know which playlist to\n// use, i.e. need to have a reference to the selected playlist. The selected\n// playlist is picked out in `mapStateToProps`, but we can't access its result\n// in `mapDispatchToProps` yet. Instead, `mapDispatchToProps` passes the\n// `dispatch` function to the `mergeProps` function below, and then that\n// configures the action creators.\n// TODO Maybe it's better to have versions of these action creators that work on\n// the selected playlist by default? using redux-thunk.\nconst mapDispatchToProps = dispatch => ({ dispatch });\n\nconst mergeProps = (state, { dispatch }, props) => ({\n  ...props,\n  ...state,\n  ...bindActionCreators({\n    onShufflePlaylist: shufflePlaylist.bind(null, state.playlist._id),\n    onActivatePlaylist: activatePlaylist.bind(null, state.playlist._id),\n    onRenamePlaylist: renamePlaylist.bind(null, state.playlist._id),\n    onDeletePlaylist: deletePlaylist.bind(null, state.playlist._id),\n    onNotDeletable: cannotDeleteActivePlaylist,\n\n    onOpenAddMediaMenu,\n    onOpenPreviewMediaDialog: openPreviewMediaDialog,\n    onMoveToFirst: onMoveToFirst(state.playlist._id),\n    onMoveToLast: onMoveToLast(state.playlist._id),\n    onMoveMedia: onMoveMedia(state.playlist._id),\n    onEditMedia: onEditMedia(state.playlist._id),\n    onRemoveFromPlaylist: onRemoveFromPlaylist(state.playlist._id),\n    onLoadPlaylistPage: onLoadPlaylistPage(state),\n    onFilterPlaylistItems: filterPlaylistItems.bind(null, state.playlist._id),\n  }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(PlaylistPanel);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport injectMediaSources from '../../../utils/injectMediaSources';\n\nconst PlaylistImport = ({\n  getMediaSource,\n  getAllMediaSources,\n  selectedSourceType,\n  sourceStates,\n  onShowImportPanel,\n  onHideImportPanel,\n}) => {\n  if (selectedSourceType) {\n    const Panel = getMediaSource(selectedSourceType).ImportPanel;\n    const state = sourceStates[selectedSourceType];\n    return (\n      <Panel\n        onClosePanel={onHideImportPanel}\n        {...state}\n      />\n    );\n  }\n\n  const forms = [];\n  const sources = getAllMediaSources();\n  Object.keys(sources).forEach((sourceType) => {\n    const { ImportForm } = sources[sourceType];\n    if (ImportForm) {\n      forms.push((\n        <ImportForm\n          key={sourceType}\n          onShowImportPanel={() => onShowImportPanel(sourceType)}\n          onHideImportPanel={onHideImportPanel}\n        />\n      ));\n    }\n  });\n\n  return (\n    <div className=\"PlaylistImport\">\n      {forms}\n    </div>\n  );\n};\n\nPlaylistImport.propTypes = {\n  selectedSourceType: PropTypes.string,\n  sourceStates: PropTypes.object,\n\n  getMediaSource: PropTypes.func.isRequired,\n  getAllMediaSources: PropTypes.func.isRequired,\n  onShowImportPanel: PropTypes.func.isRequired,\n  onHideImportPanel: PropTypes.func.isRequired,\n};\n\nexport default injectMediaSources()(PlaylistImport);\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport {\n  showImportSourcePanel,\n  hideImportSourcePanel,\n} from '../actions/ImportActionCreators';\nimport { selectedSourceTypeSelector } from '../selectors/importSelectors';\nimport PlaylistImport from '../components/PlaylistManager/Import';\n\nconst mapStateToProps = createStructuredSelector({\n  selectedSourceType: selectedSourceTypeSelector,\n  sourceStates: state => state.sources,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onShowImportPanel: showImportSourcePanel,\n  onHideImportPanel: hideImportSourcePanel,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistImport);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport Typography from 'material-ui/Typography';\nimport NoResultsIcon from '@material-ui/icons/Search';\n\nconst enhance = translate();\n\nconst NoResults = ({ t }) => (\n  <div className=\"SearchResults-none\">\n    <NoResultsIcon className=\"SearchResults-noneIcon\" />\n    <Typography className=\"SearchResults-noneHeader\">{t('playlists.search.noResults')}</Typography>\n    <Typography>{t('playlists.search.noResultsSub')}</Typography>\n  </div>\n);\n\nNoResults.propTypes = {\n  t: PropTypes.func.isRequired,\n};\n\nexport default enhance(NoResults);\n","import React from 'react';\nimport { CircularProgress } from 'material-ui/Progress';\n\nconst LoadingSearchResults = () => (\n  <div className=\"PlaylistPanel-loading\">\n    <CircularProgress size=\"100%\" />\n  </div>\n);\n\nexport default LoadingSearchResults;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MediaList from '../../MediaList';\nimport AddToPlaylistAction from '../../MediaList/Actions/AddToPlaylist';\n\nconst makeActions = onOpenAddMediaMenu => (media, selection) => (\n  <React.Fragment>\n    <AddToPlaylistAction\n      onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n    />\n  </React.Fragment>\n);\n\nconst SearchResultsList = ({\n  results,\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog,\n}) => (\n  <MediaList\n    className=\"PlaylistPanel-media\"\n    media={results}\n    onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n    makeActions={makeActions(onOpenAddMediaMenu)}\n  />\n);\n\nSearchResultsList.propTypes = {\n  results: PropTypes.array.isRequired,\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default SearchResultsList;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { IDLE, LOADING, LOADED } from '../../../constants/LoadingStates';\nimport NoSearchResults from './NoSearchResults';\nimport LoadingSearchResults from './LoadingSearchResults';\nimport SearchResultsList from './SearchResultsList';\n\nconst enhance = translate();\n\nconst SearchResultsPanel = ({\n  t,\n  className,\n  query,\n  loadingState,\n  results,\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog,\n}) => {\n  let list;\n  if (loadingState === LOADED) {\n    list = results.length > 0 ? (\n      <SearchResultsList\n        results={results}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        onOpenAddMediaMenu={onOpenAddMediaMenu}\n      />\n    ) : (\n      <NoSearchResults />\n    );\n  } else {\n    list = (\n      <LoadingSearchResults />\n    );\n  }\n\n  return (\n    <div className={cx('PlaylistPanel', 'SearchResults', className)}>\n      <div className=\"SearchResults-query\">\n        {t('playlists.search.results', { query })}\n      </div>\n      {list}\n    </div>\n  );\n};\n\nSearchResultsPanel.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  query: PropTypes.string.isRequired,\n  loadingState: PropTypes.oneOf([IDLE, LOADING, LOADED]).isRequired,\n  results: PropTypes.arrayOf(PropTypes.object),\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default enhance(SearchResultsPanel);\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { openPreviewMediaDialog } from '../actions/DialogActionCreators';\nimport { addMediaMenu } from '../actions/PlaylistActionCreators';\n\nimport {\n  searchQuerySelector,\n  searchResultsSelector,\n  searchLoadingStateSelector,\n} from '../selectors/searchSelectors';\nimport SearchResults from '../components/PlaylistManager/SearchResults';\n\nconst mapStateToProps = createStructuredSelector({\n  query: searchQuerySelector,\n  results: searchResultsSelector,\n  loadingState: searchLoadingStateSelector,\n});\n\nconst selectionOrOne = (media, selection) => {\n  if (selection.isSelected(media)) {\n    return selection.get();\n  }\n  return [media];\n};\n\nconst onOpenAddMediaMenu = (position, media, selection) =>\n  addMediaMenu(selectionOrOne(media, selection), position);\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog: openPreviewMediaDialog,\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResults);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst enhance = translate();\n\nclass SearchBar extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    children: PropTypes.node,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = { focused: false };\n\n  handleFocus = () => {\n    this.setState({ focused: true });\n  };\n  handleBlur = () => {\n    this.setState({ focused: false });\n  };\n\n  handleKeyDown = (e) => {\n    const { onSubmit } = this.props;\n    if (e.key === 'Enter') {\n      onSubmit(this.input.value);\n    }\n  };\n\n  refInput = (input) => {\n    this.input = input;\n  };\n\n  render() {\n    const { t, children } = this.props;\n    const { focused } = this.state;\n    return (\n      <div className={cx('SearchBar', focused ? 'is-focused' : '', this.props.className)}>\n        <div className=\"SearchBar-icon\">\n          <SearchIcon />\n        </div>\n        {children}\n        <div className=\"SearchBar-query\">\n          <input\n            ref={this.refInput}\n            className=\"SearchBar-input\"\n            type=\"text\"\n            placeholder={focused ? '' : t('playlists.search.action')}\n            onFocus={this.handleFocus}\n            onBlur={this.handleBlur}\n            onKeyDown={this.handleKeyDown}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default enhance(SearchBar);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SourcePickerElement = ({\n  className,\n  name,\n  source,\n  active,\n}) => (\n  <div\n    className={cx(\n      'SourcePickerElement',\n      `SourcePickerElement--${name}`,\n      active && 'SourcePickerElement--active',\n      className,\n    )}\n    style={{ backgroundImage: `url(${source.logo})` }}\n  />\n);\n\nSourcePickerElement.propTypes = {\n  className: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  source: PropTypes.shape({\n    logo: PropTypes.string.isRequired,\n  }).isRequired,\n  active: PropTypes.bool,\n};\n\nexport default SourcePickerElement;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Popover from 'material-ui/Popover';\nimport ArrowIcon from '@material-ui/icons/ArrowDropDown';\nimport injectMediaSources from '../../../utils/injectMediaSources';\nimport SourcePickerElement from './SourcePickerElement';\n\nconst enhance = injectMediaSources();\n\nconst popoverPosition = {\n  anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n  transformOrigin: { vertical: 'top', horizontal: 'left' },\n};\n\nclass SourcePicker extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    selected: PropTypes.string,\n    onChange: PropTypes.func,\n\n    getMediaSource: PropTypes.func.isRequired,\n    getAllMediaSources: PropTypes.func.isRequired,\n  };\n\n  state = { open: false };\n\n  createElement(sourceName) {\n    const { selected, getMediaSource } = this.props;\n    return (\n      <button\n        className=\"SourcePicker-item\"\n        key={sourceName}\n        onClick={() => this.handleChange(sourceName)}\n      >\n        <SourcePickerElement\n          name={sourceName}\n          source={getMediaSource(sourceName)}\n          active={selected === sourceName}\n        />\n      </button>\n    );\n  }\n\n  handleOpen = () => {\n    this.setState({\n      open: true,\n      anchor: this.container,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleChange(sourceName) {\n    this.handleClose();\n    this.props.onChange(sourceName);\n  }\n\n  refContainer = (container) => {\n    this.container = container;\n  };\n\n  render() {\n    const {\n      className,\n      selected,\n      getMediaSource,\n      getAllMediaSources,\n    } = this.props;\n\n    const sourceNames = Object.keys(getAllMediaSources());\n    const sources = sourceNames\n      .filter(name => name !== selected)\n      .map(name => this.createElement(name));\n\n    return (\n      <div\n        className={cx('SourcePicker', className)}\n        ref={this.refContainer}\n      >\n        <button\n          className=\"SourcePicker-active\"\n          onClick={this.handleOpen}\n        >\n          <SourcePickerElement\n            name={selected}\n            source={getMediaSource(selected)}\n            active\n          />\n          <ArrowIcon className=\"SourcePicker-arrow\" />\n        </button>\n        <Popover\n          classes={{ paper: 'SourcePicker-list' }}\n          open={this.state.open}\n          anchorEl={this.state.anchor}\n          onClose={this.handleClose}\n          {...popoverPosition}\n        >\n          {sources}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nexport default enhance(SourcePicker);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BaseSearchBar from '../../SearchBar';\nimport SourcePicker from './SourcePicker';\n\nconst SearchBar = ({\n  className,\n  source,\n  onSubmit,\n  onSourceChange,\n}) => (\n  <BaseSearchBar className={className} onSubmit={onSubmit}>\n    <SourcePicker\n      className=\"SearchBar-source\"\n      selected={source}\n      onChange={onSourceChange}\n    />\n  </BaseSearchBar>\n);\n\nSearchBar.propTypes = {\n  className: PropTypes.string,\n  source: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onSourceChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport SearchBar from '../components/PlaylistManager/Header/SearchBar';\nimport {\n  search,\n  setSource,\n} from '../actions/SearchActionCreators';\nimport { searchSourceTypeSelector } from '../selectors/searchSelectors';\n\nconst mapStateToProps = createStructuredSelector({\n  source: searchSourceTypeSelector,\n});\n\nconst mapDispatchToProps = {\n  onSubmit: search,\n  onSourceChange: setSource,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport OverlayHeader from '../../Overlay/Header';\nimport SearchBar from '../../../containers/MediaSearchBar';\n\nconst enhance = translate();\n\nconst PlaylistManagerHeader = ({\n  t,\n  className,\n  onCloseOverlay,\n}) => (\n  <OverlayHeader\n    className={cx('PlaylistHeader', className)}\n    title={t('playlists.title')}\n    onCloseOverlay={onCloseOverlay}\n  >\n    <SearchBar className=\"PlaylistHeader-search\" />\n  </OverlayHeader>\n);\n\nPlaylistManagerHeader.propTypes = {\n  className: PropTypes.string,\n  t: PropTypes.func.isRequired,\n  onCloseOverlay: PropTypes.func.isRequired,\n};\n\nexport default enhance(PlaylistManagerHeader);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\n\nconst EmptyPanel = ({ t, className }) => (\n  <div className={cx('PlaylistPanel', 'PlaylistPanel--empty', className)}>\n    {t('playlists.noPlaylists')}\n  </div>\n);\n\nEmptyPanel.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default translate()(EmptyPanel);\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport OverlayContent from '../Overlay/Content';\nimport PlaylistMenu from '../../containers/PlaylistManagerMenu';\nimport PlaylistPanel from '../../containers/PlaylistManagerPanel';\nimport PlaylistImport from '../../containers/PlaylistImportManager';\nimport SearchResults from '../../containers/SearchResultsPanel';\nimport PlaylistHeader from './Header';\nimport PlaylistPanelEmpty from './Panel/Empty';\n\nconst PlaylistManager = ({\n  className,\n  selectedPlaylist,\n  showSearchResults,\n  showImportPanel,\n  onCloseOverlay,\n}) => {\n  let panel;\n  if (showImportPanel) {\n    panel = (\n      <div className=\"PlaylistPanel\">\n        <PlaylistImport />\n      </div>\n    );\n  } else if (showSearchResults) {\n    panel = <SearchResults />;\n  } else if (selectedPlaylist) {\n    // HACK Give this a key so it's remounted when you switch playlists.\n    // This is because there is some statefulness down the tree, especially\n    // in playlist filters and scroll position.\n    // By forcing a remount using a key we throw away all state and keep it\n    // consistent.\n    // TODO To *actually* fix playlist filters bleeding across playlist lines,\n    // we should reset the playlist filter state alone somehow when the\n    // selected playlist changes.\n    panel = <PlaylistPanel key={selectedPlaylist._id} />;\n  } else {\n    panel = <PlaylistPanelEmpty />;\n  }\n\n  return (\n    <div className={cx('PlaylistManager', className)}>\n      <PlaylistHeader\n        className=\"PlaylistManager-header AppRow AppRow--top\"\n        onCloseOverlay={onCloseOverlay}\n      />\n\n      <OverlayContent>\n        <PlaylistMenu className=\"PlaylistManager-menu\" />\n        <div className=\"PlaylistManager-panel\">\n          {panel}\n        </div>\n      </OverlayContent>\n    </div>\n  );\n};\n\nPlaylistManager.propTypes = {\n  className: PropTypes.string,\n  selectedPlaylist: PropTypes.object,\n  showSearchResults: PropTypes.bool.isRequired,\n  showImportPanel: PropTypes.bool.isRequired,\n  onCloseOverlay: PropTypes.func,\n};\n\nexport default PlaylistManager;\n","import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog, { DialogContent } from 'material-ui/Dialog';\nimport { CircularProgress } from 'material-ui/Progress';\nimport Form from '../../Form';\nimport FormGroup from '../../Form/Group';\nimport Button from '../../Form/Button';\n\nexport default class ConfirmDialog extends React.Component {\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    confirmLabel: PropTypes.string,\n    cancelLabel: PropTypes.string,\n\n    onConfirm: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    cancelLabel: 'Cancel',\n    confirmLabel: 'OK',\n  };\n\n  state = {\n    busy: false,\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n  };\n\n  handleConfirm = (event) => {\n    event.preventDefault();\n    const promise = this.props.onConfirm();\n    if (promise && promise.then) {\n      this.setState({ busy: true });\n      const onDone = () => {\n        this.setState({ busy: false });\n      };\n      promise.then(onDone, onDone);\n    }\n  };\n\n  handleClose = (event) => {\n    if (event && event.preventDefault) {\n      event.preventDefault();\n    }\n    this.props.onCancel();\n  };\n\n  render() {\n    const {\n      children,\n      cancelLabel,\n      confirmLabel,\n      className,\n    } = this.props;\n    const { busy } = this.state;\n\n    return (\n      <Dialog\n        className={cx('Dialog', className)}\n        onClose={this.handleClose}\n        open\n      >\n        <DialogContent className=\"Dialog-body\">\n          <Form onSubmit={this.handleSubmit}>\n            {children}\n            <FormGroup className=\"ConfirmDialog-buttons FormGroup--noSpacing\">\n              <div className=\"ConfirmDialog-button\">\n                <Button disabled={busy} onClick={this.handleClose}>\n                  {cancelLabel}\n                </Button>\n              </div>\n              <div className=\"ConfirmDialog-spacer\" />\n              <div className=\"ConfirmDialog-button\">\n                <Button disabled={busy} onClick={this.handleConfirm}>\n                  {busy ? <div className=\"Button-loading\"><CircularProgress size=\"100%\" /></div> : confirmLabel}\n                </Button>\n              </div>\n            </FormGroup>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n}\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\n\nexport default createSvgIcon(React.createElement(\n  'g',\n  null,\n  React.createElement('path', { d: 'M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z' })\n), 'ModeEdit');"],"sourceRoot":""}