{"version":3,"sources":["store/configureStore.js"],"names":["applyMiddleware","combineReducers","compose","createStore","thunk","logger","batchedSubscribe","nanoraf","raf","persistSettings","webApiRequest","webApiSocket","reducers","createSourcesReducer","createUwaveStore","initialState","options","isTesting","process","env","NODE_ENV","enableLogging","rerender","notify","middleware","url","socketUrl","filter","Boolean","currentReducers","sources","store","module","hot","accept","replaceReducer","mount","name","reducer"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,OAA3C,EAAoDC,WAApD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,aAAP,MAA0B,WAA1B;AACA,OAAOC,YAAP,MAAyB,UAAzB;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;;AAEA;AACA;AACA;;AAEA,eAAe,SAASC,gBAAT,GAA2D;AAAA,MAAjCC,YAAiC,uEAAlB,EAAkB;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACxE,MAAMC,YAAYC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,SAA3C;AACA,MAAMC,gBAAgBH,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACH,SAAhE;;AAEA,MAAMK,WAAWf,QAAQ,UAACgB,MAAD,EAAY;AACnCA;AACD,GAFgB,EAEdf,GAFc,CAAjB;;AAIA,MAAMgB,aAAa;AACjB;AACA;AACA;AACA;AACA;AACApB,OANiB;AAOjB;AACA;AACAM,iBATiB,EAUjB,CAACO,SAAD,IAAcN,aAAa,EAAEc,KAAKT,QAAQU,SAAf,EAAb,CAVG;AAWjB;AACA;AACA;AACAL,mBAAiBhB,MAdA,EAejBsB,MAfiB,CAeVC,OAfU,CAAnB;;AAiBA,MAAIC,+BACCjB,QADD;AAEFkB,aAASjB,qBAAqBG,OAArB;AAFP,IAAJ;;AAKA,MAAMe,QAAQ5B;AACZ;AACA;AACAF,kBAAgB4B,eAAhB,CAHY,EAIZd,YAJY,EAKZb;AACE;AACAF,mCAAmBwB,UAAnB,CAFF;AAGE;AACA;AACA;AACA;AACAf,iBAPF,EAQEH,iBAAiBgB,QAAjB,CARF,CALY,CAAd;;AAiBA,MAAIJ,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CY,OAAOC,GAArD,EAA0D;AACxD;AACA;AACA;AACAD,WAAOC,GAAP,CAAWC,MAAX,CAAkB,aAAlB,EAAiC,YAAM;AACrCH,YAAMI,cAAN,CAAqBlC,6BAChBW,QADgB;AAEnBkB,iBAASjB,qBAAqBG,OAArB;AAFU,SAArB;AAID,KALD;AAMD;;AAEDe,QAAMK,KAAN,GAAc,UAACC,IAAD,EAAOC,OAAP,EAAmB;AAAA;;AAC/BT,mCACKA,eADL,6BAEGQ,IAFH,IAEUC,OAFV;AAIAP,UAAMI,cAAN,CAAqBlC,gBAAgB4B,eAAhB,CAArB;AACD,GAND;;AAQA,SAAOE,KAAP;AACD","file":"configureStore.js","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { batchedSubscribe } from 'redux-batched-subscribe';\nimport nanoraf from 'nanoraf';\nimport raf from 'raf';\nimport persistSettings from './persistSettings';\nimport webApiRequest from './request';\nimport webApiSocket from './socket';\nimport * as reducers from '../reducers';\nimport createSourcesReducer from '../reducers/createSourcesReducer';\n\n// Setting up a store in Redux can be kind of messy because there are a lot of\n// things coming together in one place. Luckily, we don't have _that_ much going\n// on in üWave, so it's kind of manageable.\n\nexport default function createUwaveStore(initialState = {}, options = {}) {\n  const isTesting = process.env.NODE_ENV === 'testing';\n  const enableLogging = process.env.NODE_ENV !== 'production' && !isTesting;\n\n  const rerender = nanoraf((notify) => {\n    notify();\n  }, raf);\n\n  const middleware = [\n    // Redux-Thunk allows dispatching a function to the store instead of an\n    // action object. These functions can then dispatch action objects as they\n    // please. It's used primarily for async actions: for example, actions that\n    // send HTTP requests. Those might dispatch an action object once the\n    // request finishes.\n    thunk,\n    // This allows dispatching REQUEST_START actions to the store, which will\n    // then be executed and handled as HTTP requests by the middleware.\n    webApiRequest(),\n    !isTesting && webApiSocket({ url: options.socketUrl }),\n    // Redux-Logger logs state changes to the console, including the\n    // Before-state, the Action object, and the After-state. Invaluable for\n    // debugging :)\n    enableLogging && logger,\n  ].filter(Boolean);\n\n  let currentReducers = {\n    ...reducers,\n    sources: createSourcesReducer(options),\n  };\n\n  const store = createStore(\n    // Finish up the reducer function by combining all the different reducers\n    // into one big reducer that works on one big state object.\n    combineReducers(currentReducers),\n    initialState,\n    compose(\n      // Adds all of the above ☝ middleware features to the store.\n      applyMiddleware(...middleware),\n      // Keeps the user's settings in localStorage, so that a refresh doesn't\n      // reset all your preferences.\n      // This is done separately from the Middleware features, because it changes\n      // the _initial_ `settings` state, something that Middleware can't do.\n      persistSettings,\n      batchedSubscribe(rerender),\n    ),\n  );\n\n  if (process.env.NODE_ENV === 'development' && module.hot) {\n    // Update the store's reducer function when the reducer source code has\n    // changed. See /tasks/watch.js for more on Hot Reloading!\n    // This is only used when debugging, not in a deployed app.\n    module.hot.accept('../reducers', () => {\n      store.replaceReducer(combineReducers({\n        ...reducers,\n        sources: createSourcesReducer(options),\n      }));\n    });\n  }\n\n  store.mount = (name, reducer) => {\n    currentReducers = {\n      ...currentReducers,\n      [name]: reducer,\n    };\n    store.replaceReducer(combineReducers(currentReducers));\n  };\n\n  return store;\n}\n"]}