{"version":3,"sources":["store/socket.js"],"names":["createDebug","WebSocket","LOGIN_COMPLETE","SOCKET_CONNECT","SOCKET_RECONNECT","SOCKET_DISCONNECTED","SOCKET_CONNECTED","SEND_MESSAGE","DO_UPVOTE","DO_DOWNVOTE","SHOULD_RANDOMIZE","advance","receive","chatReceive","removeMessage","removeMessagesByUser","removeAllMessages","muteUser","chatMute","unmuteUser","chatUnmute","cyclePlaylist","join","userJoin","leave","userLeave","changeUsername","changeUserRole","receiveGuestCount","clearWaitlist","joinedWaitlist","leftWaitlist","updatedWaitlist","movedInWaitlist","setLocked","setWaitlistLocked","favorited","receiveVote","debug","defaultUrl","loc","window","location","port","protocol","hostname","actions","chatMessage","id","userID","message","timestamp","_id","text","chatDelete","chatDeleteByID","chatDeleteByUser","expiresAt","moderatorID","booth","favorite","historyID","vote","value","waitlistJoin","waitlist","waitlistLeave","waitlistUpdate","waitlistLock","locked","waitlistMove","position","waitlistAdd","waitlistRemove","waitlistClear","playlistCycle","playlistID","user","nameChange","username","roleChange","role","guests","type","payload","middleware","url","dispatch","getState","socket","queue","sentJWT","opened","isOpen","sendJWT","jwt","send","maybeAuthenticateOnConnect","state","auth","command","data","JSON","stringify","push","drainQueuedMessages","messages","forEach","msg","onOpen","onClose","onMessage","pack","parse","action","error","next","close","undefined","keepClosed","addEventListener"],"mappings":"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","file":"socket.js","sourcesContent":["import createDebug from 'debug';\nimport WebSocket from 'reconnecting-websocket';\n\nimport {\n  LOGIN_COMPLETE,\n  SOCKET_CONNECT,\n  SOCKET_RECONNECT,\n  SOCKET_DISCONNECTED,\n  SOCKET_CONNECTED\n} from '../constants/actionTypes/auth';\nimport {\n  SEND_MESSAGE\n} from '../constants/actionTypes/chat';\nimport {\n  DO_UPVOTE,\n  DO_DOWNVOTE\n} from '../constants/actionTypes/votes';\nimport {\n  SHOULD_RANDOMIZE\n} from '../_wlk/constants';\n\nimport { advance } from '../actions/BoothActionCreators';\nimport {\n  receive as chatReceive,\n  removeMessage,\n  removeMessagesByUser,\n  removeAllMessages,\n  muteUser as chatMute,\n  unmuteUser as chatUnmute\n} from '../actions/ChatActionCreators';\nimport { cyclePlaylist } from '../actions/PlaylistActionCreators';\nimport {\n  join as userJoin,\n  leave as userLeave,\n  changeUsername,\n  changeUserRole,\n  receiveGuestCount\n} from '../actions/UserActionCreators';\nimport {\n  clearWaitlist,\n  joinedWaitlist,\n  leftWaitlist,\n  updatedWaitlist,\n  movedInWaitlist,\n  setLocked as setWaitlistLocked\n} from '../actions/WaitlistActionCreators';\nimport { favorited, receiveVote } from '../actions/VoteActionCreators';\n\nconst debug = createDebug('uwave:websocket');\n\nfunction defaultUrl() {\n  const loc = window.location;\n  const port = loc.port || (loc.protocol === 'https:' ? 443 : 80);\n  const protocol = loc.protocol === 'https:' ? 'wss:' : 'ws:';\n  return `${protocol}//${loc.hostname}:${port}`;\n}\n\nconst actions = {\n  chatMessage({\n    id, userID, message, timestamp\n  }) {\n    return chatReceive({\n      _id: id,\n      userID,\n      text: message,\n      timestamp\n    });\n  },\n  chatDelete() {\n    return removeAllMessages();\n  },\n  chatDeleteByID({ _id }) {\n    return removeMessage(_id);\n  },\n  chatDeleteByUser({ userID }) {\n    return removeMessagesByUser(userID);\n  },\n  chatMute({ userID, expiresAt, moderatorID }) {\n    return chatMute(userID, { moderatorID, expiresAt });\n  },\n  chatUnmute({ userID, moderatorID }) {\n    return chatUnmute(userID, { moderatorID });\n  },\n  advance(booth) {\n    return advance(booth);\n  },\n  favorite({ userID, historyID }) {\n    return favorited({ userID, historyID });\n  },\n  vote({ _id, value }) {\n    return receiveVote({ userID: _id, vote: value });\n  },\n  waitlistJoin({ userID, waitlist }) {\n    return joinedWaitlist({ userID, waitlist });\n  },\n  waitlistLeave({ userID, waitlist }) {\n    return leftWaitlist({ userID, waitlist });\n  },\n  waitlistUpdate(waitlist) {\n    return updatedWaitlist(waitlist);\n  },\n  waitlistLock({ locked }) {\n    return setWaitlistLocked(locked);\n  },\n  waitlistMove({\n    userID, moderatorID, position, waitlist\n  }) {\n    return movedInWaitlist({\n      userID, moderatorID, position, waitlist\n    });\n  },\n  // TODO Treat moderator force-add and force-remove differently from voluntary\n  // joins and leaves.\n  waitlistAdd({ userID, waitlist }) {\n    return joinedWaitlist({ userID, waitlist });\n  },\n  waitlistRemove({ userID, waitlist }) {\n    return leftWaitlist({ userID, waitlist });\n  },\n  waitlistClear() {\n    return clearWaitlist();\n  },\n  playlistCycle({ playlistID }) {\n    return cyclePlaylist(playlistID);\n  },\n  join(user) {\n    return userJoin(user);\n  },\n  leave(userID) {\n    return userLeave(userID);\n  },\n  nameChange({ userID, username }) {\n    return changeUsername(userID, username);\n  },\n  roleChange({ userID, role }) {\n    return changeUserRole(userID, role);\n  },\n  guests: receiveGuestCount,\n\n  'wlk:shouldRandomize': ({ value }) => ({\n    type: SHOULD_RANDOMIZE,\n    payload: value\n  })\n};\n\nexport default function middleware({ url = defaultUrl() } = {}) {\n  return ({ dispatch, getState }) => {\n    let socket;\n    let queue = [];\n    let sentJWT = false;\n    let opened = false;\n\n    function isOpen() {\n      return socket && opened;\n    }\n\n    function sendJWT(jwt) {\n      socket.send(jwt);\n      sentJWT = true;\n    }\n\n    function maybeAuthenticateOnConnect(state) {\n      const { jwt } = state.auth;\n      debug('open', jwt);\n      if (jwt) {\n        sendJWT(jwt);\n      } else {\n        sentJWT = false;\n      }\n    }\n\n    function send(command, data) {\n      if (isOpen()) {\n        socket.send(JSON.stringify({ command, data }));\n      } else {\n        queue.push({ command, data });\n      }\n    }\n\n    function drainQueuedMessages() {\n      const messages = queue;\n      queue = [];\n      messages.forEach((msg) => {\n        send(msg.command, msg.data);\n      });\n    }\n\n    function onOpen() {\n      opened = true;\n      dispatch({ type: SOCKET_CONNECTED });\n      maybeAuthenticateOnConnect(getState());\n    }\n\n    function onClose() {\n      opened = false;\n      dispatch({ type: SOCKET_DISCONNECTED });\n    }\n\n    function onMessage(pack) {\n      // Ignore keepalive messages.\n      if (pack.data === '-') return;\n\n      const { command, data } = JSON.parse(pack.data);\n      debug(command, data);\n\n      if (command === 'authenticated') {\n        drainQueuedMessages();\n        return;\n      }\n\n      if (typeof actions[command] === 'function') {\n        const action = actions[command](data);\n        if (action) {\n          dispatch(action);\n          return;\n        }\n      }\n      debug('!unknown socket message type');\n    }\n\n    return next => (action) => {\n      const { type, payload, error } = action;\n\n      if (error) {\n        next(action);\n        return;\n      }\n\n      switch (type) {\n      case SOCKET_RECONNECT:\n        if (socket) {\n          socket.close(undefined, undefined, { keepClosed: true });\n        }\n        // fall through\n      case SOCKET_CONNECT:\n        socket = new WebSocket(url);\n        socket.addEventListener('message', onMessage);\n        socket.addEventListener('open', onOpen);\n        socket.addEventListener('close', onClose);\n        socket.addEventListener('connecting', onClose);\n        break;\n      case SEND_MESSAGE:\n        send('sendChat', payload.message);\n        break;\n      case DO_UPVOTE:\n        send('vote', 1);\n        break;\n      case DO_DOWNVOTE:\n        send('vote', -1);\n        break;\n      case LOGIN_COMPLETE:\n        if (!sentJWT && isOpen()) {\n          sendJWT(payload.jwt);\n        }\n        break;\n      default:\n        break;\n      }\n      next(action);\n    };\n  };\n}\n"]}