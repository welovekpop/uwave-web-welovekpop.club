{"version":3,"sources":["selectors/chatSelectors.js"],"names":["createSelector","createStructuredSelector","objMap","parseChatMarkup","getAvailableGroupMentions","availableEmojiNamesSelector","availableEmojiImagesSelector","usersSelector","currentUserSelector","currentUserHasRoleSelector","createRoleCheckSelector","notificationSettingsSelector","baseSelector","state","chat","rawMotdSelector","motd","motdSelector","MAX_MESSAGES","allMessagesSelector","messages","filteredMessagesSelector","notificationSettings","filter","message","type","userJoin","userLeave","userNameChanged","skip","messagesSelector","slice","markupCompilerOptionsSelector","availableEmoji","emojiImages","mutesSelector","mutedUsers","muteTimeoutsSelector","mutes","mute","expirationTimer","mutedUserIDsSelector","Object","keys","mutedUsersSelector","mutedIDs","users","map","userID","currentUserMuteSelector","user","_id","availableGroupMentionsSelector","hasRole","mention","emojiCompletionsSelector","images","shortcode","name","image","canDeleteMessagesSelector"],"mappings":"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","file":"chatSelectors.js","sourcesContent":["import { createSelector, createStructuredSelector } from 'reselect';\nimport objMap from 'object.map';\nimport parseChatMarkup from 'u-wave-parse-chat-markup';\n\nimport {\n  getAvailableGroupMentions,\n} from '../utils/chatMentions';\nimport {\n  availableEmojiNamesSelector,\n  availableEmojiImagesSelector,\n} from './configSelectors';\nimport {\n  usersSelector,\n  currentUserSelector,\n  currentUserHasRoleSelector,\n  createRoleCheckSelector,\n} from './userSelectors';\nimport {\n  notificationSettingsSelector,\n} from './settingSelectors';\n\nconst baseSelector = state => state.chat;\n\nexport const rawMotdSelector = createSelector(baseSelector, chat => chat.motd);\nexport const motdSelector = createSelector(rawMotdSelector, parseChatMarkup);\n\nconst MAX_MESSAGES = 500;\nconst allMessagesSelector = createSelector(baseSelector, chat => chat.messages);\nconst filteredMessagesSelector = createSelector(\n  allMessagesSelector,\n  notificationSettingsSelector,\n  (messages, notificationSettings) => messages.filter((message) => {\n    if (message.type === 'userJoin') return notificationSettings.userJoin;\n    if (message.type === 'userLeave') return notificationSettings.userLeave;\n    if (message.type === 'userNameChanged') return notificationSettings.userNameChanged;\n    if (message.type === 'skip') return notificationSettings.skip;\n    return true;\n  }),\n);\nexport const messagesSelector = createSelector(\n  filteredMessagesSelector,\n  messages => messages.slice(-MAX_MESSAGES),\n);\n\nexport const markupCompilerOptionsSelector = createStructuredSelector({\n  availableEmoji: availableEmojiNamesSelector,\n  emojiImages: availableEmojiImagesSelector,\n});\n\nconst mutesSelector = createSelector(baseSelector, chat => chat.mutedUsers);\n\nexport const muteTimeoutsSelector = createSelector(\n  mutesSelector,\n  mutes => objMap(mutes, mute => mute.expirationTimer),\n);\n\nexport const mutedUserIDsSelector = createSelector(\n  mutesSelector,\n  mutes => Object.keys(mutes),\n);\n\nexport const mutedUsersSelector = createSelector(\n  mutedUserIDsSelector,\n  usersSelector,\n  (mutedIDs, users) => mutedIDs.map(userID => users[userID]),\n);\n\nexport const currentUserMuteSelector = createSelector(\n  currentUserSelector,\n  mutesSelector,\n  (user, mutes) => (user ? mutes[user._id] : null),\n);\n\nexport const availableGroupMentionsSelector = createSelector(\n  currentUserHasRoleSelector,\n  hasRole => getAvailableGroupMentions(mention => hasRole(`chat.mention.${mention}`)),\n);\n\nexport const emojiCompletionsSelector = createSelector(\n  availableEmojiImagesSelector,\n  images => Object.keys(images).map(name => ({\n    shortcode: name,\n    image: images[name],\n  })),\n);\n\nexport const canDeleteMessagesSelector = createRoleCheckSelector('chat.delete');\n"]}