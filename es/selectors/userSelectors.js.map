{"version":3,"sources":["selectors/userSelectors.js"],"names":["createSelector","naturalCmp","values","rolesSelector","authSelector","state","auth","usersBaseSelector","users","usersSelector","base","authErrorSelector","error","currentUserIDSelector","user","currentUserSelector","userID","isLoggedInSelector","Boolean","tokenSelector","token","authStrategiesSelector","strategies","supportsAuthStrategy","name","indexOf","supportsSocialAuthSelector","support","some","superUserRoleSelector","getAllUserRoles","roles","getSubRoles","subRoles","role","reduce","compareUsers","superuser","a","b","aRoles","bRoles","length","username","toLowerCase","userListSelector","superuserRole","sort","userCountSelector","guestCountSelector","guests","listenerCountSelector","userHasRoleSelector","superUserRole","userRoles","hasRoleSelector","userHasRole","currentUserHasRoleSelector","createRoleCheckSelector","hasRole","isModeratorSelector","isManagerSelector"],"mappings":"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","file":"userSelectors.js","sourcesContent":["import { createSelector } from 'reselect';\nimport naturalCmp from 'natural-compare';\nimport values from 'object-values';\nimport { rolesSelector } from './configSelectors';\n\nconst authSelector = state => state.auth;\n\nconst usersBaseSelector = state => state.users;\nexport const usersSelector = createSelector(usersBaseSelector, base => base.users);\n\nexport const authErrorSelector = createSelector(authSelector, auth => auth.error);\nconst currentUserIDSelector = createSelector(authSelector, auth => auth.user);\nexport const currentUserSelector = createSelector(\n  usersSelector,\n  currentUserIDSelector,\n  (users, userID) => (\n    userID in users\n      ? users[userID]\n      : null\n  ),\n);\nexport const isLoggedInSelector = createSelector(currentUserSelector, Boolean);\nexport const tokenSelector = createSelector(authSelector, auth => auth.token);\nexport const authStrategiesSelector = createSelector(authSelector, auth => auth.strategies);\nexport function supportsAuthStrategy(name) {\n  return createSelector(authStrategiesSelector, strategies => strategies.indexOf(name) !== -1);\n}\nexport const supportsSocialAuthSelector = createSelector(\n  supportsAuthStrategy('google'),\n  (...support) => support.some(Boolean),\n);\n\n// The Super User role allows a user to do everything. It's hardcoded as the \"*\"\n// role.\nconst superUserRoleSelector = () => '*';\n\n// Flatten a user's roles.\nfunction getAllUserRoles(roles, user) {\n  function getSubRoles(subRoles, role) {\n    // Recursive Reduce!\n    return roles[role].reduce(\n      getSubRoles,\n      [role, ...subRoles],\n    );\n  }\n  return user.roles ? user.roles.reduce(getSubRoles, []) : [];\n}\n\nfunction compareUsers(roles, superuser) {\n  return (a, b) => {\n    const aRoles = getAllUserRoles(roles, a);\n    const bRoles = getAllUserRoles(roles, b);\n    // Sort superusers to the top,\n    if (aRoles.indexOf(superuser) !== -1) {\n      return -1;\n    }\n    if (bRoles.indexOf(superuser) !== -1) {\n      return 1;\n    }\n    // other users by the amount of permissions they have,\n    if (aRoles.length > bRoles.length) {\n      return -1;\n    }\n    if (aRoles.length < bRoles.length) {\n      return 1;\n    }\n    // and sort by username if the roles are equal.\n    return naturalCmp(a.username.toLowerCase(), b.username.toLowerCase());\n  };\n}\n\nexport const userListSelector = createSelector(\n  rolesSelector,\n  superUserRoleSelector,\n  usersSelector,\n  (roles, superuserRole, users) =>\n    values(users).sort(compareUsers(roles, superuserRole)),\n);\n\nexport const userCountSelector = createSelector(\n  userListSelector,\n  users => users.length,\n);\n\nexport const guestCountSelector = createSelector(\n  usersBaseSelector,\n  base => base.guests,\n);\n\nexport const listenerCountSelector = createSelector(\n  userCountSelector,\n  guestCountSelector,\n  (users, guests) => users + guests,\n);\n\nexport const userHasRoleSelector = createSelector(\n  rolesSelector,\n  superUserRoleSelector,\n  (roles, superUserRole) => (user) => {\n    // If there is no authenticated user, we always return false.\n    if (!user) {\n      return () => false;\n    }\n\n    const userRoles = getAllUserRoles(roles, user);\n    // If this is a super user, we always return true.\n    if (userRoles.indexOf(superUserRole) !== -1) {\n      return () => true;\n    }\n\n    return role => userRoles.indexOf(role) !== -1;\n  },\n);\n\n// Selects a function that checks if a user has the given role.\n//\n//   const hasRole = hasRoleSelector(getState());\n//   hasRole(user, 'waitlist.join');\n//\nexport const hasRoleSelector = createSelector(\n  userHasRoleSelector,\n  userHasRole =>\n    (user, role) => userHasRole(user)(role),\n);\n\nexport const currentUserHasRoleSelector = createSelector(\n  userHasRoleSelector,\n  currentUserSelector,\n  (userHasRole, user) => userHasRole(user),\n);\n\n// Creates a selector that will check if the current user has a given role.\n//\n//   createRoleCheckSelector('some.role')(store.getState()) // â†’ true/false\n//\nexport const createRoleCheckSelector = role => createSelector(\n  currentUserHasRoleSelector,\n  hasRole => hasRole(role),\n);\n\n// Selectors for compatibility with the old role system.\n// TODO All uses of these selectors should be phased out in favour of more\n// specific roles in the future.\nexport const isModeratorSelector = createRoleCheckSelector('moderator');\nexport const isManagerSelector = createRoleCheckSelector('manager');\n"]}