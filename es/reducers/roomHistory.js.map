{"version":3,"sources":["reducers/roomHistory.js"],"names":["ADVANCE","LOAD_HISTORY_COMPLETE","initialState","normalize","_id","entry","historyID","user","media","timestamp","Date","playedAt","getTime","stats","upvotes","downvotes","favorites","reduce","state","action","type","payload","meta","map","mostRecent","slice","previous"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,qBAAlB,QAA+C,gCAA/C;;AAEA,IAAMC,eAAe,EAArB;;AAEA,IAAMC,YAAY,SAAZA,SAAY;AAAA,SAAU;AAC1BC,SAAKC,MAAMD,GAAN,IAAaC,MAAMC,SADE;AAE1BC,UAAMF,MAAME,IAFc;AAG1BC,wBACKH,MAAMG,KAAN,CAAYA,KADjB,EAEKH,MAAMG,KAFX,CAH0B;AAO1BC,eAAW,IAAIC,IAAJ,CAASL,MAAMI,SAAN,IAAmBJ,MAAMM,QAAlC,EAA4CC,OAA5C,EAPe;AAQ1BC,WAAOR,MAAMQ,KAAN,IAAe;AACpBC,eAAST,MAAMS,OAAN,IAAiB,EADN;AAEpBC,iBAAWV,MAAMU,SAAN,IAAmB,EAFV;AAGpBC,iBAAWX,MAAMW,SAAN,IAAmB;AAHV;AARI,GAAV;AAAA,CAAlB;;AAeA,eAAe,SAASC,MAAT,GAAmD;AAAA,MAAnCC,KAAmC,uEAA3BhB,YAA2B;AAAA,MAAbiB,MAAa,uEAAJ,EAAI;AAAA,MACxDC,IADwD,GAChCD,MADgC,CACxDC,IADwD;AAAA,MAClDC,OADkD,GAChCF,MADgC,CAClDE,OADkD;AAAA,MACzCC,IADyC,GAChCH,MADgC,CACzCG,IADyC;;AAEhE,UAAQF,IAAR;AACA,SAAKnB,qBAAL;AACE,aAAOoB,QAAQE,GAAR,CAAYpB,SAAZ,CAAP;AACF,SAAKH,OAAL;AAAc;AACZ,YAAMwB,aAAaN,MAAM,CAAN,CAAnB;AACA;AACA;AACA;AACA,YAAIM,cAAcH,OAAd,IAAyBG,WAAWpB,GAAX,KAAmBiB,QAAQf,SAAxD,EAAmE;AACjE,iBAAOY,MAAMO,KAAN,CAAY,CAAZ,CAAP;AACD;AACD,YAAI,CAACH,IAAD,IAAS,CAACA,KAAKI,QAAnB,EAA6B;AAC3B,iBAAOR,KAAP;AACD;AACD,gBAASf,UAAUmB,KAAKI,QAAf,CAAT,SAAsCR,KAAtC;AACD;AACD;AACE,aAAOA,KAAP;AAjBF;AAmBD","file":"roomHistory.js","sourcesContent":["import { ADVANCE, LOAD_HISTORY_COMPLETE } from '../constants/actionTypes/booth';\n\nconst initialState = [];\n\nconst normalize = entry => ({\n  _id: entry._id || entry.historyID,\n  user: entry.user,\n  media: {\n    ...entry.media.media,\n    ...entry.media\n  },\n  timestamp: new Date(entry.timestamp || entry.playedAt).getTime(),\n  stats: entry.stats || {\n    upvotes: entry.upvotes || [],\n    downvotes: entry.downvotes || [],\n    favorites: entry.favorites || []\n  }\n});\n\nexport default function reduce(state = initialState, action = {}) {\n  const { type, payload, meta } = action;\n  switch (type) {\n  case LOAD_HISTORY_COMPLETE:\n    return payload.map(normalize);\n  case ADVANCE: {\n    const mostRecent = state[0];\n    // If the currently playing track is already in the history, remove it--\n    // it'll be added back on the next advance, and will be handled by the\n    // roomHistorySelector in the mean time.\n    if (mostRecent && payload && mostRecent._id === payload.historyID) {\n      return state.slice(1);\n    }\n    if (!meta || !meta.previous) {\n      return state;\n    }\n    return [ normalize(meta.previous), ...state ];\n  }\n  default:\n    return state;\n  }\n}\n"]}