{"version":3,"sources":["reducers/chat.js"],"names":["except","RECEIVE_MOTD","RECEIVE_MESSAGE","SEND_MESSAGE","LOG","REMOVE_MESSAGE","REMOVE_USER_MESSAGES","REMOVE_ALL_MESSAGES","MUTE_USER","UNMUTE_USER","reduceNotifications","initialState","motd","messages","mutedUsers","removeInFlightMessage","remove","filter","message","inFlight","userID","text","reduce","state","action","type","payload","inFlightMessage","_id","Date","now","user","parsedText","parsed","timestamp","isMention","concat","logMessage","msg","mutedBy","moderatorID","expiresAt","expirationTimer","nextMessages"],"mappings":"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","sourcesContent":["import except from 'except';\nimport {\n  RECEIVE_MOTD,\n  RECEIVE_MESSAGE,\n  SEND_MESSAGE,\n  LOG,\n  REMOVE_MESSAGE,\n  REMOVE_USER_MESSAGES,\n  REMOVE_ALL_MESSAGES,\n  MUTE_USER,\n  UNMUTE_USER,\n} from '../constants/ActionTypes';\nimport reduceNotifications from './chat/notifications';\n\nconst initialState = {\n  /**\n   * Message of the Day, a message shown at the very top of the Chat box. Can be\n   * used for announcements, for example, or a welcome message.\n   */\n  motd: '',\n  /**\n   * All messages, including log messages and in-flight messages.\n   */\n  messages: [],\n  /**\n   * Mutes and their expiration times.\n   */\n  mutedUsers: {},\n};\n\nfunction removeInFlightMessage(messages, remove) {\n  return messages.filter(message => (\n    // keep if this message is not in flight\n    !message.inFlight ||\n    // or is not the message we're looking for\n    message.userID !== remove.userID ||\n    message.text !== remove.text\n  ));\n}\n\nexport default function reduce(state = initialState, action = {}) {\n  const { type, payload } = action;\n  const { messages } = state;\n  switch (type) {\n    case RECEIVE_MOTD:\n      return {\n        ...state,\n        motd: payload,\n      };\n    case SEND_MESSAGE: {\n      const inFlightMessage = {\n        _id: `inflight${Date.now()}`,\n        type: 'chat',\n        user: payload.user,\n        userID: payload.user._id,\n        text: payload.message,\n        parsedText: payload.parsed,\n        timestamp: Date.now(),\n        inFlight: true,\n        // Will be resolved when the message is received instead.\n        isMention: false,\n      };\n      return {\n        ...state,\n        messages: messages.concat([inFlightMessage]),\n      };\n    }\n    case RECEIVE_MESSAGE: {\n      const message = {\n        ...payload.message,\n        type: 'chat',\n        inFlight: false,\n        parsedText: payload.parsed,\n        isMention: payload.isMention,\n      };\n\n      return {\n        ...state,\n        messages: removeInFlightMessage(messages, message).concat([message]),\n      };\n    }\n    case LOG: {\n      const logMessage = {\n        type: 'log',\n        _id: `log-${payload._id}`,\n        text: payload.text,\n      };\n      return {\n        ...state,\n        messages: messages.concat([logMessage]),\n      };\n    }\n\n    case REMOVE_MESSAGE:\n      return {\n        ...state,\n        messages: state.messages.filter(msg => msg._id !== payload._id),\n      };\n    case REMOVE_USER_MESSAGES:\n      return {\n        ...state,\n        messages: state.messages.filter(msg => msg.userID !== payload.userID),\n      };\n    case REMOVE_ALL_MESSAGES:\n      return {\n        ...state,\n        messages: [],\n      };\n\n    case MUTE_USER:\n      return {\n        ...state,\n        mutedUsers: {\n          ...state.mutedUsers,\n          [payload.userID]: {\n            mutedBy: payload.moderatorID,\n            expiresAt: payload.expiresAt,\n            expirationTimer: payload.expirationTimer,\n          },\n        },\n      };\n    case UNMUTE_USER:\n      return {\n        ...state,\n        mutedUsers: except(state.mutedUsers, payload.userID),\n      };\n\n    default: {\n      const nextMessages = reduceNotifications(messages, action);\n      if (nextMessages !== messages) {\n        return { ...state, messages: nextMessages };\n      }\n      return state;\n    }\n  }\n}\n"],"file":"chat.js"}