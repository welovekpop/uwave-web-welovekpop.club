{"version":3,"sources":["reducers/users.js"],"names":["except","indexBy","combineReducers","INIT_STATE","LOAD_ONLINE_USERS","USER_JOIN","USER_LEAVE","CHANGE_USERNAME","CHANGE_ROLE","RECEIVE_GUEST_COUNT","guestsReducer","state","action","type","payload","guests","usersReducer","users","user","_id","userID","username","role","reduce"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,eAAT,QAAgC,OAAhC;;AAEA,SACEC,UADF,QAEO,+BAFP;AAGA,SACEC,iBADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,eAJF,EAKEC,WALF,EAOEC,mBAPF,QAQO,gCARP;;AAUA,SAASC,aAAT,GAA+C;AAAA,MAAxBC,KAAwB,uEAAhB,CAAgB;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AAC7C,MAAIA,OAAOC,IAAP,KAAgBV,UAApB,EAAgC;AAC9B,WAAOS,OAAOE,OAAP,CAAeC,MAAtB;AACD;AACD,MAAIH,OAAOC,IAAP,KAAgBJ,mBAApB,EAAyC;AACvC,WAAOG,OAAOE,OAAP,CAAeC,MAAtB;AACD;AACD,SAAOJ,KAAP;AACD;;AAED,SAASK,YAAT,GAA+C;AAAA;;AAAA,MAAzBL,KAAyB,uEAAjB,EAAiB;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AAAA,MACrCC,IADqC,GACnBD,MADmB,CACrCC,IADqC;AAAA,MAC/BC,OAD+B,GACnBF,MADmB,CAC/BE,OAD+B;;AAE7C,UAAQD,IAAR;AACA,SAAKT,iBAAL;AACE;AACA;AACA;AACA;AACA;AACA,0BACKO,KADL,EAEKV,QAAQa,QAAQG,KAAhB,EAAuB,KAAvB,CAFL;AAIF,SAAKZ,SAAL;AACE,0BACKM,KADL,6BAEGG,QAAQI,IAAR,CAAaC,GAFhB,IAEsBL,QAAQI,IAF9B;AAIF,SAAKZ,UAAL;AACE,aAAON,OAAOW,KAAP,EAAcG,QAAQM,MAAtB,CAAP;AACF,SAAKb,eAAL;AACE,UAAII,MAAMG,QAAQM,MAAd,CAAJ,EAA2B;AAAA;;AACzB,4BACKT,KADL,6BAEGG,QAAQM,MAFX,iBAGOT,MAAMG,QAAQM,MAAd,CAHP;AAIIC,oBAAUP,QAAQO;AAJtB;AAOD;AACD,aAAOV,KAAP;AACF,SAAKH,WAAL;AACE,UAAIG,MAAMG,QAAQM,MAAd,CAAJ,EAA2B;AAAA;;AACzB,4BACKT,KADL,6BAEGG,QAAQM,MAFX,iBAGOT,MAAMG,QAAQM,MAAd,CAHP;AAIIE,gBAAMR,QAAQQ;AAJlB;AAOD;AACD,aAAOX,KAAP;AACF;AACE,aAAOA,KAAP;AAzCF;AA2CD;;AAED,IAAMY,SAASrB,gBAAgB;AAC7Ba,UAAQL,aADqB;AAE7BO,SAAOD;AAFsB,CAAhB,CAAf;;AAKA,eAAeO,MAAf","file":"users.js","sourcesContent":["import except from 'except';\nimport indexBy from 'index-by';\nimport { combineReducers } from 'redux';\n\nimport {\n  INIT_STATE\n} from '../constants/actionTypes/auth';\nimport {\n  LOAD_ONLINE_USERS,\n  USER_JOIN,\n  USER_LEAVE,\n  CHANGE_USERNAME,\n  CHANGE_ROLE,\n\n  RECEIVE_GUEST_COUNT\n} from '../constants/actionTypes/users';\n\nfunction guestsReducer(state = 0, action = {}) {\n  if (action.type === INIT_STATE) {\n    return action.payload.guests;\n  }\n  if (action.type === RECEIVE_GUEST_COUNT) {\n    return action.payload.guests;\n  }\n  return state;\n}\n\nfunction usersReducer(state = {}, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n  case LOAD_ONLINE_USERS:\n    // this is merged in instead of replacing the state, because sometimes the\n    // JOIN event from the current user comes in before the LOAD event, and then\n    // the current user is sometimes excluded from the state. it looks like this\n    // approach could cause problems, too, though.\n    // TODO maybe replace state instead anyway and merge in the current user?\n    return {\n      ...state,\n      ...indexBy(payload.users, '_id')\n    };\n  case USER_JOIN:\n    return {\n      ...state,\n      [payload.user._id]: payload.user\n    };\n  case USER_LEAVE:\n    return except(state, payload.userID);\n  case CHANGE_USERNAME:\n    if (state[payload.userID]) {\n      return {\n        ...state,\n        [payload.userID]: {\n          ...state[payload.userID],\n          username: payload.username\n        }\n      };\n    }\n    return state;\n  case CHANGE_ROLE:\n    if (state[payload.userID]) {\n      return {\n        ...state,\n        [payload.userID]: {\n          ...state[payload.userID],\n          role: payload.role\n        }\n      };\n    }\n    return state;\n  default:\n    return state;\n  }\n}\n\nconst reduce = combineReducers({\n  guests: guestsReducer,\n  users: usersReducer\n});\n\nexport default reduce;\n"]}