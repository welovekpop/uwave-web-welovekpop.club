{"version":3,"sources":["reducers/settings.js"],"names":["merge","compose","LOAD_SETTINGS","CHANGE_SETTING","fixVolume","state","volume","initialState","language","mentionSound","muted","videoEnabled","videoSize","notifications","userJoin","userLeave","userNameChanged","skip","reduce","action","type","payload","clone"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,WAAlB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SACEC,aADF,EAEEC,cAFF,QAGO,mCAHP,C,CAKA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAIA,MAAMC,MAAN,GAAe,CAAnB,EAAsB,yBAAYD,KAAZ;AAAmBC,YAAQ;AAA3B;AACtB,MAAID,MAAMC,MAAN,GAAe,GAAnB,EAAwB,yBAAYD,KAAZ;AAAmBC,YAAQ;AAA3B;AACxB,SAAOD,KAAP;AACD;;AAED,IAAME,eAAe;AACnBC,YAAU,IADS;AAEnBC,gBAAc,IAFK;AAGnBC,SAAO,KAHY;AAInBC,gBAAc,IAJK;AAKnBC,aAAW,OALQ;AAMnBN,UAAQ,CANW;AAOnBO,iBAAe;AACbC,cAAU,IADG;AAEbC,eAAW,IAFE;AAGbC,qBAAiB,IAHJ;AAIbC,UAAM;AAJO;AAPI,CAArB;;AAeA,SAASC,MAAT,CAAgBb,KAAhB,EAAsCc,MAAtC,EAAmD;AAAA,MAAnCd,KAAmC;AAAnCA,SAAmC,GAA3BE,YAA2B;AAAA;;AAAA,MAAbY,MAAa;AAAbA,UAAa,GAAJ,EAAI;AAAA;;AAAA,gBACvBA,MADuB;AAAA,MACzCC,IADyC,WACzCA,IADyC;AAAA,MACnCC,OADmC,WACnCA,OADmC;;AAEjD,UAAQD,IAAR;AACE,SAAKlB,aAAL;AACA;AACE,+BACKK,YADL,EAEKc,OAFL;AAGE;AACA;AACA;AACAR,uBAAeQ,4BACVd,aAAaM,aADH,EAEVQ,QAAQR,aAFE,IAGXN,aAAaM;AATnB;;AAWF,SAAKV,cAAL;AACE,aAAOH,MAAMK,KAAN,EAAagB,OAAb,EAAsB;AAAEC,eAAO;AAAT,OAAtB,CAAP;;AACF;AACE,aAAOjB,KAAP;AAjBJ;AAmBD;;AAED,eAAeJ,QAAQG,SAAR,EAAmBc,MAAnB,CAAf","sourcesContent":["import merge from 'deepmerge';\nimport compose from 'recompose/compose';\nimport {\n  LOAD_SETTINGS,\n  CHANGE_SETTING,\n} from '../constants/actionTypes/settings';\n\n// Some people have >100% volumes stored in their localStorage settings\n// because of a bug in Ã¼Wave 1.4. This ensures that _everyone's_ volume\n// is between 0 and 100.\nfunction fixVolume(state) {\n  if (state.volume < 0) return { ...state, volume: 0 };\n  if (state.volume > 100) return { ...state, volume: 100 };\n  return state;\n}\n\nconst initialState = {\n  language: null,\n  mentionSound: true,\n  muted: false,\n  videoEnabled: true,\n  videoSize: 'large',\n  volume: 0,\n  notifications: {\n    userJoin: true,\n    userLeave: true,\n    userNameChanged: true,\n    skip: true,\n  },\n};\n\nfunction reduce(state = initialState, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case LOAD_SETTINGS:\n    // Loading settings defaults to the initial state.\n      return {\n        ...initialState,\n        ...payload,\n        // Merge notification settings if we have new ones.\n        // Needed if new notification types were added since the last time\n        // settings were saved to localStorage.\n        notifications: payload ? {\n          ...initialState.notifications,\n          ...payload.notifications,\n        } : initialState.notifications,\n      };\n    case CHANGE_SETTING:\n      return merge(state, payload, { clone: true });\n    default:\n      return state;\n  }\n}\n\nexport default compose(fixVolume, reduce);\n"],"file":"settings.js"}