{"version":3,"sources":["reducers/playlists.js"],"names":["assign","except","escapeStringRegExp","findIndex","indexBy","mapObj","INIT_STATE","LOAD_ALL_PLAYLISTS_COMPLETE","LOAD_PLAYLIST_START","LOAD_PLAYLIST_COMPLETE","PLAYLIST_CYCLED","SELECT_PLAYLIST","ACTIVATE_PLAYLIST_START","ACTIVATE_PLAYLIST_COMPLETE","CREATE_PLAYLIST_START","CREATE_PLAYLIST_COMPLETE","RENAME_PLAYLIST_START","RENAME_PLAYLIST_COMPLETE","DELETE_PLAYLIST_START","DELETE_PLAYLIST_COMPLETE","ADD_MEDIA_START","ADD_MEDIA_COMPLETE","REMOVE_MEDIA_START","REMOVE_MEDIA_COMPLETE","MOVE_MEDIA_START","MOVE_MEDIA_COMPLETE","UPDATE_MEDIA_START","UPDATE_MEDIA_COMPLETE","FILTER_PLAYLIST_ITEMS","FILTER_PLAYLIST_ITEMS_COMPLETE","DO_FAVORITE_COMPLETE","SEARCH_START","SEARCH_DELETE","initialState","playlists","playlistItems","activePlaylistID","selectedPlaylistID","currentFilter","deselectAll","playlist","selected","processInsert","list","insert","position","insertIdx","at","length","after","media","_id","slice","processMove","movedMedia","location","wasMoved","newPlaylist","filter","updatePlaylist","state","playlistID","modify","updatePlaylistItems","nextFilter","items","updatePlaylistAndItems","modifyPlaylist","modifyItems","newState","setPlaylistLoading","id","loading","fill","array","value","i","l","mergePlaylistPage","size","oldMedia","newMedia","page","pageSize","Array","forEach","item","filterCachedPlaylistItems","rx","RegExp","test","artist","title","reduce","action","type","payload","meta","error","map","active","activePlaylist","firstActivePlaylistItem","sneaky","newItems","tempId","name","description","shared","creating","renamedPlaylist","newSize","appendedMedia","afterID","added","mediaID","isMovingMedia","medias","isRemovingMedia","isRemovedMedia","removedMedia"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,SACEC,UADF,EAGEC,2BAHF,EAIEC,mBAJF,EAKEC,sBALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,uBARF,EASEC,0BATF,EAUEC,qBAVF,EAWEC,wBAXF,EAYEC,qBAZF,EAaEC,wBAbF,EAcEC,qBAdF,EAeEC,wBAfF,EAgBEC,eAhBF,EAiBEC,kBAjBF,EAkBEC,kBAlBF,EAmBEC,qBAnBF,EAoBEC,gBApBF,EAqBEC,mBArBF,EAsBEC,kBAtBF,EAuBEC,qBAvBF,EAwBEC,qBAxBF,EAyBEC,8BAzBF,EA2BEC,oBA3BF,EA6BEC,YA7BF,EA8BEC,aA9BF,QA+BO,0BA/BP;AAiCA,IAAMC,eAAe;AACnBC,aAAW,EADQ;AAEnBC,iBAAe,EAFI;AAGnBC,oBAAkB,IAHC;AAInBC,sBAAoB,IAJD;AAKnBC,iBAAe;AALI,CAArB;;AAQA,SAASC,WAAT,CAAqBL,SAArB,EAAgC;AAC9B,SAAO7B,OAAO6B,SAAP,EAAkB;AAAA,WACvBM,SAASC,QAAT,gBACSD,QADT;AACmBC,gBAAU;AAD7B,SAEID,QAHmB;AAAA,GAAlB,CAAP;AAKD;;AAED,SAASE,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+C;AAC7C,MAAIC,YAAY,CAAhB;;AACA,MAAID,SAASE,EAAT,KAAgB,KAApB,EAA2B;AACzBD,gBAAYH,KAAKK,MAAjB;AACD,GAFD,MAEO,IAAIH,SAASE,EAAT,KAAgB,OAApB,EAA6B;AAClCD,gBAAY,CAAZ;AACD,GAFM,MAEA,IAAID,SAASI,KAAT,IAAkB,IAAlB,IAA0BJ,SAASI,KAAT,KAAmB,CAAC,CAAlD,EAAqD;AAC1DH,gBAAY3C,UAAUwC,IAAV,EAAgB;AAAA,aAASO,UAAU,IAAV,IAAkBA,MAAMC,GAAN,KAAcN,SAASI,KAAlD;AAAA,KAAhB,IAA2E,CAAvF;AACD;;AACD,SACKN,KAAKS,KAAL,CAAW,CAAX,EAAcN,SAAd,CADL,QAEKF,MAFL,EAGKD,KAAKS,KAAL,CAAWN,SAAX,CAHL;AAKD,C,CAED;;;AACA,SAASO,WAAT,CAAqBV,IAArB,EAA2BW,UAA3B,EAAuCC,QAAvC,EAAiD;AAC/C;AACA,MAAMC,WAAWpD,QAAQkD,UAAR,EAAoB,KAApB,CAAjB;AACA,MAAMG,cAAcd,KAAKe,MAAL,CAAY;AAAA,WAASR,UAAU,IAAV,IAAkB,CAACM,SAASN,MAAMC,GAAf,CAA5B;AAAA,GAAZ,CAApB,CAH+C,CAI/C;;AACA,SAAOT,cAAce,WAAd,EAA2BH,UAA3B,EAAuCC,QAAvC,CAAP;AACD;;AAED,SAASI,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2CC,MAA3C,EAAmD;AACjD,MAAMtB,WAAWoB,MAAM1B,SAAN,CAAgB2B,UAAhB,CAAjB;;AACA,MAAIrB,QAAJ,EAAc;AAAA;;AACZ,wBACKoB,KADL;AAEE1B,8BACK0B,MAAM1B,SADX,6BAEG2B,UAFH,IAEgBC,OAAOtB,QAAP,CAFhB;AAFF;AAOD;;AACD,SAAOoB,KAAP;AACD,C,CAED;AACA;;;AACA,SAASG,mBAAT,CAA6BH,KAA7B,EAAoCC,UAApC,EAAgDC,MAAhD,EAAwD;AACtD,MAAMtB,WAAWoB,MAAM1B,SAAN,CAAgB2B,UAAhB,CAAjB;AACA,MAAMX,QAAQU,MAAMzB,aAAN,CAAoB0B,UAApB,CAAd;;AACA,MAAIrB,QAAJ,EAAc;AAAA;;AACZ,QAAIwB,aAAaJ,MAAMtB,aAAvB;;AACA,QAAIsB,MAAMvB,kBAAN,KAA6BwB,UAA7B,IAA2CG,UAA/C,EAA2D;AACzDA,gCACKA,UADL;AAEEC,eAAOH,OAAOE,WAAWC,KAAX,IAAoB,EAA3B,EAA+BzB,QAA/B;AAFT;AAID;;AACD,wBACKoB,KADL;AAEEzB,kCACKyB,MAAMzB,aADX,6BAEG0B,UAFH,IAEgBC,OAAOZ,SAAS,EAAhB,EAAoBV,QAApB,CAFhB,aAFF;AAMEF,qBAAe0B;AANjB;AAQD;;AACD,SAAOJ,KAAP;AACD;;AAED,SAASM,sBAAT,CAAgCN,KAAhC,EAAuCC,UAAvC,EAAmDM,cAAnD,EAAmEC,WAAnE,EAAgF;AAC9E,MAAMC,WAAWV,eAAeC,KAAf,EAAsBC,UAAtB,EAAkCM,cAAlC,CAAjB;AACA,SAAOJ,oBAAoBM,QAApB,EAA8BR,UAA9B,EAA0CO,WAA1C,CAAP;AACD;;AAED,SAASE,kBAAT,CAA4BV,KAA5B,EAAmCW,EAAnC,EAAuCC,OAAvC,EAAuD;AAAA,MAAhBA,OAAgB;AAAhBA,WAAgB,GAAN,IAAM;AAAA;;AACrD,SAAOb,eAAeC,KAAf,EAAsBW,EAAtB,EAA0B;AAAA,wBAC5B/B,QAD4B;AAE/BgC;AAF+B;AAAA,GAA1B,CAAP;AAID;;AAED,SAASC,IAAT,CAAcC,KAAd,EAAqBC,KAArB,EAA4B;AAC1B,OAAK,IAAIC,IAAI,CAAR,EAAWC,IAAIH,MAAM1B,MAA1B,EAAkC4B,IAAIC,CAAtC,EAAyCD,KAAK,CAA9C,EAAiD;AAC/CF,UAAME,CAAN,IAAWD,KAAX,CAD+C,CAC7B;AACnB;;AACD,SAAOD,KAAP;AACD;;AAED,SAASI,iBAAT,CAA2BC,IAA3B,EAAiCC,QAAjC,EAA2CC,QAA3C,QAAyE;AAAA,MAAlBC,IAAkB,QAAlBA,IAAkB;AAAA,MAAZC,QAAY,QAAZA,QAAY;AACvE,MAAMjC,QAAQuB,KAAKW,MAAML,IAAN,CAAL,EAAkB,IAAlB,CAAd;AACAC,WAASK,OAAT,CAAiB,UAACC,IAAD,EAAOV,CAAP,EAAa;AAC5B1B,UAAM0B,CAAN,IAAWU,IAAX;AACD,GAFD;AAGAL,WAASI,OAAT,CAAiB,UAACC,IAAD,EAAOV,CAAP,EAAa;AAC5B1B,UAAOgC,OAAOC,QAAR,GAAoBP,CAA1B,IAA+BU,IAA/B;AACD,GAFD;AAGA,SAAOpC,KAAP;AACD;;AAED,SAASqC,yBAAT,CAAmC3B,KAAnC,EAA0CC,UAA1C,EAAsDH,MAAtD,EAA8D;AAC5D,MAAM8B,KAAK,IAAIC,MAAJ,CAAWvF,mBAAmBwD,MAAnB,CAAX,EAAuC,GAAvC,CAAX;AACA,MAAMlB,WAAWoB,MAAMzB,aAAN,CAAoB0B,UAApB,CAAjB;;AACA,MAAIrB,QAAJ,EAAc;AACZ,WAAOA,SAASkB,MAAT,CAAgB;AAAA,aAAQ4B,SAC7BE,GAAGE,IAAH,CAAQJ,KAAKK,MAAb,KAAwBH,GAAGE,IAAH,CAAQJ,KAAKM,KAAb,CADK,CAAR;AAAA,KAAhB,CAAP;AAGD;;AACD,SAAO,EAAP;AACD;;AAED,eAAe,SAASC,MAAT,CAAgBjC,KAAhB,EAAsCkC,MAAtC,EAAmD;AAAA;;AAAA,MAAnClC,KAAmC;AAAnCA,SAAmC,GAA3B3B,YAA2B;AAAA;;AAAA,MAAb6D,MAAa;AAAbA,UAAa,GAAJ,EAAI;AAAA;;AAAA,gBAG5DA,MAH4D;AAAA,MAE9DC,IAF8D,WAE9DA,IAF8D;AAAA,MAExDC,OAFwD,WAExDA,OAFwD;AAAA,MAE/CC,IAF+C,WAE/CA,IAF+C;AAAA,MAEzCC,KAFyC,WAEzCA,KAFyC;;AAKhE,UAAQH,IAAR;AACE,SAAKzF,UAAL;AACE;AACA,UAAI,CAAC0F,QAAQ9D,SAAb,EAAwB,OAAO0B,KAAP;AAExB,0BACKA,KADL;AAEE1B,mBAAW9B,QAAQ4F,QAAQ9D,SAAR,CAAkBiE,GAAlB,CAAsB;AAAA,8BACpC3D,QADoC;AAEvC4D,oBAAQ5D,SAASW,GAAT,KAAiB6C,QAAQK,cAFM;AAGvC5D,sBAAUD,SAASW,GAAT,KAAiB6C,QAAQK;AAHI;AAAA,SAAtB,CAAR,EAIN,KAJM,CAFb;AAOE;AACA;AACA;AACAlE,uBAAe6D,QAAQK,cAAR,IAA0BL,QAAQM,uBAAlC,gBACV1C,MAAMzB,aADI,6BAEZ6D,QAAQK,cAFI,IAEa,CAACL,QAAQM,uBAAT,CAFb,gBAGX1C,MAAMzB,aAbZ;AAcEC,0BAAkB4D,QAAQK,cAd5B;AAeEhE,4BAAoB2D,QAAQK;AAf9B;;AAiBF,SAAK9F,2BAAL;AACE,0BACKqD,KADL;AAEE1B,mBAAW9B,QAAQ4F,QAAQ9D,SAAhB,EAA2B,KAA3B;AAFb;;AAIF,SAAKtB,uBAAL;AACA;AACA;AACE,aAAO0D,mBAAmBV,KAAnB,EAA0BoC,QAAQnC,UAAlC,CAAP;;AACF,SAAKhD,0BAAL;AACE,UAAIqF,KAAJ,EAAW;AACT,eAAO5B,mBAAmBV,KAAnB,EAA0BqC,KAAKpC,UAA/B,EAA2C,KAA3C,CAAP;AACD;;AAED,0BACKD,KADL;AAEE;AACA1B,mBAAW7B,OAAOuD,MAAM1B,SAAb,EAAwB;AAAA,8BAC9BM,QAD8B;AAEjCgC,qBAAShC,SAASW,GAAT,KAAiB6C,QAAQnC,UAAzB,GAAsC,KAAtC,GAA8CrB,SAASgC,OAF/B;AAGjC4B,oBAAQ5D,SAASW,GAAT,KAAiB6C,QAAQnC;AAHA;AAAA,SAAxB,CAHb;AAQEzB,0BAAkB4D,QAAQnC;AAR5B;;AAUF,SAAKlD,eAAL;AACE,0BACKiD,KADL;AAEE;AACA1B,mBAAW7B,OAAOuD,MAAM1B,SAAb,EAAwB;AAAA,8BAC9BM,QAD8B;AAEjCC,sBAAUD,SAASW,GAAT,KAAiB6C,QAAQnC;AAFF;AAAA,SAAxB,CAHb;AAOExB,4BAAoB2D,QAAQnC;AAP9B;;AASF,SAAK9B,YAAL;AACA;AACA;AACE,0BACK6B,KADL;AAEE1B,mBAAWK,YAAYqB,MAAM1B,SAAlB,CAFb;AAGEG,4BAAoB;AAHtB;;AAKF,SAAKL,aAAL;AACA;AACA;AACE,UAAI4B,MAAMvB,kBAAV,EAA8B,OAAOuB,KAAP;AAE9B,0BACKA,KADL;AAEE1B,mBAAW7B,OAAOuD,MAAM1B,SAAb,EAAwB;AAAA,8BAC9BM,QAD8B;AAEjCC,sBAAUD,SAAS4D;AAFc;AAAA,SAAxB,CAFb;AAME/D,4BAAoBuB,MAAMxB;AAN5B;;AASF,SAAK5B,mBAAL;AAA0B;AACxB,YAAIyF,KAAKM,MAAL,IAAeN,KAAKf,IAAL,KAAc,CAA7B,IAAkCtB,MAAMzB,aAAN,CAAoB6D,QAAQnC,UAA5B,CAAtC,EAA+E;AAC7E,iBAAOD,KAAP;AACD,SAHuB,CAKxB;;;AACA,eAAOG,oBACLH,KADK,EAELoC,QAAQnC,UAFH,EAGL,UAACI,KAAD,EAAQzB,QAAR;AAAA,iBAAqBiC,KAAKW,MAAM5C,SAASuC,IAAf,CAAL,EAA2B,IAA3B,EAClBoB,GADkB,CACd,UAACb,IAAD,EAAOV,CAAP;AAAA,mBAAaX,MAAMW,CAAN,KAAYU,IAAzB;AAAA,WADc,CAArB;AAAA,SAHK,CAAP;AAMD;;AACD,SAAK7E,sBAAL;AACE,UAAIyF,KAAJ,EAAW;AACT,eAAO5B,mBAAmBV,KAAnB,EAA0BqC,KAAKpC,UAA/B,EAA2C,KAA3C,CAAP;AACD;;AAED,aAAOK,uBACLN,KADK,EAELoC,QAAQnC,UAFH,EAGL;AAAA,4BAAkBrB,QAAlB;AAA4BgC,mBAAS;AAArC;AAAA,OAHK,EAIL;AAAA,eAASM,kBAAkBmB,KAAKlB,IAAvB,EAA6Bd,KAA7B,EAAoC+B,QAAQ9C,KAA5C,EAAmD+C,IAAnD,CAAT;AAAA,OAJK,CAAP;;AAOF,SAAKrE,qBAAL;AACA;AACE,UAAIoE,QAAQnC,UAAR,KAAuBD,MAAMvB,kBAAjC,EAAqD;AACnD,eAAOuB,KAAP;AACD;;AACD,UAAI,CAACoC,QAAQtC,MAAb,EAAqB;AACnB,4BACKE,KADL;AAEEtB,yBAAe;AAFjB;AAID;;AACD,0BACKsB,KADL;AAEEtB,uBAAe;AACbuB,sBAAYmC,QAAQnC,UADP;AAEbH,kBAAQsC,QAAQtC,MAFH;AAGbO,iBAAOsB,0BAA0B3B,KAA1B,EAAiCoC,QAAQnC,UAAzC,EAAqDmC,QAAQtC,MAA7D;AAHM;AAFjB;;AAQF,SAAK7B,8BAAL;AAAqC;AACrC;AACE,YAAImE,QAAQnC,UAAR,KAAuBD,MAAMvB,kBAAjC,EAAqD;AACnD,iBAAOuB,KAAP;AACD;;AAJkC,qBAKTA,KALS;AAAA,YAK3BtB,aAL2B,UAK3BA,aAL2B;AAMnC,YAAM2B,QAAQa,kBAAkBmB,KAAKlB,IAAvB,EAA6BzC,cAAc2B,KAA3C,EAAkD+B,QAAQ9C,KAA1D,EAAiE+C,IAAjE,CAAd;AACA,4BACKrC,KADL;AAEEtB,sCAAoBA,aAApB;AAAmC2B;AAAnC;AAFF;AAID;;AAED,SAAKvD,eAAL;AACE,aAAOqD,oBAAoBH,KAApB,EAA2BoC,QAAQnC,UAAnC,EAA+C,UAACI,KAAD,EAAQzB,QAAR,EAAqB;AACzE,YAAMgE,WAAWvC,MAAMb,KAAN,CAAY,CAAZ,CAAjB;AACAoD,iBAAShE,SAASuC,IAAT,GAAgB,CAAzB,IAA8Bd,MAAM,CAAN,CAA9B,CAFyE,CAEjC;;AACxC,eAAOuC,QAAP;AACD,OAJM,CAAP;AAMA;AACA;AACA;AACA;AACA;;AACF,SAAK1F,qBAAL;AAA4B;AAAA;;AAC1B,YAAM2C,cAAc;AAClBN,eAAK8C,KAAKQ,MADQ;AAElBC,gBAAMV,QAAQU,IAFI;AAGlBC,uBAAaX,QAAQW,WAHH;AAIlBC,kBAAQZ,QAAQY,MAJE;AAKlBnE,oBAAU,IALQ;AAMlBoE,oBAAU;AANQ,SAApB;AAQA,4BACKjD,KADL;AAEE1B,qBAAWlC,OACTuC,YAAYqB,MAAM1B,SAAlB,CADS,yBAEN+D,KAAKQ,MAFC,IAEQhD,WAFR,WAFb;AAMEpB,8BAAoB4D,KAAKQ;AAN3B;AAQD;;AACD,SAAK1F,wBAAL;AACE,UAAImF,KAAJ,EAAW;AACT,4BACKtC,KADL;AAEE1B,qBAAWjC,OAAO2D,MAAM1B,SAAb,OAA2B+D,KAAKQ,MAAhC;AAFb;AAID;;AAED,0BACK7C,KADL;AAEE1B,mBAAWlC,OACTuC,YAAYtC,OAAO2D,MAAM1B,SAAb,OAA2B+D,KAAKQ,MAAhC,CAAZ,CADS,2BAGNT,QAAQxD,QAAR,CAAiBW,GAHX,iBAIF6C,QAAQxD,QAJN;AAKLC,oBAAU;AALL,sBAFb;AAWEJ,4BAAoB2D,QAAQxD,QAAR,CAAiBW;AAXvC;;AAcF,SAAKnC,qBAAL;AACE,aAAOsD,mBAAmBV,KAAnB,EAA0BoC,QAAQnC,UAAlC,CAAP;;AACF,SAAK5C,wBAAL;AAA+B;AAC7B,YAAIiF,KAAJ,EAAW;AACT,iBAAO5B,mBAAmBV,KAAnB,EAA0BqC,KAAKpC,UAA/B,EAA2C,KAA3C,CAAP;AACD;;AAED,YAAMiD,kBAAkBlD,MAAM1B,SAAN,CAAgB8D,QAAQnC,UAAxB,CAAxB;;AACA,YAAIiD,eAAJ,EAAqB;AACnB,iBAAOnD,eAAeC,KAAf,EAAsBoC,QAAQnC,UAA9B,EAA0C;AAAA,gCAC5CrB,QAD4C;AAE/CkE,oBAAMV,QAAQU,IAFiC;AAG/ClC,uBAAS;AAHsC;AAAA,WAA1C,CAAP;AAKD;;AACD,eAAOZ,KAAP;AACD;;AACD,SAAK1C,qBAAL;AACE,aAAOoD,mBAAmBV,KAAnB,EAA0BoC,QAAQnC,UAAlC,CAAP;;AACF,SAAK1C,wBAAL;AACE,UAAI+E,KAAJ,EAAW;AACT,eAAO5B,mBAAmBV,KAAnB,EAA0BqC,KAAKpC,UAA/B,EAA2C,KAA3C,CAAP;AACD;;AAED,0BACKD,KADL;AAEE;AACAvB,4BAAoBuB,MAAMvB,kBAAN,KAA6B2D,QAAQnC,UAArC,GAChBD,MAAMxB,gBADU,GAEhBwB,MAAMvB,kBALZ;AAMEH,mBAAWjC,OAAO2D,MAAM1B,SAAb,EAAwB8D,QAAQnC,UAAhC;AANb;;AASF,SAAKzC,eAAL;AACE,aAAOkD,mBAAmBV,KAAnB,EAA0BoC,QAAQnC,UAAlC,CAAP;;AACF,SAAKxC,kBAAL;AACE,UAAI6E,KAAJ,EAAW;AACT,eAAO5B,mBAAmBV,KAAnB,EAA0BqC,KAAKpC,UAA/B,EAA2C,KAA3C,CAAP;AACD;;AAED,aAAOK,uBACLN,KADK,EAELoC,QAAQnC,UAFH,EAGL;AAAA,4BACKrB,QADL;AAEEgC,mBAAS,KAFX;AAGEO,gBAAMiB,QAAQe;AAHhB;AAAA,OAHK,EAQL;AAAA,eAASrE,cAAcuB,KAAd,EAAqB+B,QAAQgB,aAA7B,EAA4C;AAAE/D,iBAAO+C,QAAQiB;AAAjB,SAA5C,CAAT;AAAA,OARK,CAAP;;AAUF,SAAKnF,oBAAL;AACE,aAAOoC,uBACLN,KADK,EAELoC,QAAQnC,UAFH,EAGL;AAAA,4BACKrB,QADL;AAEEuC,gBAAMiB,QAAQe;AAFhB;AAAA,OAHK,EAOL;AAAA,eAASrE,cAAcuB,KAAd,EAAqB+B,QAAQkB,KAA7B,EAAoC;AAAEnE,cAAI;AAAN,SAApC,CAAT;AAAA,OAPK,CAAP;;AAUF,SAAKrB,kBAAL;AACE,aAAOqC,oBAAoBH,KAApB,EAA2BoC,QAAQnC,UAAnC,EAA+C;AAAA,eACpDI,MAAMkC,GAAN,CAAU;AAAA,iBACRjD,SAASA,MAAMC,GAAN,KAAc6C,QAAQmB,OAA/B,gBACSjE,KADT;AACgBsB,qBAAS;AADzB,eAEItB,KAHI;AAAA,SAAV,CADoD;AAAA,OAA/C,CAAP;;AAMF,SAAKvB,qBAAL;AACE,aAAOoC,oBAAoBH,KAApB,EAA2BoC,QAAQnC,UAAnC,EAA+C;AAAA,eACpDI,MAAMkC,GAAN,CAAU;AAAA,iBACRjD,SAASA,MAAMC,GAAN,KAAc6C,QAAQmB,OAA/B,gBACSjE,KADT,EACmB8C,QAAQ9C,KAD3B;AACkCsB,qBAAS;AAD3C,eAEItB,KAHI;AAAA,SAAV,CADoD;AAAA,OAA/C,CAAP;;AAOF,SAAK1B,gBAAL;AAAuB;AACrB,YAAM4F,gBAAgBhH,QAAQ4F,QAAQqB,MAAhB,EAAwB,KAAxB,CAAtB;AACA,eAAOtD,oBAAoBH,KAApB,EAA2BoC,QAAQnC,UAAnC,EAA+C;AAAA,iBACpDI,MAAMkC,GAAN,CAAU;AAAA,mBAASjD,sBACdA,KADc;AAEjBsB,uBAAS4C,cAAclE,MAAMC,GAApB,KAA4BD,MAAMsB;AAF1B,cAAT;AAAA,WAAV,CADoD;AAAA,SAA/C,CAAP;AAKD;;AACD,SAAK/C,mBAAL;AACE,aAAOsC,oBAAoBH,KAApB,EAA2BoC,QAAQnC,UAAnC,EAA+C;AAAA,eACpDR,YAAYY,KAAZ,EAAmB+B,QAAQqB,MAA3B,EAAmCrB,QAAQzC,QAA3C,CADoD;AAAA,OAA/C,CAAP;;AAGF,SAAKjC,kBAAL;AAAyB;AACvB,YAAMgG,kBAAkBlH,QAAQ4F,QAAQqB,MAAhB,EAAwB,KAAxB,CAAxB;AACA,eAAOtD,oBAAoBH,KAApB,EAA2BoC,QAAQnC,UAAnC,EAA+C;AAAA,iBACpDI,MAAMkC,GAAN,CAAU;AAAA,mBAASjD,sBACdA,KADc;AAEjBsB,uBAAS8C,gBAAgBpE,MAAMC,GAAtB,KAA8BD,MAAMsB;AAF5B,cAAT;AAAA,WAAV,CADoD;AAAA,SAA/C,CAAP;AAKD;;AACD,SAAKjD,qBAAL;AAA4B;AAC1B,YAAMgG,iBAAiBnH,QAAQ4F,QAAQwB,YAAhB,EAA8B,KAA9B,CAAvB;AACA,eAAOtD,uBACLN,KADK,EAELoC,QAAQnC,UAFH,EAGL;AAAA,8BAAkBrB,QAAlB;AAA4BuC,kBAAMiB,QAAQe;AAA1C;AAAA,SAHK,EAIL;AAAA,iBAAS9C,MAAMP,MAAN,CAAa;AAAA,mBAASR,UAAU,IAAV,IAAkB,CAACqE,eAAerE,MAAMC,GAArB,CAA5B;AAAA,WAAb,CAAT;AAAA,SAJK,CAAP;AAMD;;AACD;AACE,aAAOS,KAAP;AArSJ;AAuSD","sourcesContent":["import assign from 'object-assign';\nimport except from 'except';\nimport escapeStringRegExp from 'escape-string-regexp';\nimport findIndex from 'array-findindex';\nimport indexBy from 'index-by';\nimport mapObj from 'object.map';\n\nimport {\n  INIT_STATE,\n\n  LOAD_ALL_PLAYLISTS_COMPLETE,\n  LOAD_PLAYLIST_START,\n  LOAD_PLAYLIST_COMPLETE,\n  PLAYLIST_CYCLED,\n  SELECT_PLAYLIST,\n  ACTIVATE_PLAYLIST_START,\n  ACTIVATE_PLAYLIST_COMPLETE,\n  CREATE_PLAYLIST_START,\n  CREATE_PLAYLIST_COMPLETE,\n  RENAME_PLAYLIST_START,\n  RENAME_PLAYLIST_COMPLETE,\n  DELETE_PLAYLIST_START,\n  DELETE_PLAYLIST_COMPLETE,\n  ADD_MEDIA_START,\n  ADD_MEDIA_COMPLETE,\n  REMOVE_MEDIA_START,\n  REMOVE_MEDIA_COMPLETE,\n  MOVE_MEDIA_START,\n  MOVE_MEDIA_COMPLETE,\n  UPDATE_MEDIA_START,\n  UPDATE_MEDIA_COMPLETE,\n  FILTER_PLAYLIST_ITEMS,\n  FILTER_PLAYLIST_ITEMS_COMPLETE,\n\n  DO_FAVORITE_COMPLETE,\n\n  SEARCH_START,\n  SEARCH_DELETE,\n} from '../constants/ActionTypes';\n\nconst initialState = {\n  playlists: {},\n  playlistItems: {},\n  activePlaylistID: null,\n  selectedPlaylistID: null,\n  currentFilter: {},\n};\n\nfunction deselectAll(playlists) {\n  return mapObj(playlists, playlist => (\n    playlist.selected\n      ? { ...playlist, selected: false }\n      : playlist\n  ));\n}\n\nfunction processInsert(list, insert, position) {\n  let insertIdx = 0;\n  if (position.at === 'end') {\n    insertIdx = list.length;\n  } else if (position.at === 'start') {\n    insertIdx = 0;\n  } else if (position.after != null && position.after !== -1) {\n    insertIdx = findIndex(list, media => media !== null && media._id === position.after) + 1;\n  }\n  return [\n    ...list.slice(0, insertIdx),\n    ...insert,\n    ...list.slice(insertIdx),\n  ];\n}\n\n// Moves a list of media items to a given position in the playlist.\nfunction processMove(list, movedMedia, location) {\n  // Take all moved media items out of the playlist…\n  const wasMoved = indexBy(movedMedia, '_id');\n  const newPlaylist = list.filter(media => media === null || !wasMoved[media._id]);\n  // …and add them back in at the correct place.\n  return processInsert(newPlaylist, movedMedia, location);\n}\n\nfunction updatePlaylist(state, playlistID, modify) {\n  const playlist = state.playlists[playlistID];\n  if (playlist) {\n    return {\n      ...state,\n      playlists: {\n        ...state.playlists,\n        [playlistID]: modify(playlist),\n      },\n    };\n  }\n  return state;\n}\n\n// Applies a function to the media list belonging to `playlistID` if it is found\n// locally, i.e. in either the active or the selected playlist.\nfunction updatePlaylistItems(state, playlistID, modify) {\n  const playlist = state.playlists[playlistID];\n  const media = state.playlistItems[playlistID];\n  if (playlist) {\n    let nextFilter = state.currentFilter;\n    if (state.selectedPlaylistID === playlistID && nextFilter) {\n      nextFilter = {\n        ...nextFilter,\n        items: modify(nextFilter.items || [], playlist),\n      };\n    }\n    return {\n      ...state,\n      playlistItems: {\n        ...state.playlistItems,\n        [playlistID]: modify(media || [], playlist),\n      },\n      currentFilter: nextFilter,\n    };\n  }\n  return state;\n}\n\nfunction updatePlaylistAndItems(state, playlistID, modifyPlaylist, modifyItems) {\n  const newState = updatePlaylist(state, playlistID, modifyPlaylist);\n  return updatePlaylistItems(newState, playlistID, modifyItems);\n}\n\nfunction setPlaylistLoading(state, id, loading = true) {\n  return updatePlaylist(state, id, playlist => ({\n    ...playlist,\n    loading,\n  }));\n}\n\nfunction fill(array, value) {\n  for (let i = 0, l = array.length; i < l; i += 1) {\n    array[i] = value; // eslint-disable-line no-param-reassign\n  }\n  return array;\n}\n\nfunction mergePlaylistPage(size, oldMedia, newMedia, { page, pageSize }) {\n  const media = fill(Array(size), null);\n  oldMedia.forEach((item, i) => {\n    media[i] = item;\n  });\n  newMedia.forEach((item, i) => {\n    media[(page * pageSize) + i] = item;\n  });\n  return media;\n}\n\nfunction filterCachedPlaylistItems(state, playlistID, filter) {\n  const rx = new RegExp(escapeStringRegExp(filter), 'i');\n  const playlist = state.playlistItems[playlistID];\n  if (playlist) {\n    return playlist.filter(item => item && (\n      rx.test(item.artist) || rx.test(item.title)\n    ));\n  }\n  return [];\n}\n\nexport default function reduce(state = initialState, action = {}) {\n  const {\n    type, payload, meta, error,\n  } = action;\n\n  switch (type) {\n    case INIT_STATE:\n      // Probably not signed in.\n      if (!payload.playlists) return state;\n\n      return {\n        ...state,\n        playlists: indexBy(payload.playlists.map(playlist => ({\n          ...playlist,\n          active: playlist._id === payload.activePlaylist,\n          selected: playlist._id === payload.activePlaylist,\n        })), '_id'),\n        // Preload the first item in the active playlist so it can be shown in\n        // the footer bar immediately. Else it would flash \"This playlist is empty\"\n        // for a moment.\n        playlistItems: payload.activePlaylist && payload.firstActivePlaylistItem ? {\n          ...state.playlistItems,\n          [payload.activePlaylist]: [payload.firstActivePlaylistItem],\n        } : state.playlistItems,\n        activePlaylistID: payload.activePlaylist,\n        selectedPlaylistID: payload.activePlaylist,\n      };\n    case LOAD_ALL_PLAYLISTS_COMPLETE:\n      return {\n        ...state,\n        playlists: indexBy(payload.playlists, '_id'),\n      };\n    case ACTIVATE_PLAYLIST_START:\n    // TODO use a different property here so we can show a loading icon on\n    // the \"Active\" button only, instead of on top of the entire playlist\n      return setPlaylistLoading(state, payload.playlistID);\n    case ACTIVATE_PLAYLIST_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return {\n        ...state,\n        // set `active` property on all playlists\n        playlists: mapObj(state.playlists, playlist => ({\n          ...playlist,\n          loading: playlist._id === payload.playlistID ? false : playlist.loading,\n          active: playlist._id === payload.playlistID,\n        })),\n        activePlaylistID: payload.playlistID,\n      };\n    case SELECT_PLAYLIST:\n      return {\n        ...state,\n        // set `selected` property on playlists\n        playlists: mapObj(state.playlists, playlist => ({\n          ...playlist,\n          selected: playlist._id === payload.playlistID,\n        })),\n        selectedPlaylistID: payload.playlistID,\n      };\n    case SEARCH_START:\n    // We deselect playlists when doing a search, so the UI can switch to the\n    // search results view instead.\n      return {\n        ...state,\n        playlists: deselectAll(state.playlists),\n        selectedPlaylistID: null,\n      };\n    case SEARCH_DELETE:\n    // Select the active playlist when search results are closed while they\n    // were focused.\n      if (state.selectedPlaylistID) return state;\n\n      return {\n        ...state,\n        playlists: mapObj(state.playlists, playlist => ({\n          ...playlist,\n          selected: playlist.active,\n        })),\n        selectedPlaylistID: state.activePlaylistID,\n      };\n\n    case LOAD_PLAYLIST_START: {\n      if (meta.sneaky || meta.page !== 0 || state.playlistItems[payload.playlistID]) {\n        return state;\n      }\n\n      // Reserve space in the playlistItems array.\n      return updatePlaylistItems(\n        state,\n        payload.playlistID,\n        (items, playlist) => fill(Array(playlist.size), null)\n          .map((item, i) => items[i] || item),\n      );\n    }\n    case LOAD_PLAYLIST_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({ ...playlist, loading: false }),\n        items => mergePlaylistPage(meta.size, items, payload.media, meta),\n      );\n\n    case FILTER_PLAYLIST_ITEMS:\n    // Only the selected playlist can be filtered.\n      if (payload.playlistID !== state.selectedPlaylistID) {\n        return state;\n      }\n      if (!payload.filter) {\n        return {\n          ...state,\n          currentFilter: null,\n        };\n      }\n      return {\n        ...state,\n        currentFilter: {\n          playlistID: payload.playlistID,\n          filter: payload.filter,\n          items: filterCachedPlaylistItems(state, payload.playlistID, payload.filter),\n        },\n      };\n    case FILTER_PLAYLIST_ITEMS_COMPLETE: {\n    // Only the selected playlist can be filtered.\n      if (payload.playlistID !== state.selectedPlaylistID) {\n        return state;\n      }\n      const { currentFilter } = state;\n      const items = mergePlaylistPage(meta.size, currentFilter.items, payload.media, meta);\n      return {\n        ...state,\n        currentFilter: { ...currentFilter, items },\n      };\n    }\n\n    case PLAYLIST_CYCLED:\n      return updatePlaylistItems(state, payload.playlistID, (items, playlist) => {\n        const newItems = items.slice(1);\n        newItems[playlist.size - 1] = items[0]; // eslint-disable-line prefer-destructuring\n        return newItems;\n      });\n\n      // here be dragons\n      // TODO find a simpler way to store this stuff, that doesn't involve keeping\n      // millions of properties (six properties to be precise) in sync\n      // Playlists that are being created have a temporary ID that is used until the\n      // real ID comes back from the server.\n    case CREATE_PLAYLIST_START: {\n      const newPlaylist = {\n        _id: meta.tempId,\n        name: payload.name,\n        description: payload.description,\n        shared: payload.shared,\n        selected: true,\n        creating: true,\n      };\n      return {\n        ...state,\n        playlists: assign(\n          deselectAll(state.playlists),\n          { [meta.tempId]: newPlaylist },\n        ),\n        selectedPlaylistID: meta.tempId,\n      };\n    }\n    case CREATE_PLAYLIST_COMPLETE:\n      if (error) {\n        return {\n          ...state,\n          playlists: except(state.playlists, `${meta.tempId}`),\n        };\n      }\n\n      return {\n        ...state,\n        playlists: assign(\n          deselectAll(except(state.playlists, `${meta.tempId}`)),\n          {\n            [payload.playlist._id]: {\n              ...payload.playlist,\n              selected: true,\n            },\n          },\n        ),\n        selectedPlaylistID: payload.playlist._id,\n      };\n\n    case RENAME_PLAYLIST_START:\n      return setPlaylistLoading(state, payload.playlistID);\n    case RENAME_PLAYLIST_COMPLETE: {\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      const renamedPlaylist = state.playlists[payload.playlistID];\n      if (renamedPlaylist) {\n        return updatePlaylist(state, payload.playlistID, playlist => ({\n          ...playlist,\n          name: payload.name,\n          loading: false,\n        }));\n      }\n      return state;\n    }\n    case DELETE_PLAYLIST_START:\n      return setPlaylistLoading(state, payload.playlistID);\n    case DELETE_PLAYLIST_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return {\n        ...state,\n        // When deleting the selected playlist, select the active playlist instead.\n        selectedPlaylistID: state.selectedPlaylistID === payload.playlistID\n          ? state.activePlaylistID\n          : state.selectedPlaylistID,\n        playlists: except(state.playlists, payload.playlistID),\n      };\n\n    case ADD_MEDIA_START:\n      return setPlaylistLoading(state, payload.playlistID);\n    case ADD_MEDIA_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({\n          ...playlist,\n          loading: false,\n          size: payload.newSize,\n        }),\n        items => processInsert(items, payload.appendedMedia, { after: payload.afterID }),\n      );\n    case DO_FAVORITE_COMPLETE:\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({\n          ...playlist,\n          size: payload.newSize,\n        }),\n        items => processInsert(items, payload.added, { at: 'end' }),\n      );\n\n    case UPDATE_MEDIA_START:\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => (\n          media && media._id === payload.mediaID\n            ? { ...media, loading: true }\n            : media\n        )));\n    case UPDATE_MEDIA_COMPLETE:\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => (\n          media && media._id === payload.mediaID\n            ? { ...media, ...payload.media, loading: false }\n            : media\n        )));\n\n    case MOVE_MEDIA_START: {\n      const isMovingMedia = indexBy(payload.medias, '_id');\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => media && ({\n          ...media,\n          loading: isMovingMedia[media._id] || media.loading,\n        })));\n    }\n    case MOVE_MEDIA_COMPLETE:\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        processMove(items, payload.medias, payload.location));\n\n    case REMOVE_MEDIA_START: {\n      const isRemovingMedia = indexBy(payload.medias, '_id');\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => media && ({\n          ...media,\n          loading: isRemovingMedia[media._id] || media.loading,\n        })));\n    }\n    case REMOVE_MEDIA_COMPLETE: {\n      const isRemovedMedia = indexBy(payload.removedMedia, '_id');\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({ ...playlist, size: payload.newSize }),\n        items => items.filter(media => media === null || !isRemovedMedia[media._id]),\n      );\n    }\n    default:\n      return state;\n  }\n}\n"],"file":"playlists.js"}