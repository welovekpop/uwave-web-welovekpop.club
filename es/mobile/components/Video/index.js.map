{"version":3,"sources":["mobile/components/Video/index.js"],"names":["React","PropTypes","Player","VideoBackdrop","VoteButtons","Video","state","sourceType","undefined","enableOverlay","showVoteButtons","handleClick","setState","s","handlePlay","getDerivedStateFromProps","nextProps","prevState","media","render","props","voteStats","onUpvote","onDownvote","onFavorite","thumbnail","Component","propTypes","shape","string","isRequired","isUpvote","bool","isFavorite","isDownvote","func"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,aAAP,MAA0B,yCAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;IAEMC,K;;;;;;;;;;;;8GA8BJC,K,GAAQ;AACNC,kBAAYC,SADN;AACiB;AACvBC,qBAAe,KAFT;AAGNC,uBAAiB;AAHX,K,QAMRC,W,GAAc,YAAM;AAClB,YAAKC,QAAL,CAAc;AAAA,eAAM;AAClBF,2BAAiB,CAACG,EAAEH;AADF,SAAN;AAAA,OAAd;AAGD,K,QAGDI,U,GAAa,YAAM;AACjB,YAAKF,QAAL,CAAc;AAAEH,uBAAe;AAAjB,OAAd;AACD,K;;;QA5BMM,wB,qCAAyBC,S,EAAWC,S,EAAW;AAAA,eAC7BD,UAAUE,KAAV,IAAmB,EADU;AAAA,QAC5CX,UAD4C,QAC5CA,UAD4C,EAEpD;AACA;;;AACA,QAAIA,eAAeU,UAAUV,UAA7B,EAAyC;AACvC,aAAO;AACLE,uBAAeF,eAAeC,SADzB;AAELD;AAFK,OAAP;AAID;;AACD,WAAO,IAAP;AACD,G;;;;SAmBDY,M,qBAAS;AAAA,sBAQH,KAAKC,KARF;AAAA,QAELF,KAFK,eAELA,KAFK;AAAA,QAGLG,SAHK,eAGLA,SAHK;AAAA,QAILC,QAJK,eAILA,QAJK;AAAA,QAKLC,UALK,eAKLA,UALK;AAAA,QAMLC,UANK,eAMLA,UANK;AAAA,QAOFJ,KAPE;;AAAA,sBASoC,KAAKd,KATzC;AAAA,QASCG,aATD,eASCA,aATD;AAAA,QASgBC,eAThB,eASgBA,eAThB;AAWP,WACE;AAAK,iBAAU;AAAf,eACGQ,SAAS,KAAC,aAAD;AAAe,WAAKA,MAAMO;AAA1B,MADZ,EAEE;AAAK,iBAAU;AAAf,eACE,oBAAC,MAAD,eACML,KADN;AAEE,aAAOF,KAFT;AAGE,YAAK,OAHP;AAIE,cAAQ,KAAKJ;AAJf,OADF,CAFF,EAUGL,iBACC;AACE,iBAAU,qBADZ;AAEE,eAAS,KAAKE,WAFhB;AAGE,oBAAW;AAHb,MAXJ,EAiBGD,mBACC;AAAK,iBAAU;AAAf,eACE,oBAAC,WAAD,eACMW,SADN;AAEE,gBAAUC,QAFZ;AAGE,kBAAYC,UAHd;AAIE,kBAAYC;AAJd,OADF,CAlBJ,CADF;AA8BD,G;;;EAxFiBxB,MAAM0B,S;;AAApBrB,K,CACGsB,S,2CAAY;AACjBT,SAAOjB,UAAU2B,KAAV,CAAgB;AACrBrB,gBAAYN,UAAU4B,MAAV,CAAiBC,UADR;AAErBL,eAAWxB,UAAU4B,MAAV,CAAiBC;AAFP,GAAhB,CADU;AAKjBT,aAAWpB,UAAU2B,KAAV,CAAgB;AACzBG,cAAU9B,UAAU+B,IADK;AAEzBC,gBAAYhC,UAAU+B,IAFG;AAGzBE,gBAAYjC,UAAU+B;AAHG,GAAhB,CALM;AAWjBV,YAAUrB,UAAUkC,IAAV,CAAeL,UAXR;AAYjBP,cAAYtB,UAAUkC,IAAV,CAAeL,UAZV;AAajBN,cAAYvB,UAAUkC,IAAV,CAAeL;AAbV,C;AA0FrB,eAAezB,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Player from '../../../components/Player';\nimport VideoBackdrop from '../../../components/Video/VideoBackdrop';\nimport VoteButtons from './VoteButtons';\n\nclass Video extends React.Component {\n  static propTypes = {\n    media: PropTypes.shape({\n      sourceType: PropTypes.string.isRequired,\n      thumbnail: PropTypes.string.isRequired,\n    }),\n    voteStats: PropTypes.shape({\n      isUpvote: PropTypes.bool,\n      isFavorite: PropTypes.bool,\n      isDownvote: PropTypes.bool,\n    }),\n\n    onUpvote: PropTypes.func.isRequired,\n    onDownvote: PropTypes.func.isRequired,\n    onFavorite: PropTypes.func.isRequired,\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { sourceType } = nextProps.media || {};\n    // Switching to a different source type may require an autoplay tap again.\n    // Disable the vote buttons until the media source reports playback started.\n    if (sourceType !== prevState.sourceType) {\n      return {\n        enableOverlay: sourceType === undefined,\n        sourceType,\n      };\n    }\n    return null;\n  }\n\n  state = {\n    sourceType: undefined, // eslint-disable-line react/no-unused-state\n    enableOverlay: false,\n    showVoteButtons: false,\n  };\n\n  handleClick = () => {\n    this.setState(s => ({\n      showVoteButtons: !s.showVoteButtons,\n    }));\n  };\n\n  // Add the vote buttons tap-trap once autoplay permission is granted.\n  handlePlay = () => {\n    this.setState({ enableOverlay: true });\n  };\n\n  render() {\n    const {\n      media,\n      voteStats,\n      onUpvote,\n      onDownvote,\n      onFavorite,\n      ...props\n    } = this.props;\n    const { enableOverlay, showVoteButtons } = this.state;\n\n    return (\n      <div className=\"Video\">\n        {media && <VideoBackdrop url={media.thumbnail} />}\n        <div className=\"Video-player\">\n          <Player\n            {...props}\n            media={media}\n            size=\"large\"\n            onPlay={this.handlePlay}\n          />\n        </div>\n        {enableOverlay && (\n          <button\n            className=\"Video-buttonTrigger\"\n            onClick={this.handleClick}\n            aria-label=\"Show vote buttons\"\n          />\n        )}\n        {showVoteButtons && (\n          <div className=\"Video-buttons\">\n            <VoteButtons\n              {...voteStats}\n              onUpvote={onUpvote}\n              onDownvote={onDownvote}\n              onFavorite={onFavorite}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Video;\n"],"file":"index.js"}