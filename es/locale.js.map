{"version":3,"sources":["locale.js"],"names":["i18next","en","resources","cs","cy","de","es","fr","ko","nl","pt","zh","UwaveBackend","type","cache","getResource","language","Promise","reject","Error","read","namespace","callback","then","resource","result","catch","use","init","fallbackLng","defaultNS","interpolation","escapeValue","addResourceBundle","uwave","availableLanguages","Object","keys","createLocale","locale","cloneInstance","resolve","changeLanguage"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;;AAEA,IAAMC,YAAY;AAChBC,MAAI;AAAA,WAAM,OAAO,gBAAP,CAA2B,iCAA3B,CAAN;AAAA,GADY;AAEhBC,MAAI;AAAA,WAAM,OAAO,gBAAP,CAA2B,iCAA3B,CAAN;AAAA,GAFY;AAGhBC,MAAI;AAAA,WAAM,OAAO,gBAAP,CAA2B,iCAA3B,CAAN;AAAA,GAHY;AAIhBC,MAAI;AAAA,WAAM,OAAO,gBAAP,CAA2B,iCAA3B,CAAN;AAAA,GAJY;AAKhBC,MAAI;AAAA,WAAM,OAAO,gBAAP,CAA2B,iCAA3B,CAAN;AAAA,GALY;AAMhBC,MAAI;AAAA,WAAM,OAAO,gBAAP,CAA2B,iCAA3B,CAAN;AAAA,GANY;AAOhBC,MAAI;AAAA,WAAM,OAAO,gBAAP,CAA2B,iCAA3B,CAAN;AAAA,GAPY;AAQhBC,MAAI;AAAA,WAAM,OAAO,gBAAP,CAA2B,iCAA3B,CAAN;AAAA,GARY;AAShBC,MAAI;AAAA,WAAM,OAAO,gBAAP,CAA2B,iCAA3B,CAAN;AAAA;AATY,CAAlB;;IAYMC,Y;;;;SAEJC,I,GAAO,S;SACPC,K,GAAQ,E;;;yBAERC,W,wBAAYC,Q,EAAU;AACpB,QAAI,KAAKF,KAAL,CAAWE,QAAX,CAAJ,EAA0B;AACxB,aAAO,KAAKF,KAAL,CAAWE,QAAX,CAAP;AACD;AACD,QAAI,CAACd,UAAUc,QAAV,CAAL,EAA0B;AACxB,aAAOC,QAAQC,MAAR,CAAe,IAAIC,KAAJ,oBAA2BH,QAA3B,yBAAf,CAAP;AACD;;AAED,SAAKF,KAAL,CAAWE,QAAX,IAAuBd,UAAUc,QAAV,GAAvB;;AAEA,WAAO,KAAKF,KAAL,CAAWE,QAAX,CAAP;AACD,G;;yBAEDI,I,iBAAKJ,Q,EAAUK,S,EAAWC,Q,EAAU;AAClC,SAAKP,WAAL,CAAiBC,QAAjB,EACGO,IADH,CACQ;AAAA,aAAYC,SAASH,SAAT,CAAZ;AAAA,KADR,EAEGE,IAFH,CAEQ,UAACE,MAAD,EAAY;AAChBH,eAAS,IAAT,EAAeG,MAAf;AACD,KAJH,EAKGC,KALH,CAKSJ,QALT;AAMD,G;;;;;AAzBGV,Y,CACGC,I,GAAO,S;;;AA2BhBb,QAAQ2B,GAAR,CAAY,IAAIf,YAAJ,EAAZ;;AAEAZ,QAAQ4B,IAAR,CAAa;AACXC,eAAa,IADF;AAEXC,aAAW,OAFA;AAGXC,iBAAe;AACb;AACAC,iBAAa;AAFA;AAHJ,CAAb;;AASA;AACAhC,QAAQiC,iBAAR,CAA0B,IAA1B,EAAgC,OAAhC,EAAyChC,GAAGiC,KAA5C;;AAEA,OAAO,IAAMC,sBAAsB,IAAtB,SAA+BC,OAAOC,IAAP,CAAYnC,SAAZ,CAA/B,CAAN;;AAEP,eAAe,SAASoC,YAAT,CAAsBtB,QAAtB,EAAgC;AAC7C,MAAMuB,SAASvC,QAAQwC,aAAR,EAAf;AACAD,SAAOJ,kBAAP,GAA4BA,kBAA5B;;AAEA,SAAO,IAAIlB,OAAJ,CAAY,UAACwB,OAAD,EAAa;AAC9BF,WAAOG,cAAP,CAAsB1B,QAAtB,EAAgC,YAAM;AACpCyB,cAAQF,MAAR;AACD,KAFD;AAGD,GAJM,CAAP;AAKD","file":"locale.js","sourcesContent":["import i18next from 'i18next';\nimport * as en from '../locale/en.yaml';\n\nconst resources = {\n  cs: () => import('../locale/cs.yaml' /* webpackChunkName: \"lang_cs\" */),\n  cy: () => import('../locale/cy.yaml' /* webpackChunkName: \"lang_cy\" */),\n  de: () => import('../locale/de.yaml' /* webpackChunkName: \"lang_de\" */),\n  es: () => import('../locale/es.yaml' /* webpackChunkName: \"lang_es\" */),\n  fr: () => import('../locale/fr.yaml' /* webpackChunkName: \"lang_fr\" */),\n  ko: () => import('../locale/ko.yaml' /* webpackChunkName: \"lang_ko\" */),\n  nl: () => import('../locale/nl.yaml' /* webpackChunkName: \"lang_nl\" */),\n  pt: () => import('../locale/pt.yaml' /* webpackChunkName: \"lang_pt\" */),\n  zh: () => import('../locale/zh.yaml' /* webpackChunkName: \"lang_zh\" */),\n};\n\nclass UwaveBackend {\n  static type = 'backend';\n  type = 'backend';\n  cache = {};\n\n  getResource(language) {\n    if (this.cache[language]) {\n      return this.cache[language];\n    }\n    if (!resources[language]) {\n      return Promise.reject(new Error(`The language \"${language}\" is not supported.`));\n    }\n\n    this.cache[language] = resources[language]();\n\n    return this.cache[language];\n  }\n\n  read(language, namespace, callback) {\n    this.getResource(language)\n      .then(resource => resource[namespace])\n      .then((result) => {\n        callback(null, result);\n      })\n      .catch(callback);\n  }\n}\n\ni18next.use(new UwaveBackend());\n\ni18next.init({\n  fallbackLng: 'en',\n  defaultNS: 'uwave',\n  interpolation: {\n    // Prevent double-escapes: React already escapes things for us\n    escapeValue: false,\n  },\n});\n\n// Synchronously add the fallback language.\ni18next.addResourceBundle('en', 'uwave', en.uwave);\n\nexport const availableLanguages = ['en', ...Object.keys(resources)];\n\nexport default function createLocale(language) {\n  const locale = i18next.cloneInstance();\n  locale.availableLanguages = availableLanguages;\n\n  return new Promise((resolve) => {\n    locale.changeLanguage(language, () => {\n      resolve(locale);\n    });\n  });\n}\n"]}