{"version":3,"sources":["admin/containers/AdminApp.js"],"names":["PropTypes","compose","getContext","lifecycle","createStructuredSelector","connect","AdminApp","adminReducer","transition","currentViewSelector","mapStateToProps","currentView","mapDispatchToProps","onTransition","hasAdminState","store","state","getState","admin","mountAdminReducer","mount","mountAdminReducerOnce","enhance","object","componentWillMount","props"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,YAAP,MAAyB,aAAzB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,mBAAT,QAAoC,4BAApC;AAEA,IAAMC,kBAAkBN,yBAAyB;AAC/CO,eAAaF;AADkC,CAAzB,CAAxB;AAIA,IAAMG,qBAAqB;AACzBC,gBAAcL;AADW,CAA3B;;AAIA,SAASM,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAMC,QAAQD,MAAME,QAAN,EAAd;AAEA,SAAOD,SAAS,CAAC,CAACA,MAAME,KAAxB;AACD;;AAED,SAASC,iBAAT,CAA2BJ,KAA3B,EAAkC;AAChCA,QAAMK,KAAN,CAAY,OAAZ,EAAqBb,YAArB;AACD;;AAED,SAASc,qBAAT,CAA+BN,KAA/B,EAAsC;AACpC,MAAI,CAACD,cAAcC,KAAd,CAAL,EAA2B;AACzBI,sBAAkBJ,KAAlB;AACD;AACF;;AAED,IAAMO,UAAUrB,QACdC,WAAW;AAAEa,SAAOf,UAAUuB;AAAnB,CAAX,CADc,EAEdpB,UAAU;AACRqB,oBADQ,gCACa;AACnB,QAAI,KAAKC,KAAL,CAAWV,KAAf,EAAsB;AACpBM,4BAAsB,KAAKI,KAAL,CAAWV,KAAjC;AACD;AACF;AALO,CAAV,CAFc,EASdV,QAAQK,eAAR,EAAyBE,kBAAzB,CATc,CAAhB;AAYA,eAAeU,QAAQhB,QAAR,CAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport compose from 'recompose/compose';\nimport getContext from 'recompose/getContext';\nimport lifecycle from 'recompose/lifecycle';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport AdminApp from '../components/AdminApp';\nimport adminReducer from '../reducers';\nimport { transition } from '../actions/view';\nimport { currentViewSelector } from '../selectors/viewSelectors';\n\nconst mapStateToProps = createStructuredSelector({\n  currentView: currentViewSelector,\n});\n\nconst mapDispatchToProps = {\n  onTransition: transition,\n};\n\nfunction hasAdminState(store) {\n  const state = store.getState();\n\n  return state && !!state.admin;\n}\n\nfunction mountAdminReducer(store) {\n  store.mount('admin', adminReducer);\n}\n\nfunction mountAdminReducerOnce(store) {\n  if (!hasAdminState(store)) {\n    mountAdminReducer(store);\n  }\n}\n\nconst enhance = compose(\n  getContext({ store: PropTypes.object }),\n  lifecycle({\n    componentWillMount() {\n      if (this.props.store) {\n        mountAdminReducerOnce(this.props.store);\n      }\n    },\n  }),\n  connect(mapStateToProps, mapDispatchToProps),\n);\n\nexport default enhance(AdminApp);\n"],"file":"AdminApp.js"}