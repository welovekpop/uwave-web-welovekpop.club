{"version":3,"sources":["utils/commands/mutes.js"],"names":["ms","register","findUser","log","mutedUsersSelector","userListSelector","isModeratorSelector","muteUser","unmuteUser","guard","action","username","duration","dispatch","getState","user"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,iBAAnC;AACA,SAASC,GAAT,QAAoB,kCAApB;;AAEA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SACEC,gBADF,EAEEC,mBAFF,QAGO,+BAHP;AAIA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,wCAArC;;AAEAP,SACE,MADF,EAEE,uFAFF,EAGE;AACEQ,SAAOH,mBADT;AAEEI,UAAQ,gBAACC,QAAD;AAAA,QAAWC,QAAX,uEAAsB,KAAtB;AAAA,WAAgC,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9D,UAAI,CAACH,QAAL,EAAe;AACb,eAAOE,SAASV,IAAI,yBAAJ,CAAT,CAAP;AACD;AACD,UAAMY,OAAOb,SACXG,iBAAiBS,UAAjB,CADW,EAEXH,QAFW,CAAb;AAIA,UAAI,CAACI,IAAL,EAAW;AACT,eAAOF,SAASV,eAAaQ,QAAb,sBAAT,CAAP;AACD;AACD,aAAOE,SAASN,SAASQ,IAAT,EAAef,QAAMY,QAAN,CAAf,CAAT,CAAP;AACD,KAZO;AAAA;AAFV,CAHF;;AAqBAX,SACE,QADF,EAEE,mDAFF,EAGE;AACEQ,SAAOH,mBADT;AAEEI,UAAQ;AAAA,WAAY,UAACG,QAAD,EAAWC,QAAX,EAAwB;AAC1C,UAAI,CAACH,QAAL,EAAe;AACb,eAAOE,SAASV,IAAI,2BAAJ,CAAT,CAAP;AACD;AACD,UAAMY,OAAOb,SAASE,mBAAmBU,UAAnB,CAAT,EAAyCH,QAAzC,CAAb;AACA,UAAI,CAACI,IAAL,EAAW;AACT,eAAOF,SAASV,eAAaQ,QAAb,qBAAT,CAAP;AACD;AACD,aAAOE,SAASL,WAAWO,IAAX,CAAT,CAAP;AACD,KATO;AAAA;AAFV,CAHF","file":"mutes.js","sourcesContent":["import ms from 'ms';\nimport { register, findUser } from '../ChatCommands';\nimport { log } from '../../actions/ChatActionCreators';\n\nimport { mutedUsersSelector } from '../../selectors/chatSelectors';\nimport {\n  userListSelector,\n  isModeratorSelector\n} from '../../selectors/userSelectors';\nimport { muteUser, unmuteUser } from '../../actions/ModerationActionCreators';\n\nregister(\n  'mute',\n  'Mute a user in chat, preventing them from chatting. Syntax: \"/mute username duration\"',\n  {\n    guard: isModeratorSelector,\n    action: (username, duration = '30m') => (dispatch, getState) => {\n      if (!username) {\n        return dispatch(log('Provide a user to mute.'));\n      }\n      const user = findUser(\n        userListSelector(getState()),\n        username\n      );\n      if (!user) {\n        return dispatch(log(`User \"${username}\" is not online.`));\n      }\n      return dispatch(muteUser(user, ms(`${duration}`)));\n    }\n  }\n);\n\nregister(\n  'unmute',\n  'Unmute a user in chat. Syntax: \"/unmute username\"',\n  {\n    guard: isModeratorSelector,\n    action: username => (dispatch, getState) => {\n      if (!username) {\n        return dispatch(log('Provide a user to unmute.'));\n      }\n      const user = findUser(mutedUsersSelector(getState()), username);\n      if (!user) {\n        return dispatch(log(`User \"${username}\" is not muted.`));\n      }\n      return dispatch(unmuteUser(user));\n    }\n  }\n);\n"]}