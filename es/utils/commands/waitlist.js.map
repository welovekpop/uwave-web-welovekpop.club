{"version":3,"sources":["utils/commands/waitlist.js"],"names":["register","findUser","log","joinWaitlist","modClearWaitlist","modLockWaitlist","modUnlockWaitlist","skipCurrentDJ","removeWaitlistUser","moveWaitlistUser","userListSelector","isModeratorSelector","waitlistUsersSelector","djAndWaitlistUsersSelector","guard","action","args","join","dispatch","getState","username","user","posStr","position","parseInt"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,iBAAnC;AACA,SAASC,GAAT,QAAoB,kCAApB;;AAEA,SACEC,YADF,EAEEC,gBAFF,EAGEC,eAHF,EAIEC,iBAJF,QAKO,sCALP;AAMA,SACEC,aADF,EAEEC,kBAFF,EAGEC,gBAHF,QAIO,wCAJP;AAKA,SACEC,gBADF,EAEEC,mBAFF,QAGO,+BAHP;AAIA,SACEC,qBADF,EAEEC,0BAFF,QAGO,mCAHP;;AAKAb,SAAS,MAAT,EAAiB,sBAAjB,EAAyC;AACvCc,SAAOH,mBADgC;AAEvCI,UAAQ;AAAA,sCAAIC,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAaT,cAAcS,OAAOA,KAAKC,IAAL,CAAU,GAAV,CAAP,GAAwB,mBAAtC,CAAb;AAAA;AAF+B,CAAzC;;AAKAjB,SACE,OADF,EAEE,uDAFF,EAGE;AACEc,SAAOH,mBADT;AAEEI,UAAQ;AAAA,WAAY,UAACG,QAAD,EAAWC,QAAX,EAAwB;AAC1C,UAAI,CAACC,QAAL,EAAe;AACb,eAAOF,SAAShB,IAAI,kEAAJ,CAAT,CAAP;AACD;;AAED,UAAMmB,OAAOpB,SAASS,iBAAiBS,UAAjB,CAAT,EAAuCC,QAAvC,CAAb;AACA,UAAIC,IAAJ,EAAU;AACR,eAAOH,SAASf,aAAakB,IAAb,CAAT,CAAP;AACD;AACD,aAAOH,SAAShB,cAAYkB,QAAZ,+BAAT,CAAP;AACD,KAVO;AAAA;AAFV,CAHF;;AAmBApB,SACE,UADF,EAEE,+DAFF,EAGE;AACEc,SAAOH,mBADT;AAEEI,UAAQ;AAAA,WAAY,UAACG,QAAD,EAAWC,QAAX,EAAwB;AAC1C,UAAI,CAACC,QAAL,EAAe;AACb,eAAOF,SAAShB,IAAI,0EAAJ,CAAT,CAAP;AACD;;AAED,UAAMmB,OAAOpB,SACXY,2BAA2BM,UAA3B,CADW,EAEXC,QAFW,CAAb;AAIA,UAAIC,IAAJ,EAAU;AACR,eAAOH,SAASV,mBAAmBa,IAAnB,CAAT,CAAP;AACD;AACD,aAAOH,SAAShB,cAAYkB,QAAZ,8BAAT,CAAP;AACD,KAbO;AAAA;AAFV,CAHF;;AAsBApB,SACE,SADF,EAEE,oCAFF,EAGE,EAAEc,OAAOH,mBAAT,EAA8BI,QAAQX,gBAAtC,EAHF;;AAMAJ,SACE,QADF,EAEE,oBAFF,EAGE,EAAEc,OAAOH,mBAAT,EAA8BI,QAAQV,eAAtC,EAHF;;AAMAL,SACE,UADF,EAEE,sBAFF,EAGE,EAAEc,OAAOH,mBAAT,EAA8BI,QAAQT,iBAAtC,EAHF;;AAMAN,SACE,QADF,EAEE,0DACA,qCAHF,EAIE;AACEc,SAAOH,mBADT;AAEEI,UAAQ,gBAACK,QAAD,EAAWE,MAAX;AAAA,WAAsB,UAACJ,QAAD,EAAWC,QAAX,EAAwB;AACpD,UAAI,CAACC,QAAL,EAAe;AACb,eAAOF,SAAShB,IAAI,6EAAJ,CAAT,CAAP;AACD;AACD,UAAMqB,WAAWC,SAASF,MAAT,EAAiB,EAAjB,IAAuB,CAAxC;AACA,UAAI,OAAOC,QAAP,KAAoB,QAApB,IAAgCA,WAAW,CAA/C,EAAkD;AAChD,eAAOL,SAAShB,qCAAmCkB,QAAnC,8CAAT,CAAP;AACD;;AAED,UAAMC,OAAOpB,SACXW,sBAAsBO,UAAtB,CADW,EAEXC,QAFW,CAAb;AAIA,UAAIC,IAAJ,EAAU;AACR,eAAOH,SAAST,iBAAiBY,IAAjB,EAAuBE,QAAvB,CAAT,CAAP;AACD;AACD,aAAOL,SAAShB,cAAYkB,QAAZ,8BAAT,CAAP;AACD,KAjBO;AAAA;AAFV,CAJF","file":"waitlist.js","sourcesContent":["import { register, findUser } from '../ChatCommands';\nimport { log } from '../../actions/ChatActionCreators';\n\nimport {\n  joinWaitlist,\n  modClearWaitlist,\n  modLockWaitlist,\n  modUnlockWaitlist\n} from '../../actions/WaitlistActionCreators';\nimport {\n  skipCurrentDJ,\n  removeWaitlistUser,\n  moveWaitlistUser\n} from '../../actions/ModerationActionCreators';\nimport {\n  userListSelector,\n  isModeratorSelector\n} from '../../selectors/userSelectors';\nimport {\n  waitlistUsersSelector,\n  djAndWaitlistUsersSelector\n} from '../../selectors/waitlistSelectors';\n\nregister('skip', 'Skip the current DJ.', {\n  guard: isModeratorSelector,\n  action: (...args) => skipCurrentDJ(args ? args.join(' ') : '[No reason given]')\n});\n\nregister(\n  'wladd',\n  'Add a user to the waitlist. Syntax: \"/wladd username\"',\n  {\n    guard: isModeratorSelector,\n    action: username => (dispatch, getState) => {\n      if (!username) {\n        return dispatch(log('Provide a user to add to the waitlist. Syntax: \"/wladd username\"'));\n      }\n\n      const user = findUser(userListSelector(getState()), username);\n      if (user) {\n        return dispatch(joinWaitlist(user));\n      }\n      return dispatch(log(`User ${username} is not online right now.`));\n    }\n  }\n);\n\nregister(\n  'wlremove',\n  'Remove a user from the waitlist. Syntax: \"/wlremove username\"',\n  {\n    guard: isModeratorSelector,\n    action: username => (dispatch, getState) => {\n      if (!username) {\n        return dispatch(log('Provide a user to remove from the waitlist. Syntax: \"/wlremove username\"'));\n      }\n\n      const user = findUser(\n        djAndWaitlistUsersSelector(getState()),\n        username\n      );\n      if (user) {\n        return dispatch(removeWaitlistUser(user));\n      }\n      return dispatch(log(`User ${username} is not in the waitlist.`));\n    }\n  }\n);\n\nregister(\n  'wlclear',\n  'Remove everyone from the waitlist.',\n  { guard: isModeratorSelector, action: modClearWaitlist }\n);\n\nregister(\n  'wllock',\n  'Lock the waitlist.',\n  { guard: isModeratorSelector, action: modLockWaitlist }\n);\n\nregister(\n  'wlunlock',\n  'Unlock the waitlist.',\n  { guard: isModeratorSelector, action: modUnlockWaitlist }\n);\n\nregister(\n  'wlmove',\n  'Move a user to a different position in the waitlist. ' +\n  'Syntax: \"/wlmove username position\"',\n  {\n    guard: isModeratorSelector,\n    action: (username, posStr) => (dispatch, getState) => {\n      if (!username) {\n        return dispatch(log('Provide a user to move in the waitlist. Syntax: \"/wlmove username position\"'));\n      }\n      const position = parseInt(posStr, 10) - 1;\n      if (typeof position !== 'number' || position < 0) {\n        return dispatch(log(`Provide a position to move @${username} to. Syntax: \"/wlmove username position\"`));\n      }\n\n      const user = findUser(\n        waitlistUsersSelector(getState()),\n        username\n      );\n      if (user) {\n        return dispatch(moveWaitlistUser(user, position));\n      }\n      return dispatch(log(`User ${username} is not in the waitlist.`));\n    }\n  }\n);\n"]}