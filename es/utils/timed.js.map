{"version":3,"sources":["utils/timed.js"],"names":["React","PropTypes","wrapDisplayName","currentTimeSelector","Component","Timed","state","currentTime","getCurrentTime","tick","setState","componentDidMount","context","timerCallbacks","add","componentWillUnmount","remove","store","getState","render","props","displayName","contextTypes","object","isRequired","shape","func"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,SAASC,mBAAT,QAAoC,4BAApC;;AAEA,eAAe,YAAY;AACzB,SAAO,UAACC,SAAD,EAAe;AAAA,QACdC,KADc;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,4JAYlBC,KAZkB,GAYV;AACNC,uBAAa,MAAKC,cAAL;AADP,SAZU,QA4BlBC,IA5BkB,GA4BX,YAAM;AACX,gBAAKC,QAAL,CAAc;AACZH,yBAAa,MAAKC,cAAL;AADD,WAAd;AAGD,SAhCiB;AAAA;;AAAA,sBAgBlBG,iBAhBkB,gCAgBE;AAClB,aAAKC,OAAL,CAAaC,cAAb,CAA4BC,GAA5B,CAAgC,KAAKL,IAArC;AACD,OAlBiB;;AAAA,sBAoBlBM,oBApBkB,mCAoBK;AACrB,aAAKH,OAAL,CAAaC,cAAb,CAA4BG,MAA5B,CAAmC,KAAKP,IAAxC;AACD,OAtBiB;;AAAA,sBAwBlBD,cAxBkB,6BAwBD;AACf,eAAOL,oBAAoB,KAAKS,OAAL,CAAaK,KAAb,CAAmBC,QAAnB,EAApB,CAAP;AACD,OA1BiB;;AAAA,sBAkClBC,MAlCkB,qBAkCT;AACP,eACE,oBAAC,SAAD,eACM,KAAKC,KADX;AAEE,uBAAa,KAAKd,KAAL,CAAWC;AAF1B,WADF;AAMD,OAzCiB;;AAAA;AAAA,MACAP,MAAMI,SADN;;AACdC,SADc,CAEXgB,WAFW,GAEGnB,gBAAgBE,SAAhB,EAA2B,OAA3B,CAFH;AACdC,SADc,CAIXiB,YAJW,GAII;AACpBL,aAAOhB,UAAUsB,MAAV,CAAiBC,UADJ;AAEpBX,sBAAgBZ,UAAUwB,KAAV,CAAgB;AAC9BX,aAAKb,UAAUyB,IADe;AAE9BV,gBAAQf,UAAUyB;AAFY,OAAhB,EAGbF;AALiB,KAJJ;;AA2CpB,WAAOnB,KAAP;AACD,GA5CD;AA6CD","file":"timed.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport wrapDisplayName from 'recompose/wrapDisplayName';\nimport { currentTimeSelector } from '../selectors/timeSelectors';\n\nexport default function () {\n  return (Component) => {\n    class Timed extends React.Component {\n      static displayName = wrapDisplayName(Component, 'Timed');\n\n      static contextTypes = {\n        store: PropTypes.object.isRequired,\n        timerCallbacks: PropTypes.shape({\n          add: PropTypes.func,\n          remove: PropTypes.func,\n        }).isRequired,\n      };\n\n      state = {\n        currentTime: this.getCurrentTime(),\n      };\n\n      componentDidMount() {\n        this.context.timerCallbacks.add(this.tick);\n      }\n\n      componentWillUnmount() {\n        this.context.timerCallbacks.remove(this.tick);\n      }\n\n      getCurrentTime() {\n        return currentTimeSelector(this.context.store.getState());\n      }\n\n      tick = () => {\n        this.setState({\n          currentTime: this.getCurrentTime(),\n        });\n      };\n\n      render() {\n        return (\n          <Component\n            {...this.props}\n            currentTime={this.state.currentTime}\n          />\n        );\n      }\n    }\n    return Timed;\n  };\n}\n"]}