{"version":3,"sources":["utils/timed.js"],"names":["React","PropTypes","wrapDisplayName","currentTimeSelector","Component","Timed","state","currentTime","getCurrentTime","tick","setState","componentDidMount","context","timerCallbacks","push","componentWillUnmount","index","indexOf","splice","store","getState","render","props","displayName","contextTypes","object","isRequired","arrayOf","func"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,SAASC,mBAAT,QAAoC,4BAApC;;AAEA,eAAe,YAAY;AACzB,SAAO,UAACC,SAAD,EAAe;AAAA,QACdC,KADc;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,4JASlBC,KATkB,GASV;AACNC,uBAAa,MAAKC,cAAL;AADP,SATU,QA6BlBC,IA7BkB,GA6BX,YAAM;AACX,gBAAKC,QAAL,CAAc;AACZH,yBAAa,MAAKC,cAAL;AADD,WAAd;AAGD,SAjCiB;AAAA;;AAAA,sBAalBG,iBAbkB,gCAaE;AAClB,aAAKC,OAAL,CAAaC,cAAb,CAA4BC,IAA5B,CAAiC,KAAKL,IAAtC;AACD,OAfiB;;AAAA,sBAiBlBM,oBAjBkB,mCAiBK;AAAA,YACbF,cADa,GACM,KAAKD,OADX,CACbC,cADa;;AAErB,YAAMG,QAAQH,eAAeI,OAAf,CAAuB,KAAKR,IAA5B,CAAd;AACA,YAAIO,UAAU,CAAC,CAAf,EAAkB;AAChBH,yBAAeK,MAAf,CAAsBF,KAAtB,EAA6B,CAA7B;AACD;AACF,OAvBiB;;AAAA,sBAyBlBR,cAzBkB,6BAyBD;AACf,eAAOL,oBAAoB,KAAKS,OAAL,CAAaO,KAAb,CAAmBC,QAAnB,EAApB,CAAP;AACD,OA3BiB;;AAAA,sBAmClBC,MAnCkB,qBAmCT;AACP,eACE,oBAAC,SAAD,eACM,KAAKC,KADX;AAEE,uBAAa,KAAKhB,KAAL,CAAWC;AAF1B,WADF;AAMD,OA1CiB;;AAAA;AAAA,MACAP,MAAMI,SADN;;AACdC,SADc,CAEXkB,WAFW,GAEGrB,gBAAgBE,SAAhB,EAA2B,OAA3B,CAFH;AACdC,SADc,CAIXmB,YAJW,GAII;AACpBL,aAAOlB,UAAUwB,MAAV,CAAiBC,UADJ;AAEpBb,sBAAgBZ,UAAU0B,OAAV,CAAkB1B,UAAU2B,IAA5B,EAAkCF;AAF9B,KAJJ;;AA4CpB,WAAOrB,KAAP;AACD,GA7CD;AA8CD","file":"timed.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport wrapDisplayName from 'recompose/wrapDisplayName';\nimport { currentTimeSelector } from '../selectors/timeSelectors';\n\nexport default function () {\n  return (Component) => {\n    class Timed extends React.Component {\n      static displayName = wrapDisplayName(Component, 'Timed');\n\n      static contextTypes = {\n        store: PropTypes.object.isRequired,\n        timerCallbacks: PropTypes.arrayOf(PropTypes.func).isRequired\n      };\n\n      state = {\n        currentTime: this.getCurrentTime()\n      };\n\n      componentDidMount() {\n        this.context.timerCallbacks.push(this.tick);\n      }\n\n      componentWillUnmount() {\n        const { timerCallbacks } = this.context;\n        const index = timerCallbacks.indexOf(this.tick);\n        if (index !== -1) {\n          timerCallbacks.splice(index, 1);\n        }\n      }\n\n      getCurrentTime() {\n        return currentTimeSelector(this.context.store.getState());\n      }\n\n      tick = () => {\n        this.setState({\n          currentTime: this.getCurrentTime()\n        });\n      };\n\n      render() {\n        return (\n          <Component\n            {...this.props}\n            currentTime={this.state.currentTime}\n          />\n        );\n      }\n    }\n    return Timed;\n  };\n}\n"]}