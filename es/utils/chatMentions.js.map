{"version":3,"sources":["utils/chatMentions.js"],"names":["find","userListSelector","groupMentions","getAvailableGroupMentions","user","Object","keys","filter","role","mention","resolveMentions","tree","state","users","forEach","node","type","group","username","toLowerCase","content","hasMention","id","some","_id","Array","isArray"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;;AAEA,SAASA,aAAT;;AAEA;;;;;AAKA,OAAO,SAASC,yBAAT,CAAmCC,IAAnC,EAAyC;AAC9C,MAAIA,IAAJ,EAAU;AACR,WAAOC,OAAOC,IAAP,CAAYJ,aAAZ,EAA2BK,MAA3B,CAAkC;AAAA,aAAWH,KAAKI,IAAL,IAAaN,cAAcO,OAAd,EAAuBD,IAA/C;AAAA,KAAlC,CAAP;AACD;AACD,SAAO,EAAP;AACD;;AAED;;;;;;AAMA,OAAO,SAASE,eAAT,CAAyBC,IAAzB,EAA+BC,KAA/B,EAAsC;AAC3C,MAAMC,QAAQZ,iBAAiBW,KAAjB,CAAd;AACAD,OAAKG,OAAL,CAAa,UAACC,IAAD,EAAU;AACrB,QAAIA,KAAKC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,UAAMC,QAAQf,cAAca,KAAKN,OAAnB,CAAd;AACA;AACA,UAAIQ,KAAJ,EAAW;AACTF,aAAKE,KAAL,GAAaA,MAAMJ,KAAN,CAAYD,KAAZ,CAAb;AACD,OAFD,MAEO;AACLG,aAAKX,IAAL,GAAYJ,KAAKa,KAAL,EAAY;AAAA,iBAAQT,KAAKc,QAAL,CAAcC,WAAd,OAAgCJ,KAAKN,OAA7C;AAAA,SAAZ,CAAZ;AACD;AACD;AACD,KATD,MASO,IAAIM,KAAKK,OAAT,EAAkB;AACvBV,sBAAgBK,KAAKK,OAArB,EAA8BR,KAA9B;AACD;AACF,GAbD;AAcD;;AAED;;;;;;;AAOA,OAAO,SAASS,UAAT,CAAoBV,IAApB,EAA0BW,EAA1B,EAA8B;AACnC,SAAOX,KAAKY,IAAL,CAAU,UAACR,IAAD,EAAU;AACzB,QAAIA,KAAKC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,UAAID,KAAKX,IAAT,EAAe;AACb,eAAOW,KAAKX,IAAL,CAAUoB,GAAV,KAAkBF,EAAzB;AACD,OAFD,MAEO,IAAIP,KAAKE,KAAT,EAAgB;AACrB,eAAOF,KAAKE,KAAL,CAAWM,IAAX,CAAgB;AAAA,iBAAQnB,KAAKoB,GAAL,KAAaF,EAArB;AAAA,SAAhB,CAAP;AACD;AACD,aAAO,KAAP;AACD;AACD,WAAOG,MAAMC,OAAN,CAAcX,IAAd,KAAuBM,WAAWN,IAAX,EAAiBO,EAAjB,CAA9B;AACD,GAVM,CAAP;AAWD","file":"chatMentions.js","sourcesContent":["import find from 'lodash/find';\nimport { userListSelector } from '../selectors/userSelectors';\nimport * as groupMentions from './groupMentions';\n\nexport { groupMentions };\n\n/**\n * Get a list of group names that can be mentioned by a user.\n *\n * @param {{ role: number }} user\n */\nexport function getAvailableGroupMentions(user) {\n  if (user) {\n    return Object.keys(groupMentions).filter(mention => user.role >= groupMentions[mention].role);\n  }\n  return [];\n}\n\n/**\n * Attach user objects to mentions in a parsed chat message.\n *\n * @param {Array} tree Parsed message.\n * @param {Array.<{username: string}>} users List of users.\n */\nexport function resolveMentions(tree, state) {\n  const users = userListSelector(state);\n  tree.forEach((node) => {\n    if (node.type === 'mention') {\n      const group = groupMentions[node.mention];\n      /* eslint-disable no-param-reassign */\n      if (group) {\n        node.group = group.users(state);\n      } else {\n        node.user = find(users, user => user.username.toLowerCase() === node.mention);\n      }\n      /* eslint-enable no-param-reassign */\n    } else if (node.content) {\n      resolveMentions(node.content, state);\n    }\n  });\n}\n\n/**\n * Check whether a parsed chat message mentions a given user ID. Expects mention\n * nodes to have User data, added by `resolveMentions()`.\n *\n * @param {Array} tree Parsed message.\n * @param {String} id User ID.\n */\nexport function hasMention(tree, id) {\n  return tree.some((node) => {\n    if (node.type === 'mention') {\n      if (node.user) {\n        return node.user._id === id;\n      } else if (node.group) {\n        return node.group.some(user => user._id === id);\n      }\n      return false;\n    }\n    return Array.isArray(node) && hasMention(node, id);\n  });\n}\n"]}