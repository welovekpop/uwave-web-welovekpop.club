{"version":3,"sources":["utils/ReconnectingWebSocket.js"],"names":["ReconnectingWebSocket","window","url","protocols","options","settings","debug","automaticOpen","reconnectInterval","maxReconnectInterval","reconnectDecay","timeoutInterval","maxReconnectAttempts","binaryType","key","reconnectAttempts","readyState","WebSocket","CONNECTING","protocol","self","ws","forcedClose","timedOut","eventTarget","document","createElement","addEventListener","event","onopen","onclose","onconnecting","onmessage","onerror","bind","removeEventListener","dispatchEvent","generateEvent","s","args","evt","createEvent","initCustomEvent","open","reconnectAttempt","debugAll","console","localWs","timeout","setTimeout","close","clearTimeout","OPEN","e","isReconnect","CLOSED","code","reason","wasClean","Math","pow","data","send","refresh","prototype","CLOSING"],"mappings":"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","file":"ReconnectingWebSocket.js","sourcesContent":["/* eslint-disable */\n\n/**\n * This is an external dependency, but it's not on NPM and taking dependencies\n * from Github is awkward so I've just downloaded and added it manually here\n * instead.\n */\n\n// MIT License:\n//\n// Copyright (c) 2010-2012, Joe Walnes\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * This behaves like a WebSocket in every way, except if it fails to connect,\n * or it gets disconnected, it will repeatedly poll until it successfully connects\n * again.\n *\n * It is API compatible, so when you have:\n *   ws = new WebSocket('ws://....');\n * you can replace with:\n *   ws = new ReconnectingWebSocket('ws://....');\n *\n * The event stream will typically look like:\n *  onconnecting\n *  onopen\n *  onmessage\n *  onmessage\n *  onclose // lost connection\n *  onconnecting\n *  onopen  // sometime later...\n *  onmessage\n *  onmessage\n *  etc...\n *\n * It is API compatible with the standard WebSocket API, apart from the following members:\n *\n * - `bufferedAmount`\n * - `extensions`\n * - `binaryType`\n *\n * Latest version: https://github.com/joewalnes/reconnecting-websocket/\n * - Joe Walnes\n *\n * Syntax\n * ======\n * var socket = new ReconnectingWebSocket(url, protocols, options);\n *\n * Parameters\n * ==========\n * url - The url you are connecting to.\n * protocols - Optional string or array of protocols.\n * options - See below\n *\n * Options\n * =======\n * Options can either be passed upon instantiation or set after instantiation:\n *\n * var socket = new ReconnectingWebSocket(url, null, { debug: true, reconnectInterval: 4000 });\n *\n * or\n *\n * var socket = new ReconnectingWebSocket(url);\n * socket.debug = true;\n * socket.reconnectInterval = 4000;\n *\n * debug\n * - Whether this instance should log debug messages. Accepts true or false. Default: false.\n *\n * automaticOpen\n * - Whether or not the websocket should attempt to connect immediately upon instantiation. The socket can be manually opened or closed at any time using ws.open() and ws.close().\n *\n * reconnectInterval\n * - The number of milliseconds to delay before attempting to reconnect. Accepts integer. Default: 1000.\n *\n * maxReconnectInterval\n * - The maximum number of milliseconds to delay a reconnection attempt. Accepts integer. Default: 30000.\n *\n * reconnectDecay\n * - The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. Accepts integer or float. Default: 1.5.\n *\n * timeoutInterval\n * - The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. Accepts integer. Default: 2000.\n *\n */\n\nlet ReconnectingWebSocket = () => {};\n\nif (typeof window !== 'undefined' && 'WebSocket' in window) {\n  ReconnectingWebSocket = function ReconnectingWebSocket(url, protocols, options) {\n    // Default settings\n    var settings = {\n      /** Whether this instance should log debug messages. */\n      debug: false,\n\n      /** Whether or not the websocket should attempt to connect immediately upon instantiation. */\n      automaticOpen: true,\n\n      /** The number of milliseconds to delay before attempting to reconnect. */\n      reconnectInterval: 1000,\n      /** The maximum number of milliseconds to delay a reconnection attempt. */\n      maxReconnectInterval: 30000,\n      /** The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. */\n      reconnectDecay: 1.5,\n\n      /** The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. */\n      timeoutInterval: 2000,\n\n      /** The maximum number of reconnection attempts to make. Unlimited if null. */\n      maxReconnectAttempts: null,\n\n      /** The binary type, possible values 'blob' or 'arraybuffer', default 'blob'. */\n      binaryType: 'blob'\n    }\n    if (!options) { options = {}; }\n\n    // Overwrite and define settings with options if they exist.\n    for (var key in settings) {\n      if (typeof options[key] !== 'undefined') {\n        this[key] = options[key];\n      } else {\n        this[key] = settings[key];\n      }\n    }\n\n    // These should be treated as read-only properties\n\n    /** The URL as resolved by the constructor. This is always an absolute URL. Read only. */\n    this.url = url;\n\n    /** The number of attempted reconnects since starting, or the last successful connection. Read only. */\n    this.reconnectAttempts = 0;\n\n    /**\n     * The current state of the connection.\n     * Can be one of: WebSocket.CONNECTING, WebSocket.OPEN, WebSocket.CLOSING, WebSocket.CLOSED\n     * Read only.\n     */\n    this.readyState = WebSocket.CONNECTING;\n\n    /**\n     * A string indicating the name of the sub-protocol the server selected; this will be one of\n     * the strings specified in the protocols parameter when creating the WebSocket object.\n     * Read only.\n     */\n    this.protocol = null;\n\n    // Private state variables\n\n    var self = this;\n    var ws;\n    var forcedClose = false;\n    var timedOut = false;\n    var eventTarget = document.createElement('div');\n\n    // Wire up \"on*\" properties as event handlers\n\n    eventTarget.addEventListener('open',       function(event) { self.onopen(event); });\n    eventTarget.addEventListener('close',      function(event) { self.onclose(event); });\n    eventTarget.addEventListener('connecting', function(event) { self.onconnecting(event); });\n    eventTarget.addEventListener('message',    function(event) { self.onmessage(event); });\n    eventTarget.addEventListener('error',      function(event) { self.onerror(event); });\n\n    // Expose the API required by EventTarget\n\n    this.addEventListener = eventTarget.addEventListener.bind(eventTarget);\n    this.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);\n    this.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);\n\n    /**\n     * This function generates an event that is compatible with standard\n     * compliant browsers and IE9 - IE11\n     *\n     * This will prevent the error:\n     * Object doesn't support this action\n     *\n     * http://stackoverflow.com/questions/19345392/why-arent-my-parameters-getting-passed-through-to-a-dispatched-event/19345563#19345563\n     * @param s String The name that the event should use\n     * @param args Object an optional object that the event will use\n     */\n    function generateEvent(s, args) {\n      var evt = document.createEvent(\"CustomEvent\");\n      evt.initCustomEvent(s, false, false, args);\n      return evt;\n    };\n\n    this.open = function (reconnectAttempt) {\n      ws = new WebSocket(self.url, protocols || []);\n      ws.binaryType = this.binaryType;\n\n      if (reconnectAttempt) {\n        if (this.maxReconnectAttempts && this.reconnectAttempts > this.maxReconnectAttempts) {\n          return;\n        }\n      } else {\n        eventTarget.dispatchEvent(generateEvent('connecting'));\n        this.reconnectAttempts = 0;\n      }\n\n      if (self.debug || ReconnectingWebSocket.debugAll) {\n        console.debug('ReconnectingWebSocket', 'attempt-connect', self.url);\n      }\n\n      var localWs = ws;\n      var timeout = setTimeout(function() {\n        if (self.debug || ReconnectingWebSocket.debugAll) {\n          console.debug('ReconnectingWebSocket', 'connection-timeout', self.url);\n        }\n        timedOut = true;\n        localWs.close();\n        timedOut = false;\n      }, self.timeoutInterval);\n\n      ws.onopen = function(event) {\n        clearTimeout(timeout);\n        if (self.debug || ReconnectingWebSocket.debugAll) {\n          console.debug('ReconnectingWebSocket', 'onopen', self.url);\n        }\n        self.protocol = ws.protocol;\n        self.readyState = WebSocket.OPEN;\n        self.reconnectAttempts = 0;\n        var e = generateEvent('open');\n        e.isReconnect = reconnectAttempt;\n        reconnectAttempt = false;\n        eventTarget.dispatchEvent(e);\n      };\n\n      ws.onclose = function(event) {\n        clearTimeout(timeout);\n        ws = null;\n        if (forcedClose) {\n          self.readyState = WebSocket.CLOSED;\n          eventTarget.dispatchEvent(generateEvent('close'));\n        } else {\n          self.readyState = WebSocket.CONNECTING;\n          var e = generateEvent('connecting');\n          e.code = event.code;\n          e.reason = event.reason;\n          e.wasClean = event.wasClean;\n          eventTarget.dispatchEvent(e);\n          if (!reconnectAttempt && !timedOut) {\n            if (self.debug || ReconnectingWebSocket.debugAll) {\n              console.debug('ReconnectingWebSocket', 'onclose', self.url);\n            }\n            eventTarget.dispatchEvent(generateEvent('close'));\n          }\n\n          var timeout = self.reconnectInterval * Math.pow(self.reconnectDecay, self.reconnectAttempts);\n          setTimeout(function() {\n            self.reconnectAttempts++;\n            self.open(true);\n          }, timeout > self.maxReconnectInterval ? self.maxReconnectInterval : timeout);\n        }\n      };\n      ws.onmessage = function(event) {\n        if (self.debug || ReconnectingWebSocket.debugAll) {\n          console.debug('ReconnectingWebSocket', 'onmessage', self.url, event.data);\n        }\n        var e = generateEvent('message');\n        e.data = event.data;\n        eventTarget.dispatchEvent(e);\n      };\n      ws.onerror = function(event) {\n        if (self.debug || ReconnectingWebSocket.debugAll) {\n          console.debug('ReconnectingWebSocket', 'onerror', self.url, event);\n        }\n        eventTarget.dispatchEvent(generateEvent('error'));\n      };\n    }\n\n    // Whether or not to create a websocket upon instantiation\n    if (this.automaticOpen == true) {\n      this.open(false);\n    }\n\n    /**\n     * Transmits data to the server over the WebSocket connection.\n     *\n     * @param data a text string, ArrayBuffer or Blob to send to the server.\n     */\n    this.send = function(data) {\n      if (ws) {\n        if (self.debug || ReconnectingWebSocket.debugAll) {\n          console.debug('ReconnectingWebSocket', 'send', self.url, data);\n        }\n        return ws.send(data);\n      } else {\n        throw 'INVALID_STATE_ERR : Pausing to reconnect websocket';\n      }\n    };\n\n    /**\n     * Closes the WebSocket connection or connection attempt, if any.\n     * If the connection is already CLOSED, this method does nothing.\n     */\n    this.close = function(code, reason) {\n      // Default CLOSE_NORMAL code\n      if (typeof code == 'undefined') {\n        code = 1000;\n      }\n      forcedClose = true;\n      if (ws) {\n        ws.close(code, reason);\n      }\n    };\n\n    /**\n     * Additional public API method to refresh the connection if still open (close, re-open).\n     * For example, if the app suspects bad data / missed heart beats, it can try to refresh.\n     */\n    this.refresh = function() {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }\n\n  /**\n   * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\n   * this indicates that the connection is ready to send and receive data.\n   */\n  ReconnectingWebSocket.prototype.onopen = function(event) {};\n  /** An event listener to be called when the WebSocket connection's readyState changes to CLOSED. */\n  ReconnectingWebSocket.prototype.onclose = function(event) {};\n  /** An event listener to be called when a connection begins being attempted. */\n  ReconnectingWebSocket.prototype.onconnecting = function(event) {};\n  /** An event listener to be called when a message is received from the server. */\n  ReconnectingWebSocket.prototype.onmessage = function(event) {};\n  /** An event listener to be called when an error occurs. */\n  ReconnectingWebSocket.prototype.onerror = function(event) {};\n\n  /**\n   * Whether all instances of ReconnectingWebSocket should log debug messages.\n   * Setting this to true is the equivalent of setting all instances of ReconnectingWebSocket.debug to true.\n   */\n  ReconnectingWebSocket.debugAll = false;\n\n  ReconnectingWebSocket.CONNECTING = WebSocket.CONNECTING;\n  ReconnectingWebSocket.OPEN = WebSocket.OPEN;\n  ReconnectingWebSocket.CLOSING = WebSocket.CLOSING;\n  ReconnectingWebSocket.CLOSED = WebSocket.CLOSED;\n}\n\nexport default ReconnectingWebSocket;\n"]}