{"version":3,"sources":["middleware.js"],"names":["path","defaultFs","trumpet","router","serveStatic","injectConfig","config","transform","select","createWriteStream","end","JSON","stringify","uwaveWebClient","uw","options","basePath","join","__dirname","fs","clientOptions","clientRouter","mobile","req","res","createReadStream","pipe","get","use"],"mappings":";AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,OAAO,KAAKC,SAAZ,MAA2B,IAA3B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,MAAMC,YAAYL,SAAlB;AACAK,YAAUC,MAAV,CAAiB,gBAAjB,EACGC,iBADH,GAEGC,GAFH,CAEOC,KAAKC,SAAL,CAAeN,MAAf,CAFP;AAGA,SAAOC,SAAP;AACD;;AAED,eAAe,SAASM,cAAT,CAAwBC,EAAxB,EAA0C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAAA,0BAKnDA,OALmD,CAErDC,QAFqD;AAAA,MAErDA,QAFqD,qCAE1ChB,KAAKiB,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAF0C;AAAA,oBAKnDH,OALmD,CAGrDI,EAHqD;AAAA,MAGrDA,EAHqD,+BAGhDlB,SAHgD;AAAA,MAIlDmB,aAJkD,4BAKnDL,OALmD;;AAOvD,MAAMM,eAAelB,QAArB;;AAEA,MAAMmB,SAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC3BL,OAAGM,gBAAH,CAAoBzB,KAAKiB,IAAL,CAAUD,QAAV,EAAoB,QAApB,CAApB,EAAmD,MAAnD,EACGU,IADH,CACQrB,aAAae,aAAb,CADR,EAEGM,IAFH,CAEQF,GAFR;AAGD,GAJD;;AAMA,SAAOH,aACJM,GADI,CACA,GADA,EACK,UAACJ,GAAD,EAAMC,GAAN,EAAc;AACtBL,OAAGM,gBAAH,CAAoBzB,KAAKiB,IAAL,CAAUD,QAAV,EAAoB,YAApB,CAApB,EAAuD,MAAvD,EACGU,IADH,CACQrB,aAAae,aAAb,CADR,EAEGM,IAFH,CAEQF,GAFR;AAGD,GALI,EAMJG,GANI,CAMA,IANA,EAMML,MANN,EAOJK,GAPI,CAOA,SAPA,EAOWL,MAPX,EAQJM,GARI,CAQAxB,YAAYY,QAAZ,CARA,CAAP;AASD","file":"middleware.js","sourcesContent":["import * as path from 'path';\nimport * as defaultFs from 'fs';\nimport trumpet from 'trumpet';\nimport router from 'router';\nimport serveStatic from 'serve-static';\n\nfunction injectConfig(config) {\n  const transform = trumpet();\n  transform.select('#u-wave-config')\n    .createWriteStream()\n    .end(JSON.stringify(config));\n  return transform;\n}\n\nexport default function uwaveWebClient(uw, options = {}) {\n  const {\n    basePath = path.join(__dirname, '../public'),\n    fs = defaultFs, // Should only be used by the dev server.\n    ...clientOptions\n  } = options;\n\n  const clientRouter = router();\n\n  const mobile = (req, res) => {\n    fs.createReadStream(path.join(basePath, 'm.html'), 'utf8')\n      .pipe(injectConfig(clientOptions))\n      .pipe(res);\n  };\n\n  return clientRouter\n    .get('/', (req, res) => {\n      fs.createReadStream(path.join(basePath, 'index.html'), 'utf8')\n        .pipe(injectConfig(clientOptions))\n        .pipe(res);\n    })\n    .get('/m', mobile)\n    .get('/m.html', mobile)\n    .use(serveStatic(basePath));\n}\n"]}