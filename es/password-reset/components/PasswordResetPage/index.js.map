{"version":3,"sources":["password-reset/components/PasswordResetPage/index.js"],"names":["React","PropTypes","EmailIcon","PasswordIcon","Paper","Typography","translate","Form","FormGroup","TextField","Button","enhance","PasswordResetPage","state","newPassword","newPasswordConfirm","handlePasswordChange","event","setState","target","value","handlePasswordConfirmChange","handleSubmit","preventDefault","isValid","props","onSubmit","length","render","t","email","Component","propTypes","func","isRequired","string"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;;AAEA,IAAMC,UAAUL,WAAhB;;gBA4DuB,S;eAAsB;;;iBAUxB,Y;eAAyB;;;iBASzB,Y;eAAyB;;;IA7ExCM,iB;;;;;;;;;;;;wJAOJC,K,GAAQ;AACNC,mBAAa,EADP;AAENC,0BAAoB;AAFd,K,QAURC,oB,GAAuB,UAACC,KAAD,EAAW;AAChC,YAAKC,QAAL,CAAc;AACZJ,qBAAaG,MAAME,MAAN,CAAaC;AADd,OAAd;AAGD,K,QAEDC,2B,GAA8B,UAACJ,KAAD,EAAW;AACvC,YAAKC,QAAL,CAAc;AACZH,4BAAoBE,MAAME,MAAN,CAAaC;AADrB,OAAd;AAGD,K,QAEDE,Y,GAAe,UAACL,KAAD,EAAW;AACxBA,YAAMM,cAAN;;AAEA,UAAI,MAAKC,OAAL,EAAJ,EAAoB;AAClB,cAAKC,KAAL,CAAWC,QAAX,CAAoB,MAAKb,KAAL,CAAWC,WAA/B;AACD;AACF,K;;;8BAvBDU,O,sBAAU;AACR,WAAO,KAAKX,KAAL,CAAWC,WAAX,CAAuBa,MAAvB,IAAiC,CAAjC,IACL,KAAKd,KAAL,CAAWC,WAAX,KAA2B,KAAKD,KAAL,CAAWE,kBADxC;AAED,G;;8BAsBDa,M,qBAAS;AAAA,iBACc,KAAKH,KADnB;AAAA,QACCI,CADD,UACCA,CADD;AAAA,QACIC,KADJ,UACIA,KADJ;;AAEP,QAAMN,UAAU,KAAKA,OAAL,EAAhB;;AAEA,gBACG,KADH;AAAA,iBACmB;AADnB,oBAEK,IAFL;AAAA,gBAEoB,KAAKF;AAFzB,oBAGO,SAHP,mBAIS,UAJT,cAKWO,EAAE,4BAAF,CALX,IAQOC;AACC;AACA;AAFD,SAGE,SAHF,mBAII,SAJJ;AAAA,YAKU,OALV;AAAA;AAAA,aAOYA,KAPZ;AAAA,mBAQkBD,EAAE,aAAF,CARlB;AAAA;AAAA,OARP,OAqBO,SArBP,mBAsBS,SAtBT;AAAA,YAuBe,UAvBf;AAAA,aAwBiB,KAAKhB,KAAL,CAAWC,WAxB5B;AAAA,gBAyBoB,KAAKE,oBAzBzB;AAAA,mBA0BuBa,EAAE,gBAAF,CA1BvB;AAAA;AAAA,cA8BO,SA9BP,mBA+BS,SA/BT;AAAA,YAgCe,UAhCf;AAAA,aAiCiB,KAAKhB,KAAL,CAAWE,kBAjC5B;AAAA,gBAkCoB,KAAKM,2BAlCzB;AAAA,mBAmCuBQ,EAAE,gBAAF,CAnCvB;AAAA;AAAA,cAuCO,SAvCP,mBAwCS,MAxCT;AAAA,gBAwC0B,CAACL;AAxC3B,eAyCWK,EAAE,sBAAF,CAzCX;AA+CD,G;;;EAxF6B7B,MAAM+B,S;;AAAhCnB,iB,CACGoB,S,2CAAY;AACjBH,KAAG5B,UAAUgC,IAAV,CAAeC,UADD;AAEjBJ,SAAO7B,UAAUkC,MAAV,CAAiBD,UAFP;AAGjBR,YAAUzB,UAAUgC,IAAV,CAAeC;AAHR,C;;;AA0FrB,eAAevB,QAAQC,iBAAR,CAAf","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport EmailIcon from 'material-ui-icons/Email';\nimport PasswordIcon from 'material-ui-icons/Lock';\nimport Paper from 'material-ui/Paper';\nimport Typography from 'material-ui/Typography';\nimport { translate } from 'react-i18next';\nimport Form from '../../../components/Form';\nimport FormGroup from '../../../components/Form/Group';\nimport TextField from '../../../components/Form/TextField';\nimport Button from '../../../components/Form/Button';\n\nconst enhance = translate();\n\nclass PasswordResetPage extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    email: PropTypes.string.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    newPassword: '',\n    newPasswordConfirm: '',\n  };\n\n  isValid() {\n    return this.state.newPassword.length >= 6 &&\n      this.state.newPassword === this.state.newPasswordConfirm;\n  }\n\n  handlePasswordChange = (event) => {\n    this.setState({\n      newPassword: event.target.value,\n    });\n  };\n\n  handlePasswordConfirmChange = (event) => {\n    this.setState({\n      newPasswordConfirm: event.target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.isValid()) {\n      this.props.onSubmit(this.state.newPassword);\n    }\n  };\n\n  render() {\n    const { t, email } = this.props;\n    const isValid = this.isValid();\n\n    return (\n      <Paper className=\"PasswordReset\">\n        <Form onSubmit={this.handleSubmit}>\n          <FormGroup>\n            <Typography>\n              {t('resetPassword.introduction')}\n            </Typography>\n          </FormGroup>\n          {email && (\n            // Not used at the moment, but we may show (parts of) the user's\n            // email address on the reset page at some point.\n            <FormGroup>\n              <TextField\n                type=\"email\"\n                disabled\n                value={email}\n                placeholder={t('login.email')}\n                icon={<EmailIcon nativeColor=\"#9f9d9e\" />}\n              />\n            </FormGroup>\n          )}\n          <FormGroup>\n            <TextField\n              type=\"password\"\n              value={this.state.newPassword}\n              onChange={this.handlePasswordChange}\n              placeholder={t('login.password')}\n              icon={<PasswordIcon nativeColor=\"#9f9d9e\" />}\n            />\n          </FormGroup>\n          <FormGroup>\n            <TextField\n              type=\"password\"\n              value={this.state.newPasswordConfirm}\n              onChange={this.handlePasswordConfirmChange}\n              placeholder={t('login.password')}\n              icon={<PasswordIcon nativeColor=\"#9f9d9e\" />}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Button disabled={!isValid}>\n              {t('resetPassword.submit')}\n            </Button>\n          </FormGroup>\n        </Form>\n      </Paper>\n    );\n  }\n}\n\nexport default enhance(PasswordResetPage);\n"]}