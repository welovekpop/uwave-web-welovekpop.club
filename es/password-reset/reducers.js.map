{"version":3,"sources":["password-reset/reducers.js"],"names":["SET_RESET_KEY","SET_RESET_SUCCESS","auth","config","errors","theme","passwordReset","state","action","error","type","key","payload","success"],"mappings":";AAAA,SACEA,aADF,EAEEC,iBAFF,QAGO,aAHP;;kBAKiB,kB;kBAAVC,I;oBACY,oB;oBAAZC,M;oBACY,oB;oBAAZC,M;mBACW,mB;mBAAXC,K;;;AAEP,OAAO,SAASC,aAAT,GAAgD;AAAA,MAAzBC,KAAyB,uEAAjB,EAAiB;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AACrD,MAAIA,OAAOC,KAAX,EAAkB,OAAOF,KAAP;;AAElB,UAAQC,OAAOE,IAAf;AACA,SAAKV,aAAL;AACE,0BACKO,KADL;AAEEI,aAAKH,OAAOI;AAFd;AAIF,SAAKX,iBAAL;AACE,0BACKM,KADL;AAEEM,iBAAS;AAFX;;AAKF;AACE,aAAON,KAAP;AAbF;AAeD","file":"reducers.js","sourcesContent":["import {\n  SET_RESET_KEY,\n  SET_RESET_SUCCESS\n} from './constants';\n\nexport auth from '../reducers/auth';\nexport config from '../reducers/config';\nexport errors from '../reducers/errors';\nexport theme from '../reducers/theme';\n\nexport function passwordReset(state = {}, action = {}) {\n  if (action.error) return state;\n\n  switch (action.type) {\n  case SET_RESET_KEY:\n    return {\n      ...state,\n      key: action.payload\n    };\n  case SET_RESET_SUCCESS:\n    return {\n      ...state,\n      success: true\n    };\n\n  default:\n    return state;\n  }\n}\n"]}