{"version":3,"sources":["sources/soundcloud/Player.js"],"names":["cx","React","PropTypes","createDebug","SongInfo","soundcloudLogo","debug","CLIENT_ID","SoundCloudPlayer","componentDidMount","audio","Audio","autoplay","play","componentDidUpdate","prevProps","volume","props","media","sourceID","enabled","active","stop","componentWillUnmount","doSeek","currentTime","seek","start","removeEventListener","streamUrl","sourceData","src","addEventListener","pause","render","className","thumbnail","username","fullTitle","artistUrl","permalinkUrl","Component","propTypes","string","bool","isRequired","object","number"],"mappings":"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","file":"Player.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport createDebug from 'debug';\nimport SongInfo from './SongInfo';\nimport soundcloudLogo from '../../../assets/img/soundcloud-inline.png';\n\nconst debug = createDebug('uwave:component:video:soundcloud');\n\nconst CLIENT_ID = '9d883cdd4c3c54c6dddda2a5b3a11200';\n\nexport default class SoundCloudPlayer extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    active: PropTypes.bool.isRequired,\n    enabled: PropTypes.bool,\n    media: PropTypes.object,\n    seek: PropTypes.number,\n    volume: PropTypes.number\n  };\n\n  componentDidMount() {\n    this.audio = new Audio();\n    this.audio.autoplay = true;\n    this.play();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.volume !== this.props.volume) {\n      this.audio.volume = this.props.volume / 100;\n    }\n    if (prevProps.media.sourceID !== this.props.media.sourceID ||\n        prevProps.enabled !== this.props.enabled ||\n        prevProps.active !== this.props.active) {\n      if (this.props.enabled && this.props.active) {\n        this.play();\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  play() {\n    if (this.props.enabled && this.props.active) {\n      // In Firefox we have to wait for the \"canplaythrough\" event before\n      // seeking.\n      // http://stackoverflow.com/a/34970444\n      const doSeek = () => {\n        this.audio.currentTime = this.props.seek + (this.props.media.start || 0);\n        this.audio.volume = this.props.volume / 100;\n        this.audio.removeEventListener('canplaythrough', doSeek, false);\n      };\n\n      const { streamUrl } = this.props.media.sourceData;\n      this.audio.src = `${streamUrl}?client_id=${CLIENT_ID}`;\n      this.audio.play();\n      debug('currentTime', this.props.seek);\n      this.audio.addEventListener('canplaythrough', doSeek, false);\n    } else {\n      this.stop();\n    }\n  }\n\n  stop() {\n    this.audio.pause();\n  }\n\n  render() {\n    if (!this.props.active) {\n      return null;\n    }\n\n    const { media } = this.props;\n    const { sourceData } = media;\n    if (!sourceData) {\n      return <div className={cx('src-soundcloud-Player', this.props.className)} />;\n    }\n\n    return (\n      <div className={cx('src-soundcloud-Player', this.props.className)}>\n        <div className=\"src-soundcloud-Player-meta\">\n          <div className=\"src-soundcloud-Player-info\">\n            <img\n              className=\"src-soundcloud-Player-art\"\n              src={media.thumbnail}\n              alt=\"\"\n            />\n            <div className=\"src-soundcloud-Player-links\">\n              <SongInfo\n                artist={sourceData.username}\n                title={sourceData.fullTitle}\n                artistUrl={sourceData.artistUrl}\n                trackUrl={sourceData.permalinkUrl}\n              />\n            </div>\n          </div>\n          <a\n            href={sourceData.permalinkUrl}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"src-soundcloud-Player-permalink\"\n          >\n            View on{' '}\n            <img\n              src={soundcloudLogo}\n              alt=\"SoundCloud\"\n            />\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n"]}