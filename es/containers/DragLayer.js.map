{"version":3,"sources":["containers/DragLayer.js"],"names":["React","PropTypes","DragLayer","MEDIA","WAITLIST_USER","MediaDragPreview","DragLayerContainer","items","monitor","getItem","type","getItemType","currentOffset","getClientOffset","isDragging","renderPreview","props","render","Component","propTypes","oneOf","object","bool","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,0BAArC;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;;IAQqBC,kB,WANpBJ,UAAU;AAAA,SAAY;AACrBK,WAAOC,QAAQC,OAAR,EADc;AAErBC,UAAMF,QAAQG,WAAR,EAFe;AAGrBC,mBAAeJ,QAAQK,eAAR,EAHM;AAIrBC,gBAAYN,QAAQM,UAAR;AAJS,GAAZ;AAAA,CAAV,C;;;;;;;;;+BAaCC,a,4BAAgB;AACd,YAAQ,KAAKC,KAAL,CAAWN,IAAnB;AACA,WAAKP,KAAL;AACE,eAAO,oBAAC,gBAAD,EAAsB,KAAKa,KAA3B,CAAP;AACF;AACE,eAAO,IAAP;AAJF;AAMD,G;;+BAEDC,M,qBAAS;AAAA,iBACuB,KAAKD,KAD5B;AAAA,QACCF,UADD,UACCA,UADD;AAAA,QACaP,KADb,UACaA,KADb;;AAEP,QAAI,CAACO,UAAD,IAAe,CAACP,KAApB,EAA2B;AACzB,aAAO,IAAP;AACD;;AAED;AAAA,iBACiB;AADjB,eAEK,KAAKQ,aAAL,EAFL;AAKD,G;;;EA3B6Cf,MAAMkB,S;SAAjCZ,kB;AAAAA,kB,CACZa,S,2CAAY;AACjBT,QAAMV,MAAMC,SAAN,CAAgBmB,KAAhB,CAAsB,CAAEjB,KAAF,EAASC,aAAT,CAAtB,CADW;AAEjBG,SAAOP,MAAMC,SAAN,CAAgBoB,MAFN;AAGjBP,cAAYd,MAAMC,SAAN,CAAgBqB,IAAhB,CAAqBC;AAHhB,C","file":"DragLayer.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragLayer } from 'react-dnd';\nimport { MEDIA, WAITLIST_USER } from '../constants/DDItemTypes';\nimport MediaDragPreview from '../components/MediaList/MediaDragPreview';\n\n@DragLayer(monitor => ({\n  items: monitor.getItem(),\n  type: monitor.getItemType(),\n  currentOffset: monitor.getClientOffset(),\n  isDragging: monitor.isDragging()\n}))\nexport default class DragLayerContainer extends React.Component {\n  static propTypes = {\n    type: React.PropTypes.oneOf([ MEDIA, WAITLIST_USER ]),\n    items: React.PropTypes.object,\n    isDragging: React.PropTypes.bool.isRequired\n  };\n\n  renderPreview() {\n    switch (this.props.type) {\n    case MEDIA:\n      return <MediaDragPreview {...this.props} />;\n    default:\n      return null;\n    }\n  }\n\n  render() {\n    const { isDragging, items } = this.props;\n    if (!isDragging || !items) {\n      return null;\n    }\n\n    return (\n      <div className=\"DragLayerContainer\">\n        {this.renderPreview()}\n      </div>\n    );\n  }\n}\n"]}