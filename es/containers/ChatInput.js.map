{"version":3,"sources":["containers/ChatInput.js"],"names":["React","PropTypes","bindActionCreators","connect","createStructuredSelector","inputMessage","availableGroupMentionsSelector","emojiCompletionsSelector","userListSelector","isLoggedInSelector","ChatInput","mapStateToProps","isLoggedIn","mentionableUsers","mentionableGroups","availableEmoji","mapDispatchToProps","onSend","dispatch","ChatInputContainer","props","propTypes","bool","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SACEC,YADF,QAEO,+BAFP;AAGA,SACEC,8BADF,EAEEC,wBAFF,QAGO,4BAHP;AAIA,SACEC,gBADF,EAEEC,kBAFF,QAGO,4BAHP;;AAKA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,IAAMC,kBAAkBP,yBAAyB;AAC/CQ,cAAYH,kBADmC;AAE/CI,oBAAkBL,gBAF6B;AAG/CM,qBAAmBR,8BAH4B;AAI/CS,kBAAgBR;AAJ+B,CAAzB,CAAxB;;AAOA,IAAMS,qBAAqB,SAArBA,kBAAqB;AAAA,SAAYd,mBAAmB;AACxDe,YAAQZ;AADgD,GAAnB,EAEpCa,QAFoC,CAAZ;AAAA,CAA3B;;;;AAIA,IAAMC,qBAAqB,SAArBA,kBAAqB;AAAA,MAAGP,UAAH,QAAGA,UAAH;AAAA,MAAkBQ,KAAlB;;AAAA,SACzBR,aACI,oBAAC,SAAD,EAAeQ,KAAf,CADJ,QADyB;AAAA,CAA3B;;AAMAD,mBAAmBE,SAAnB,2CAA+B;AAC7BT,cAAYX,UAAUqB,IAAV,CAAeC;AADE,CAA/B;;AAIA,eAAepB,QAAQQ,eAAR,EAAyBK,kBAAzB,EAA6CG,kBAA7C,CAAf","file":"ChatInput.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport {\n  inputMessage\n} from '../actions/ChatActionCreators';\nimport {\n  availableGroupMentionsSelector,\n  emojiCompletionsSelector\n} from '../selectors/chatSelectors';\nimport {\n  userListSelector,\n  isLoggedInSelector\n} from '../selectors/userSelectors';\n\nimport ChatInput from '../components/Chat/Input';\n\nconst mapStateToProps = createStructuredSelector({\n  isLoggedIn: isLoggedInSelector,\n  mentionableUsers: userListSelector,\n  mentionableGroups: availableGroupMentionsSelector,\n  availableEmoji: emojiCompletionsSelector\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onSend: inputMessage\n}, dispatch);\n\nconst ChatInputContainer = ({ isLoggedIn, ...props }) => (\n  isLoggedIn\n    ? <ChatInput {...props} />\n    : <span />\n);\n\nChatInputContainer.propTypes = {\n  isLoggedIn: PropTypes.bool.isRequired\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatInputContainer);\n"]}