{"version":3,"sources":["containers/PlaylistManagerPanel.js"],"names":["bindActionCreators","createStructuredSelector","connect","selectedPlaylistSelector","filteredSelectedPlaylistItemsSelector","isSelectedPlaylistLoadingSelector","isFilteredSelector","openPreviewMediaDialog","addMediaMenu","editMedia","moveMedia","removeMedia","filterPlaylistItems","renamePlaylist","deletePlaylist","cannotDeleteActivePlaylist","shufflePlaylist","activatePlaylist","loadPlaylist","loadFilteredPlaylistItems","PlaylistPanel","mapStateToProps","playlist","media","loading","isFiltered","selectionOrOne","selection","isSelected","get","onOpenAddMediaMenu","position","onRemoveFromPlaylist","onMoveMedia","opts","onMoveToFirst","at","onMoveToLast","onEditMedia","onLoadPlaylistPage","_id","page","mapDispatchToProps","dispatch","mergeProps","state","props","onShufflePlaylist","bind","onActivatePlaylist","onRenamePlaylist","onDeletePlaylist","onNotDeletable","onOpenPreviewMediaDialog","onFilterPlaylistItems"],"mappings":"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","file":"PlaylistManagerPanel.js","sourcesContent":["import { bindActionCreators } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\n\nimport {\n  selectedPlaylistSelector,\n  filteredSelectedPlaylistItemsSelector,\n  isSelectedPlaylistLoadingSelector,\n  isFilteredSelector,\n} from '../selectors/playlistSelectors';\n\nimport { openPreviewMediaDialog } from '../actions/DialogActionCreators';\nimport {\n  addMediaMenu,\n  editMedia,\n  moveMedia,\n  removeMedia,\n  filterPlaylistItems,\n  renamePlaylist,\n  deletePlaylist,\n  cannotDeleteActivePlaylist,\n  shufflePlaylist,\n  activatePlaylist,\n  loadPlaylist,\n  loadFilteredPlaylistItems,\n} from '../actions/PlaylistActionCreators';\n\nimport PlaylistPanel from '../components/PlaylistManager/Panel';\n\nconst mapStateToProps = createStructuredSelector({\n  playlist: selectedPlaylistSelector,\n  media: filteredSelectedPlaylistItemsSelector,\n  loading: isSelectedPlaylistLoadingSelector,\n  isFiltered: isFilteredSelector,\n});\n\nconst selectionOrOne = (media, selection) => {\n  if (selection.isSelected(media)) {\n    return selection.get();\n  }\n  return [media];\n};\n\nconst onOpenAddMediaMenu = (position, media, selection) =>\n  addMediaMenu(selectionOrOne(media, selection), position);\nconst onRemoveFromPlaylist = playlist => (media, selection) =>\n  removeMedia(playlist, selectionOrOne(media, selection));\nconst onMoveMedia = playlist => (media, opts) =>\n  moveMedia(playlist, media, opts);\nconst onMoveToFirst = playlist => (media, selection) =>\n  moveMedia(playlist, selectionOrOne(media, selection), { at: 'start' });\nconst onMoveToLast = playlist => (media, selection) =>\n  moveMedia(playlist, selectionOrOne(media, selection), { at: 'end' });\nconst onEditMedia = playlist => media =>\n  editMedia(playlist, media);\nconst onLoadPlaylistPage = ({ isFiltered, playlist }) => page => (\n  isFiltered ? loadFilteredPlaylistItems(playlist._id, page) :\n    loadPlaylist(playlist._id, page)\n);\n\n// Most of the playlist-related action creators need to know which playlist to\n// use, i.e. need to have a reference to the selected playlist. The selected\n// playlist is picked out in `mapStateToProps`, but we can't access its result\n// in `mapDispatchToProps` yet. Instead, `mapDispatchToProps` passes the\n// `dispatch` function to the `mergeProps` function below, and then that\n// configures the action creators.\n// TODO Maybe it's better to have versions of these action creators that work on\n// the selected playlist by default? using redux-thunk.\nconst mapDispatchToProps = dispatch => ({ dispatch });\n\nconst mergeProps = (state, { dispatch }, props) => ({\n  ...props,\n  ...state,\n  ...bindActionCreators({\n    onShufflePlaylist: shufflePlaylist.bind(null, state.playlist._id),\n    onActivatePlaylist: activatePlaylist.bind(null, state.playlist._id),\n    onRenamePlaylist: renamePlaylist.bind(null, state.playlist._id),\n    onDeletePlaylist: deletePlaylist.bind(null, state.playlist._id),\n    onNotDeletable: cannotDeleteActivePlaylist,\n\n    onOpenAddMediaMenu,\n    onOpenPreviewMediaDialog: openPreviewMediaDialog,\n    onMoveToFirst: onMoveToFirst(state.playlist._id),\n    onMoveToLast: onMoveToLast(state.playlist._id),\n    onMoveMedia: onMoveMedia(state.playlist._id),\n    onEditMedia: onEditMedia(state.playlist._id),\n    onRemoveFromPlaylist: onRemoveFromPlaylist(state.playlist._id),\n    onLoadPlaylistPage: onLoadPlaylistPage(state),\n    onFilterPlaylistItems: filterPlaylistItems.bind(null, state.playlist._id),\n  }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeProps)(PlaylistPanel);\n"]}