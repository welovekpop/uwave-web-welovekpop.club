{"version":3,"sources":["actions/WaitlistActionCreators.js"],"names":["WAITLIST_LOAD","WAITLIST_LOCK","WAITLIST_CLEAR","WAITLIST_UPDATE","WAITLIST_JOIN","WAITLIST_LEAVE","WAITLIST_MOVE","DO_JOIN_START","DO_JOIN_COMPLETE","DO_LEAVE_START","DO_LEAVE_COMPLETE","DO_LOCK_START","DO_LOCK_COMPLETE","DO_CLEAR_START","DO_CLEAR_COMPLETE","del","post","put","currentUserSelector","setWaitList","data","type","payload","waitlist","locked","setLocked","lock","clearWaitlist","updatedWaitlist","joinWaitlist","otherUser","dispatch","getState","user","userID","_id","onStart","onComplete","onError","error","joinedWaitlist","leaveWaitlist","leftWaitlist","movedInWaitlist","moderatorID","position","meta","putLock","status","clear","modLockWaitlist","modUnlockWaitlist","modClearWaitlist"],"mappings":"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","file":"WaitlistActionCreators.js","sourcesContent":["import {\n  WAITLIST_LOAD,\n  WAITLIST_LOCK,\n  WAITLIST_CLEAR,\n  WAITLIST_UPDATE,\n  WAITLIST_JOIN,\n  WAITLIST_LEAVE,\n  WAITLIST_MOVE,\n  DO_JOIN_START, DO_JOIN_COMPLETE,\n  DO_LEAVE_START, DO_LEAVE_COMPLETE,\n  DO_LOCK_START, DO_LOCK_COMPLETE,\n  DO_CLEAR_START, DO_CLEAR_COMPLETE,\n} from '../constants/actionTypes/waitlist';\nimport { del, post, put } from './RequestActionCreators';\nimport { currentUserSelector } from '../selectors/userSelectors';\n\nexport function setWaitList(data) {\n  return {\n    type: WAITLIST_LOAD,\n    payload: {\n      waitlist: data.waitlist,\n      locked: data.locked,\n    },\n  };\n}\n\nexport function setLocked(lock) {\n  return {\n    type: WAITLIST_LOCK,\n    payload: {\n      locked: lock,\n    },\n  };\n}\n\nexport function clearWaitlist() {\n  return { type: WAITLIST_CLEAR };\n}\n\nexport function updatedWaitlist(waitlist) {\n  return {\n    type: WAITLIST_UPDATE,\n    payload: { waitlist },\n  };\n}\n\n// TODO split joining the waitlist and adding another user to the waitlist\n// into two different actions.\nexport function joinWaitlist(otherUser) {\n  return (dispatch, getState) => {\n    const user = otherUser || currentUserSelector(getState());\n\n    return dispatch(post('/waitlist', { userID: user._id }, {\n      onStart: () => ({ type: DO_JOIN_START }),\n      onComplete: ({ data }) => ({\n        type: DO_JOIN_COMPLETE,\n        payload: { waitlist: data },\n      }),\n      onError: error => ({\n        type: DO_JOIN_COMPLETE,\n        error: true,\n        payload: error,\n      }),\n    }));\n  };\n}\n\nexport function joinedWaitlist({ userID, waitlist }) {\n  return {\n    type: WAITLIST_JOIN,\n    payload: { userID, waitlist },\n  };\n}\n\nexport function leaveWaitlist(otherUser) {\n  return (dispatch, getState) => {\n    const user = otherUser || currentUserSelector(getState());\n\n    return dispatch(del(`/waitlist/${user._id}`, {}, {\n      onStart: () => ({ type: DO_LEAVE_START }),\n      onComplete: ({ data }) => ({\n        type: DO_LEAVE_COMPLETE,\n        payload: { waitlist: data },\n      }),\n      onError: error => ({\n        type: DO_LEAVE_COMPLETE,\n        error: true,\n        payload: error,\n      }),\n    }));\n  };\n}\n\nexport function leftWaitlist({ userID, waitlist }) {\n  return {\n    type: WAITLIST_LEAVE,\n    payload: { userID, waitlist },\n  };\n}\n\nexport function movedInWaitlist({\n  userID, moderatorID, position, waitlist,\n}) {\n  return (dispatch) => {\n    dispatch({\n      type: WAITLIST_MOVE,\n      payload: { userID, position },\n      meta: { moderatorID },\n    });\n    dispatch(updatedWaitlist(waitlist));\n  };\n}\n\nfunction putLock(status) {\n  return put('/waitlist/lock', { lock: status, clear: false }, {\n    onStart: () => ({\n      type: DO_LOCK_START,\n      payload: { locked: status },\n    }),\n    onComplete: ({ data }) => ({\n      type: DO_LOCK_COMPLETE,\n      payload: { locked: data.locked },\n    }),\n    onError: error => ({\n      type: DO_LOCK_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n\nexport function modLockWaitlist() {\n  return putLock(true);\n}\nexport function modUnlockWaitlist() {\n  return putLock(false);\n}\n\nexport function modClearWaitlist() {\n  return del('/waitlist', {}, {\n    onStart: () => ({ type: DO_CLEAR_START }),\n    onComplete: () => ({ type: DO_CLEAR_COMPLETE }),\n    onError: error => ({\n      type: DO_CLEAR_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n"]}