{"version":3,"sources":["actions/ChatActionCreators.js"],"names":["find","ms","splitargs","parseChatMarkup","flashDocumentTitle","playMentionSound","RECEIVE_MOTD","SET_MOTD_START","SET_MOTD_COMPLETE","SEND_MESSAGE","RECEIVE_MESSAGE","LOG","REMOVE_MESSAGE","REMOVE_USER_MESSAGES","REMOVE_ALL_MESSAGES","MUTE_USER","UNMUTE_USER","put","execute","muteTimeoutsSelector","mutedUserIDsSelector","currentUserMuteSelector","settingsSelector","currentUserSelector","userListSelector","userHasRoleSelector","currentUserHasRoleSelector","currentTimeSelector","getAvailableGroupMentions","resolveMentions","hasMention","receiveMotd","text","type","payload","logIdx","Date","now","log","_id","prepareMessage","state","user","parseOpts","parsed","message","sendChat","dispatch","getState","sender","hasRole","mute","timeLeft","expiresAt","long","users","mentions","map","username","inputMessage","slice","command","params","result","isMuted","userID","indexOf","receive","settings","currentUser","senderHasRole","mention","isMention","mentionSound","removeMessage","id","removeMessagesByUser","removeAllMessages","expireMute","muteUser","moderatorID","currentTime","expireIn","expirationTimer","setTimeout","unmuteUser","muteTimeouts","clearTimeout","setMotdStart","motd","setMotdComplete","setMotd","onStart","onComplete","data","onError","error"],"mappings":"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","sourcesContent":["import find from 'array-find';\nimport ms from 'ms';\nimport splitargs from 'splitargs';\nimport parseChatMarkup from 'u-wave-parse-chat-markup';\nimport flashDocumentTitle from 'flash-document-title';\nimport playMentionSound from '../utils/playMentionSound';\nimport {\n  RECEIVE_MOTD,\n  SET_MOTD_START,\n  SET_MOTD_COMPLETE,\n\n  SEND_MESSAGE,\n  RECEIVE_MESSAGE,\n\n  LOG,\n\n  REMOVE_MESSAGE,\n  REMOVE_USER_MESSAGES,\n  REMOVE_ALL_MESSAGES,\n\n  MUTE_USER,\n  UNMUTE_USER,\n} from '../constants/actionTypes/chat';\nimport { put } from './RequestActionCreators';\nimport { execute } from '../utils/ChatCommands';\nimport {\n  muteTimeoutsSelector,\n  mutedUserIDsSelector,\n  currentUserMuteSelector,\n} from '../selectors/chatSelectors';\nimport { settingsSelector } from '../selectors/settingSelectors';\nimport {\n  currentUserSelector,\n  userListSelector,\n  userHasRoleSelector,\n  currentUserHasRoleSelector,\n} from '../selectors/userSelectors';\nimport { currentTimeSelector } from '../selectors/timeSelectors';\n\nimport {\n  getAvailableGroupMentions,\n  resolveMentions,\n  hasMention,\n} from '../utils/chatMentions';\n\nexport function receiveMotd(text) {\n  return {\n    type: RECEIVE_MOTD,\n    payload: text,\n  };\n}\n\nlet logIdx = Date.now();\nexport function log(text) {\n  logIdx += 1;\n  return {\n    type: LOG,\n    payload: {\n      _id: logIdx,\n      text,\n    },\n  };\n}\n\nexport function prepareMessage(state, user, text, parseOpts = {}) {\n  const parsed = parseChatMarkup(text, parseOpts);\n  resolveMentions(parsed, state);\n  return {\n    type: SEND_MESSAGE,\n    payload: {\n      user,\n      message: text,\n      parsed,\n    },\n  };\n}\n\nexport function sendChat(text) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const sender = currentUserSelector(state);\n    const hasRole = currentUserHasRoleSelector(state);\n    const mute = currentUserMuteSelector(state);\n    if (mute) {\n      const timeLeft = ms(mute.expiresAt - Date.now(), { long: true });\n      dispatch(log(`You have been muted, and cannot chat for another ${timeLeft}.`));\n      return;\n    }\n\n    const users = userListSelector(state);\n    const message = prepareMessage(state, sender, text, {\n      mentions: [\n        ...users.map(user => user.username),\n        ...getAvailableGroupMentions(hasRole),\n      ],\n    });\n    dispatch(message);\n  };\n}\n\nexport function inputMessage(text) {\n  return (dispatch, getState) => {\n    if (text[0] === '/') {\n      const [command, ...params] = splitargs(text.slice(1));\n      if (command) {\n        const result = execute(getState(), command, params);\n        if (result) {\n          dispatch(result);\n        }\n        return;\n      }\n    }\n    dispatch(sendChat(text));\n  };\n}\n\nfunction isMuted(state, userID) {\n  return mutedUserIDsSelector(state).indexOf(userID) !== -1;\n}\n\nexport function receive(message) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const settings = settingsSelector(state);\n    const currentUser = currentUserSelector(state);\n    const users = userListSelector(state);\n    const sender = find(users, user => user._id === message.userID);\n    const senderHasRole = userHasRoleSelector(state)(sender);\n    const mentions = [\n      ...users.map(user => user.username),\n      ...getAvailableGroupMentions(mention => senderHasRole(`chat.mention.${mention}`)),\n    ];\n\n    if (isMuted(state, message.userID)) {\n      return;\n    }\n\n    const parsed = parseChatMarkup(message.text, { mentions });\n    resolveMentions(parsed, state);\n\n    const isMention = currentUser ? hasMention(parsed, currentUser._id) : false;\n\n    dispatch({\n      type: RECEIVE_MESSAGE,\n      payload: {\n        message: {\n          ...message,\n          user: sender,\n        },\n        isMention,\n        parsed,\n      },\n    });\n\n    if (isMention) {\n      if (settings.mentionSound) {\n        playMentionSound();\n      }\n      flashDocumentTitle(`💬 ${sender.username}`);\n    }\n  };\n}\n\nexport function removeMessage(id) {\n  return {\n    type: REMOVE_MESSAGE,\n    payload: { _id: id },\n  };\n}\n\nexport function removeMessagesByUser(userID) {\n  return {\n    type: REMOVE_USER_MESSAGES,\n    payload: { userID },\n  };\n}\n\nexport function removeAllMessages() {\n  return {\n    type: REMOVE_ALL_MESSAGES,\n  };\n}\n\nfunction expireMute(userID) {\n  return {\n    type: UNMUTE_USER,\n    payload: { userID },\n  };\n}\n\nexport function muteUser(userID, { moderatorID, expiresAt }) {\n  return (dispatch, getState) => {\n    const currentTime = currentTimeSelector(getState());\n    const expireIn = expiresAt - currentTime;\n\n    dispatch({\n      type: MUTE_USER,\n      payload: {\n        userID,\n        moderatorID,\n        expiresAt,\n        expirationTimer: expireIn > 0 ?\n          setTimeout(() => dispatch(expireMute(userID)), expireIn) : null,\n      },\n    });\n  };\n}\n\nexport function unmuteUser(userID, { moderatorID }) {\n  return (dispatch, getState) => {\n    const muteTimeouts = muteTimeoutsSelector(getState());\n    if (muteTimeouts && muteTimeouts[userID]) {\n      clearTimeout(muteTimeouts[userID]);\n    }\n    dispatch({\n      type: UNMUTE_USER,\n      payload: { userID, moderatorID },\n    });\n  };\n}\n\nexport function setMotdStart(motd) {\n  return {\n    type: SET_MOTD_START,\n    payload: motd,\n  };\n}\n\nexport function setMotdComplete(motd) {\n  return {\n    type: SET_MOTD_COMPLETE,\n    payload: motd,\n  };\n}\n\nexport function setMotd(text) {\n  return put('/motd', { motd: text }, {\n    onStart: () => setMotdStart(text),\n    onComplete: ({ data }) => (dispatch) => {\n      dispatch(setMotdComplete(data.motd));\n      dispatch(log(`Message of the Day is now: ${data.motd}`));\n    },\n    onError: error => ({\n      type: SET_MOTD_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n"],"file":"ChatActionCreators.js"}