{"version":3,"sources":["actions/LoginActionCreators.js"],"names":["createDebug","INIT_STATE","SOCKET_CONNECT","SOCKET_RECONNECT","AUTH_STRATEGIES","REGISTER_START","REGISTER_COMPLETE","LOGIN_START","LOGIN_COMPLETE","SET_TOKEN","LOGOUT_START","LOGOUT_COMPLETE","RESET_PASSWORD_COMPLETE","LOAD_ALL_PLAYLISTS_START","Session","get","post","del","advance","loadHistory","receiveMotd","setPlaylists","selectPlaylist","activatePlaylistComplete","syncTimestamps","closeLoginDialog","setUsers","setVoteStats","setWaitList","tokenSelector","startTutorial","debug","socketConnect","type","socketReconnect","setAuthenticationStrategies","strategies","payload","loginComplete","token","socketToken","user","dispatch","loadedState","state","getState","motd","authStrategies","users","playlists","waitlist","locked","waitlistLocked","booth","historyID","stats","activePlaylist","initState","beforeTime","Date","now","onStart","onComplete","time","setSessionToken","loginStart","login","email","password","sessionType","preferredSessionType","set","res","meta","jwt","onError","error","register","username","grecaptcha","data","then","matchMedia","matches","logoutStart","logoutComplete","logout","unset","resetPassword","getSocketAuthToken","whenWindowClosed","window","Promise","resolve","i","setInterval","closed","clearInterval","socialLogin","service","apiUrl","config","loginWindow","open","loginWithGoogle"],"mappings":"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","sourcesContent":["import createDebug from 'debug';\nimport {\n  INIT_STATE,\n  SOCKET_CONNECT,\n  SOCKET_RECONNECT,\n\n  AUTH_STRATEGIES,\n  REGISTER_START,\n  REGISTER_COMPLETE,\n  LOGIN_START,\n  LOGIN_COMPLETE,\n  SET_TOKEN,\n  LOGOUT_START,\n  LOGOUT_COMPLETE,\n\n  RESET_PASSWORD_COMPLETE,\n} from '../constants/actionTypes/auth';\nimport { LOAD_ALL_PLAYLISTS_START } from '../constants/actionTypes/playlists';\nimport * as Session from '../utils/Session';\nimport { get, post, del } from './RequestActionCreators';\nimport { advance, loadHistory } from './BoothActionCreators';\nimport { receiveMotd } from './ChatActionCreators';\nimport { setPlaylists, selectPlaylist, activatePlaylistComplete } from './PlaylistActionCreators';\nimport { syncTimestamps } from './TickerActionCreators';\nimport { closeLoginDialog } from './DialogActionCreators';\nimport { setUsers } from './UserActionCreators';\nimport { setVoteStats } from './VoteActionCreators';\nimport { setWaitList } from './WaitlistActionCreators';\nimport { tokenSelector } from '../selectors/userSelectors';\nimport startTutorial from '../_wlk/startTutorial';\n\nconst debug = createDebug('uwave:actions:login');\n\nexport function socketConnect() {\n  return { type: SOCKET_CONNECT };\n}\n\nexport function socketReconnect() {\n  return { type: SOCKET_RECONNECT };\n}\n\nexport function setAuthenticationStrategies(strategies) {\n  return {\n    type: AUTH_STRATEGIES,\n    payload: { strategies },\n  };\n}\n\nexport function loginComplete({ token, socketToken, user }) {\n  return (dispatch) => {\n    dispatch({\n      type: LOGIN_COMPLETE,\n      payload: {\n        token,\n        socketToken,\n        user,\n      },\n    });\n    dispatch(closeLoginDialog());\n  };\n}\n\nexport function loadedState(state) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: INIT_STATE,\n      payload: state,\n    });\n    if (state.motd) {\n      dispatch(receiveMotd(state.motd));\n    }\n    dispatch(setAuthenticationStrategies(state.authStrategies));\n    dispatch(setUsers(state.users || []));\n    dispatch(setPlaylists(state.playlists || []));\n    dispatch(setWaitList({\n      waitlist: state.waitlist,\n      locked: state.waitlistLocked,\n    }));\n    if (state.booth && state.booth.historyID) {\n      // TODO don't set this when logging in _after_ entering the page?\n      dispatch(advance(state.booth));\n      dispatch(setVoteStats(state.booth.stats));\n    }\n    if (state.user) {\n      const token = tokenSelector(getState());\n      dispatch(loginComplete({\n        token,\n        socketToken: state.socketToken,\n        user: state.user,\n      }));\n    }\n    if (state.activePlaylist) {\n      dispatch(activatePlaylistComplete(state.activePlaylist));\n      dispatch(selectPlaylist(state.activePlaylist));\n    }\n  };\n}\n\nexport function initState() {\n  const beforeTime = Date.now();\n\n  return get('/now', {\n    onStart: () => ({ type: LOAD_ALL_PLAYLISTS_START }),\n    onComplete: state => (dispatch) => {\n      dispatch(syncTimestamps(beforeTime, state.time));\n      dispatch(loadedState(state));\n      dispatch(loadHistory());\n    },\n  });\n}\n\nexport function setSessionToken(token) {\n  return {\n    type: SET_TOKEN,\n    payload: { token },\n  };\n}\n\nfunction loginStart() {\n  return { type: LOGIN_START };\n}\n\nexport function login({ email, password }) {\n  const sessionType = Session.preferredSessionType();\n  return post(`/auth/login?session=${sessionType}`, { email, password }, {\n    onStart: loginStart,\n    onComplete: res => (dispatch) => {\n      Session.set(res.meta.jwt);\n      dispatch(setSessionToken(res.meta.jwt));\n      dispatch(initState());\n    },\n    onError: error => ({\n      type: LOGIN_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n\nexport function register({\n  email, username, password, grecaptcha,\n}) {\n  return post('/auth/register', {\n    email, username, password, grecaptcha,\n  }, {\n    onStart: () => ({ type: REGISTER_START }),\n    onComplete: res => (dispatch) => {\n      const user = res.data;\n      debug('registered', user);\n      dispatch({\n        type: REGISTER_COMPLETE,\n        payload: { user },\n      });\n      dispatch(login({ email, password }))\n        .then(() => {\n          if (matchMedia('(min-width: 769px)').matches) {\n            return startTutorial();\n          }\n          return null;\n        });\n    },\n    onError: error => ({\n      type: REGISTER_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n\nfunction logoutStart() {\n  return { type: LOGOUT_START };\n}\n\nfunction logoutComplete() {\n  return (dispatch) => {\n    dispatch({ type: LOGOUT_COMPLETE });\n    dispatch(setPlaylists([]));\n  };\n}\n\nexport function logout() {\n  return del('/auth', {}, {\n    onStart: () => (dispatch) => {\n      dispatch(logoutStart());\n      Session.unset();\n    },\n    onComplete: logoutComplete,\n  });\n}\n\nexport function resetPassword(email) {\n  return post('/auth/password/reset', email, {\n    onComplete: () => ({\n      type: RESET_PASSWORD_COMPLETE,\n      payload: 'Successfully sent password reset email',\n    }),\n    onError: error => ({\n      type: RESET_PASSWORD_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n\nexport function getSocketAuthToken() {\n  return get('/auth/socket', {\n    onComplete: res => () => ({\n      socketToken: res.data.socketToken,\n    }),\n  });\n}\n\nfunction whenWindowClosed(window) {\n  return new Promise((resolve) => {\n    const i = setInterval(() => {\n      if (window.closed) {\n        clearInterval(i);\n        resolve();\n      }\n    }, 50);\n  });\n}\nfunction socialLogin(service) {\n  return (dispatch, getState) => {\n    const { apiUrl } = getState().config;\n    const loginWindow = window.open(`${apiUrl}/auth/service/${service}`);\n    return whenWindowClosed(loginWindow).then(() => {\n      // Check login state after the window closed.\n      dispatch(initState());\n    });\n  };\n}\nexport function loginWithGoogle() {\n  return socialLogin('google');\n}\n"],"file":"LoginActionCreators.js"}