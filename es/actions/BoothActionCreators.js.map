{"version":3,"sources":["actions/BoothActionCreators.js"],"names":["ADVANCE","BOOTH_SKIP","LOAD_HISTORY_START","LOAD_HISTORY_COMPLETE","flattenPlaylistItem","get","post","historyIDSelector","isCurrentDJSelector","currentPlaySelector","usersSelector","mergeIncludedModels","advanceToEmpty","dispatch","getState","type","payload","meta","previous","advance","nextBooth","historyID","media","userID","playlistID","playedAt","user","timestamp","skipSelf","opts","remove","Promise","reject","Error","skipped","moderatorID","reason","users","moderator","Date","now","loadHistoryStart","loadHistoryComplete","response","currentHistoryID","playHistory","_id","slice","page","Math","floor","offset","pageSize","size","loadHistory","onStart","onComplete"],"mappings":"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","file":"BoothActionCreators.js","sourcesContent":["import {\n  ADVANCE,\n  BOOTH_SKIP,\n  LOAD_HISTORY_START, LOAD_HISTORY_COMPLETE,\n} from '../constants/actionTypes/booth';\nimport { flattenPlaylistItem } from './PlaylistActionCreators';\nimport { get, post } from './RequestActionCreators';\n\nimport { historyIDSelector, isCurrentDJSelector } from '../selectors/boothSelectors';\nimport { currentPlaySelector } from '../selectors/roomHistorySelectors';\nimport { usersSelector } from '../selectors/userSelectors';\nimport mergeIncludedModels from '../utils/mergeIncludedModels';\n\nexport function advanceToEmpty() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADVANCE,\n      payload: null,\n      meta: { previous: currentPlaySelector(getState()) },\n    });\n  };\n}\n\n/**\n * Set the current song and DJ.\n */\nexport function advance(nextBooth) {\n  if (!nextBooth || !nextBooth.historyID) {\n    return advanceToEmpty();\n  }\n  const {\n    media, userID, historyID, playlistID, playedAt,\n  } = nextBooth;\n  return (dispatch, getState) => {\n    const user = usersSelector(getState())[userID];\n    dispatch({\n      type: ADVANCE,\n      payload: {\n        userID,\n        historyID,\n        playlistID,\n        user,\n        media: flattenPlaylistItem(media),\n        timestamp: playedAt,\n      },\n      meta: {\n        previous: currentPlaySelector(getState()),\n      },\n    });\n  };\n}\n\nexport function skipSelf(opts = {}) {\n  const remove = !!opts.remove;\n  return (dispatch, getState) => {\n    if (isCurrentDJSelector(getState())) {\n      return dispatch(post('/booth/skip', { remove }));\n    }\n    return Promise.reject(new Error('You\\'re not currently playing.'));\n  };\n}\n\nexport function skipped({ userID, moderatorID, reason }) {\n  return (dispatch, getState) => {\n    const users = usersSelector(getState());\n    dispatch({\n      type: BOOTH_SKIP,\n      payload: {\n        user: users[userID],\n        moderator: users[moderatorID],\n        reason,\n        timestamp: Date.now(),\n      },\n    });\n  };\n}\n\nexport function loadHistoryStart() {\n  return { type: LOAD_HISTORY_START };\n}\n\nexport function loadHistoryComplete(response) {\n  return (dispatch, getState) => {\n    const currentHistoryID = historyIDSelector(getState());\n    const { meta } = response;\n    let playHistory = mergeIncludedModels(response);\n    if (playHistory[0] && playHistory[0]._id === currentHistoryID) {\n      playHistory = playHistory.slice(1);\n    }\n    dispatch({\n      type: LOAD_HISTORY_COMPLETE,\n      payload: playHistory,\n      meta: {\n        page: Math.floor(meta.offset / meta.pageSize),\n        size: meta.pageSize,\n      },\n    });\n  };\n}\n\nexport function loadHistory() {\n  return get('/booth/history', {\n    onStart: loadHistoryStart,\n    onComplete: loadHistoryComplete,\n  });\n}\n"]}