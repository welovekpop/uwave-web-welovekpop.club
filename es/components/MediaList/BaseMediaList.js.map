{"version":3,"sources":["components/MediaList/BaseMediaList.js"],"names":["cx","React","PropTypes","BaseList","LazyList","itemSelection","LoadingRow","didMediaChange","prev","next","some","item","i","_id","BaseMediaList","state","selection","props","media","renderList","items","ref","ListComponent","listComponent","renderRow","index","makeActions","rowProps","selected","isSelectedIndex","MediaRow","rowComponent","isAlternate","get","selectItem","e","onOpenPreviewMediaDialog","componentWillReceiveProps","nextProps","getIndices","mediaChanged","setState","preventDefault","shiftKey","selectRange","ctrlKey","selectToggle","select","render","className","size","onRequestPage","list","length","Component","defaultProps","propTypes","string","array","number","func","oneOfType","isRequired","object"],"mappings":"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","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport BaseList from 'react-list';\nimport LazyList from 'react-list-lazy-load';\nimport itemSelection from 'item-selection/immutable';\nimport LoadingRow from './LoadingRow';\n\n/**\n * Check if two media lists are different, taking into account\n * pagination. If the new media list contains items where the previous\n * list doesn't, but every other item is identical, we assume\n * the new list has just loaded a page that wasn't loaded in the\n * previous one, and decide that the list is not really different.\n */\nfunction didMediaChange(prev, next) {\n  return prev.some((item, i) => item && next[i] && item._id !== next[i]._id);\n}\n\nexport default class BaseMediaList extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    media: PropTypes.array,\n    size: PropTypes.number,\n    onRequestPage: PropTypes.func,\n    listComponent: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]).isRequired,\n    rowComponent: PropTypes.func.isRequired,\n    rowProps: PropTypes.object,\n\n    onOpenPreviewMediaDialog: PropTypes.func,\n    makeActions: PropTypes.func,\n  };\n\n  static defaultProps = {\n    // The `size` property is only necessary for lazy loading.\n    size: null,\n    makeActions: () => <span />,\n  };\n\n  state = { selection: itemSelection(this.props.media) };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.media !== this.props.media) {\n      const selection = this.state.selection.getIndices();\n      const mediaChanged = didMediaChange(this.props.media, nextProps.media);\n      this.setState({\n        selection: mediaChanged\n          ? itemSelection(nextProps.media)\n          : itemSelection(nextProps.media, selection),\n      });\n    }\n  }\n\n  selectItem(index, e) {\n    e.preventDefault();\n\n    let { selection } = this.state;\n\n    if (e.shiftKey) {\n      selection = selection.selectRange(index);\n    } else if (e.ctrlKey) {\n      selection = selection.selectToggle(index);\n    } else {\n      selection = selection.select(index);\n    }\n\n    this.setState({ selection });\n  }\n\n  renderList = (items, ref) => {\n    const ListComponent = this.props.listComponent;\n\n    return (\n      <ListComponent ref={ref}>\n        {items}\n      </ListComponent>\n    );\n  };\n\n  renderRow = (index) => {\n    const { makeActions } = this.props;\n    const props = this.props.rowProps || {};\n    const media = this.props.media[index];\n    const { selection } = this.state;\n    const selected = selection.isSelectedIndex(index);\n    if (!media) {\n      return (\n        <LoadingRow\n          key={index}\n          className=\"MediaList-row\"\n          selected={selected}\n        />\n      );\n    }\n    const MediaRow = this.props.rowComponent;\n    const isAlternate = index % 2 === 0;\n    return (\n      <MediaRow\n        key={media ? media._id : index}\n        {...props}\n        className={cx('MediaList-row', isAlternate && 'MediaListRow--alternate')}\n        media={media}\n        selected={selected}\n        selection={selection.get()}\n        onClick={e => this.selectItem(index, e)}\n        onOpenPreviewMediaDialog={this.props.onOpenPreviewMediaDialog}\n        makeActions={() => makeActions(media, selection, index)}\n      />\n    );\n  };\n\n  render() {\n    const {\n      className, media, size, onRequestPage,\n    } = this.props;\n    let list = (\n      <BaseList\n        itemsRenderer={this.renderList}\n        itemRenderer={this.renderRow}\n        length={size || media.length}\n        type=\"uniform\"\n        forceUpdateOnMediaChange={media}\n        forceUpdateOnSelectionChange={this.state.selection}\n      />\n    );\n    if (onRequestPage) {\n      list = (\n        <LazyList\n          items={media}\n          length={size || media.length}\n          pageSize={50}\n          onRequestPage={onRequestPage}\n        >\n          {list}\n        </LazyList>\n      );\n    }\n    return (\n      <div className={cx('MediaList', className)}>\n        {list}\n      </div>\n    );\n  }\n}\n"],"file":"BaseMediaList.js"}