{"version":3,"sources":["components/MediaList/Row.js"],"names":["cx","React","PropTypes","DragSource","getEmptyImage","formatDuration","MEDIA","MediaLoadingIndicator","MediaThumbnail","Actions","inSelection","selection","media","some","item","_id","mediaSource","beginDrag","collect","connectDragSource","connect","dragSource","connectDragPreview","dragPreview","Row","handleDoubleClick","props","onOpenPreviewMediaDialog","componentDidMount","render","className","selected","makeActions","onClick","selectedClass","loadingClass","loading","duration","end","start","handleMouseEnter","handleMouseLeave","thumbnail","artist","title","Component","defaultProps","propTypes","string","func","isRequired","object","bool","array"],"mappings":"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","file":"Row.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport formatDuration from 'format-duration';\nimport { MEDIA } from '../../constants/DDItemTypes';\nimport MediaLoadingIndicator from './MediaLoadingIndicator';\nimport MediaThumbnail from './MediaThumbnail';\nimport Actions from './Actions';\n\nconst inSelection = (selection, media) =>\n  selection.some(item => item._id === media._id);\n\nconst mediaSource = {\n  beginDrag({ selection, media }) {\n    return {\n      media: inSelection(selection, media) ? selection : [ media ]\n    };\n  }\n};\n\nconst collect = connect => ({\n  connectDragSource: connect.dragSource(),\n  connectDragPreview: connect.dragPreview()\n});\n\n@DragSource(MEDIA, mediaSource, collect)\nexport default class Row extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    connectDragSource: PropTypes.func.isRequired,\n    connectDragPreview: PropTypes.func.isRequired,\n    media: PropTypes.object,\n    selected: PropTypes.bool,\n    selection: PropTypes.array,\n\n    onOpenPreviewMediaDialog: PropTypes.func,\n    onClick: PropTypes.func,\n    makeActions: PropTypes.func\n  };\n\n  static defaultProps = {\n    selected: false\n  };\n\n  componentDidMount() {\n    this.props.connectDragPreview(getEmptyImage());\n  }\n\n  handleDoubleClick = () => {\n    this.props.onOpenPreviewMediaDialog(this.props.media);\n  };\n\n  render() {\n    const {\n      className,\n      media,\n      selection,\n      selected,\n      connectDragSource,\n      // actions\n      makeActions,\n      // etc\n      onClick\n    } = this.props;\n    const selectedClass = selected ? 'is-selected' : '';\n    const loadingClass = media.loading ? 'is-loading' : '';\n    const duration = 'start' in media\n      // playlist item\n      ? media.end - media.start\n      // search result\n      : media.duration;\n\n    return connectDragSource(\n      // Bit uneasy about this, but turning the entire row into a button seems\n      // wrong as well! Since we nest media action <button>s inside it, too.\n      //\n      // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n      <div\n        className={cx('MediaListRow', className, selectedClass, loadingClass)}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n        onDoubleClick={this.handleDoubleClick}\n        onClick={onClick}\n      >\n        {media.loading ? (\n          <MediaLoadingIndicator className=\"MediaListRow-loader\" />\n        ) : (\n          <MediaThumbnail url={media.thumbnail} />\n        )}\n        <div className=\"MediaListRow-artist\" title={media.artist}>\n          {media.artist}\n        </div>\n        <div className=\"MediaListRow-title\" title={media.title}>\n          {media.title}\n        </div>\n        <div className=\"MediaListRow-duration\">\n          {formatDuration(duration * 1000)}\n        </div>\n        <Actions\n          className={cx('MediaListRow-actions', selectedClass)}\n          selection={selection}\n          media={media}\n          makeActions={makeActions}\n        />\n      </div>\n    );\n  }\n}\n"]}