{"version":3,"sources":["components/MediaList/index.js"],"names":["cx","React","PropTypes","BaseList","LazyList","itemSelection","Row","LoadingRow","didMediaChange","prev","next","some","item","i","_id","MediaList","state","selection","props","media","renderRow","index","makeActions","rowProps","selected","isSelectedIndex","MediaRow","rowComponent","isAlternate","get","selectItem","e","onOpenPreviewMediaDialog","componentWillReceiveProps","nextProps","getIndices","mediaChanged","setState","preventDefault","shiftKey","selectRange","ctrlKey","selectToggle","select","render","className","size","onRequestPage","list","length","Component","defaultProps","propTypes","string","array","number","func","object"],"mappings":";;;;;AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA;;;;;;;AAOA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AAClC,SAAOD,KAAKE,IAAL,CAAU,UAACC,IAAD,EAAOC,CAAP;AAAA,WAAaD,QAAQF,KAAKG,CAAL,CAAR,IAAmBD,KAAKE,GAAL,KAAaJ,KAAKG,CAAL,EAAQC,GAArD;AAAA,GAAV,CAAP;AACD;;IAEoBC,S;;;;;;;;;;;;wJAoBnBC,K,GAAQ,EAAEC,WAAWZ,cAAc,MAAKa,KAAL,CAAWC,KAAzB,CAAb,E,QA8BRC,S,GAAY,UAACC,KAAD,EAAW;AAAA,UACbC,YADa,GACG,MAAKJ,KADR,CACbI,WADa;;AAErB,UAAMJ,QAAQ,MAAKA,KAAL,CAAWK,QAAX,IAAuB,EAArC;AACA,UAAMJ,QAAQ,MAAKD,KAAL,CAAWC,KAAX,CAAiBE,KAAjB,CAAd;AAHqB,UAIbJ,SAJa,GAIC,MAAKD,KAJN,CAIbC,SAJa;;AAKrB,UAAMO,WAAWP,UAAUQ,eAAV,CAA0BJ,KAA1B,CAAjB;AACA,UAAI,CAACF,KAAL,EAAY;AACV,oBACG,UADH;AAAA,qBAGc,eAHd;AAAA,oBAIcK;AAJd,WAESH,KAFT;AAOD;AACD,UAAMK,WAAW,MAAKR,KAAL,CAAWS,YAA5B;AACA,UAAMC,cAAcP,QAAQ,CAAR,KAAc,CAAlC;AACA,aACE,oBAAC,QAAD;AACE,aAAKF,QAAQA,MAAML,GAAd,GAAoBO;AAD3B,SAEMH,KAFN;AAGE,mBAAWlB,GAAG,eAAH,EAAoB4B,eAAe,yBAAnC,CAHb;AAIE,eAAOT,KAJT;AAKE,kBAAUK,QALZ;AAME,mBAAWP,UAAUY,GAAV,EANb;AAOE,iBAAS;AAAA,iBAAK,MAAKC,UAAL,CAAgBT,KAAhB,EAAuBU,CAAvB,CAAL;AAAA,SAPX;AAQE,kCAA0B,MAAKb,KAAL,CAAWc,wBARvC;AASE,qBAAa;AAAA,iBAAMV,aAAYH,KAAZ,EAAmBF,SAAnB,EAA8BI,KAA9B,CAAN;AAAA;AATf,SADF;AAaD,K;;;sBA1DDY,yB,sCAA0BC,S,EAAW;AACnC,QAAIA,UAAUf,KAAV,KAAoB,KAAKD,KAAL,CAAWC,KAAnC,EAA0C;AACxC,UAAMF,YAAY,KAAKD,KAAL,CAAWC,SAAX,CAAqBkB,UAArB,EAAlB;AACA,UAAMC,eAAe5B,eAAe,KAAKU,KAAL,CAAWC,KAA1B,EAAiCe,UAAUf,KAA3C,CAArB;AACA,WAAKkB,QAAL,CAAc;AACZpB,mBAAWmB,eACP/B,cAAc6B,UAAUf,KAAxB,CADO,GAEPd,cAAc6B,UAAUf,KAAxB,EAA+BF,SAA/B;AAHQ,OAAd;AAKD;AACF,G;;sBAEDa,U,uBAAWT,K,EAAOU,C,EAAG;AACnBA,MAAEO,cAAF;;AADmB,QAGbrB,SAHa,GAGC,KAAKD,KAHN,CAGbC,SAHa;;;AAKnB,QAAIc,EAAEQ,QAAN,EAAgB;AACdtB,kBAAYA,UAAUuB,WAAV,CAAsBnB,KAAtB,CAAZ;AACD,KAFD,MAEO,IAAIU,EAAEU,OAAN,EAAe;AACpBxB,kBAAYA,UAAUyB,YAAV,CAAuBrB,KAAvB,CAAZ;AACD,KAFM,MAEA;AACLJ,kBAAYA,UAAU0B,MAAV,CAAiBtB,KAAjB,CAAZ;AACD;;AAED,SAAKgB,QAAL,CAAc,EAAEpB,oBAAF,EAAd;AACD,G;;sBAkCD2B,M,qBAAS;AAAA,iBAGH,KAAK1B,KAHF;AAAA,QAEL2B,SAFK,UAELA,SAFK;AAAA,QAEM1B,KAFN,UAEMA,KAFN;AAAA,QAEa2B,IAFb,UAEaA,IAFb;AAAA,QAEmBC,aAFnB,UAEmBA,aAFnB;;AAIP,QAAIC,YACD,QADC;AAAA,oBAEc,KAAK5B,SAFnB;AAAA,cAGQ0B,QAAQ3B,MAAM8B,MAHtB;AAAA,YAIK,SAJL;AAAA,gCAK0B9B,KAL1B;AAAA,oCAM8B,KAAKH,KAAL,CAAWC;AANzC,MAAJ;AASA,QAAI8B,aAAJ,EAAmB;AACjBC,kBACG,QADH;AAAA,eAEW7B,KAFX;AAAA,gBAGY2B,QAAQ3B,MAAM8B,MAH1B;AAAA,kBAIc,EAJd;AAAA,uBAKmBF;AALnB,iBAOKC,IAPL;AAUD;AACD;AAAA,iBACkBhD,GAAG,WAAH,EAAgB6C,SAAhB;AADlB,eAEKG,IAFL;AAKD,G;;;EAhHoC/C,MAAMiD,S;;;;AAAxBnC,S,CAaZoC,Y,GAAe;AACpB;AACAL,QAAM,IAFc;AAGpBnB,gBAAcrB,GAHM;AAIpBgB,eAAa;AAAA;AAAA;AAJO,C;eAbHP,S;AAAAA,S,CACZqC,S,2CAAY;AACjBP,aAAW3C,UAAUmD,MADJ;AAEjBlC,SAAOjB,UAAUoD,KAFA;AAGjBR,QAAM5C,UAAUqD,MAHC;AAIjBR,iBAAe7C,UAAUsD,IAJR;AAKjB7B,gBAAczB,UAAUsD,IALP;AAMjBjC,YAAUrB,UAAUuD,MANH;;AAQjBzB,4BAA0B9B,UAAUsD,IARnB;AASjBlC,eAAapB,UAAUsD;AATN,C","file":"index.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport BaseList from 'react-list';\nimport LazyList from 'react-list-lazy-load';\nimport itemSelection from 'item-selection/immutable';\nimport Row from './Row';\nimport LoadingRow from './LoadingRow';\n\n/**\n * Check if two media lists are different, taking into account\n * pagination. If the new media list contains items where the previous\n * list doesn't, but every other item is identical, we assume\n * the new list has just loaded a page that wasn't loaded in the\n * previous one, and decide that the list is not really different.\n */\nfunction didMediaChange(prev, next) {\n  return prev.some((item, i) => item && next[i] && item._id !== next[i]._id);\n}\n\nexport default class MediaList extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    media: PropTypes.array,\n    size: PropTypes.number,\n    onRequestPage: PropTypes.func,\n    rowComponent: PropTypes.func,\n    rowProps: PropTypes.object,\n\n    onOpenPreviewMediaDialog: PropTypes.func,\n    makeActions: PropTypes.func,\n  };\n\n  static defaultProps = {\n    // The `size` property is only necessary for lazy loading.\n    size: null,\n    rowComponent: Row,\n    makeActions: () => <span />,\n  };\n\n  state = { selection: itemSelection(this.props.media) };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.media !== this.props.media) {\n      const selection = this.state.selection.getIndices();\n      const mediaChanged = didMediaChange(this.props.media, nextProps.media);\n      this.setState({\n        selection: mediaChanged\n          ? itemSelection(nextProps.media)\n          : itemSelection(nextProps.media, selection),\n      });\n    }\n  }\n\n  selectItem(index, e) {\n    e.preventDefault();\n\n    let { selection } = this.state;\n\n    if (e.shiftKey) {\n      selection = selection.selectRange(index);\n    } else if (e.ctrlKey) {\n      selection = selection.selectToggle(index);\n    } else {\n      selection = selection.select(index);\n    }\n\n    this.setState({ selection });\n  }\n\n  renderRow = (index) => {\n    const { makeActions } = this.props;\n    const props = this.props.rowProps || {};\n    const media = this.props.media[index];\n    const { selection } = this.state;\n    const selected = selection.isSelectedIndex(index);\n    if (!media) {\n      return (\n        <LoadingRow\n          key={index}\n          className=\"MediaList-row\"\n          selected={selected}\n        />\n      );\n    }\n    const MediaRow = this.props.rowComponent;\n    const isAlternate = index % 2 === 0;\n    return (\n      <MediaRow\n        key={media ? media._id : index}\n        {...props}\n        className={cx('MediaList-row', isAlternate && 'MediaListRow--alternate')}\n        media={media}\n        selected={selected}\n        selection={selection.get()}\n        onClick={e => this.selectItem(index, e)}\n        onOpenPreviewMediaDialog={this.props.onOpenPreviewMediaDialog}\n        makeActions={() => makeActions(media, selection, index)}\n      />\n    );\n  };\n\n  render() {\n    const {\n      className, media, size, onRequestPage,\n    } = this.props;\n    let list = (\n      <BaseList\n        itemRenderer={this.renderRow}\n        length={size || media.length}\n        type=\"uniform\"\n        forceUpdateOnMediaChange={media}\n        forceUpdateOnSelectionChange={this.state.selection}\n      />\n    );\n    if (onRequestPage) {\n      list = (\n        <LazyList\n          items={media}\n          length={size || media.length}\n          pageSize={50}\n          onRequestPage={onRequestPage}\n        >\n          {list}\n        </LazyList>\n      );\n    }\n    return (\n      <div className={cx('MediaList', className)}>\n        {list}\n      </div>\n    );\n  }\n}\n"]}