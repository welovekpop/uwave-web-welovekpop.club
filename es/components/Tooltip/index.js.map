{"version":3,"sources":["components/Tooltip/index.js"],"names":["React","PropTypes","findDOMNode","MuiTooltip","Tooltip","state","horizontalPosition","props","insert","show","refTooltip","tooltip","componentWillReceiveProps","nextProps","hide","clearTimeout","timeout","setState","position","setTimeout","rect","getBoundingClientRect","right","window","innerWidth","render","pointerEvents","style","Component","propTypes","object","bool","oneOf"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA;;;;;;IAMMC,O;;;;;;;;;;;;wJAUJC,K,GAAQ;AACN;;;AAGAC,0BAAoB,MAAKC,KAAL,CAAWD,kBAJzB;AAKN;;;AAGAE,cAAQ,MAAKD,KAAL,CAAWE,IARb;AASN;;;AAGAA,YAAM,MAAKF,KAAL,CAAWE;AAZX,K,QAwFRC,U,GAAa,UAACC,OAAD,EAAa;AACxB,YAAKA,OAAL,GAAeA,OAAf;AACD,K;;;oBA3EDC,yB,sCAA0BC,S,EAAW;AACnC,QAAI,CAAC,KAAKN,KAAL,CAAWE,IAAZ,IAAoBI,UAAUJ,IAAlC,EAAwC;AACtC,WAAKA,IAAL;AACD;;AAED,QAAI,KAAKF,KAAL,CAAWE,IAAX,IAAmB,CAACI,UAAUJ,IAAlC,EAAwC;AACtC,WAAKK,IAAL;AACD;AACF,G;;AAED;;;;;oBAGAC,Y;;;;;;;;;;gBAAe;AACb,QAAI,KAAKC,OAAT,EAAkB;AAChBD,mBAAa,KAAKC,OAAlB;AACA,WAAKA,OAAL,GAAe,IAAf;AACD;AACF,G;;AAED;;;;;oBAGAP,I,mBAAO;AAAA;;AACL,SAAKM,YAAL;AACA,SAAKE,QAAL,CAAc,EAAET,QAAQ,IAAV,EAAd,EAAgC,YAAM;AACpC,aAAKU,QAAL;AACA,aAAKD,QAAL,CAAc,EAAER,MAAM,IAAR,EAAd;AACD,KAHD;AAID,G;;AAED;;;;;oBAGAK,I,mBAAO;AAAA;;AACL,QAAI,KAAKE,OAAT,EAAkB;AAChB;AACD;;AAED;AACA,SAAKC,QAAL,CAAc,EAAER,MAAM,KAAR,EAAd,EAA+B,YAAM;AACnC;AACA,aAAKO,OAAL,GAAeG,WAAW,YAAM;AAC9B;AACA,eAAKF,QAAL,CAAc;AACZT,kBAAQ,KADI;AAEZ;AACA;AACA;AACA;AACA;AACAF,8BAAoB,OAAKC,KAAL,CAAWD;AAPnB,SAAd;AASD,OAXc,EAWZ,GAXY,CAAf;AAYD,KAdD;AAeD,G;;AAED;;;;;oBAGAY,Q,uBAAW;AACT,QAAI,CAAC,KAAKP,OAAV,EAAmB;AACjB;AACD;;AAED;AACA,QAAMS,OAAOlB,YAAY,KAAKS,OAAjB,EAA0BU,qBAA1B,EAAb;AACA,SAAKJ,QAAL,CAAc;AACZX,0BAAoBc,KAAKE,KAAL,GAAaC,OAAOC,UAApB,GAAiC,MAAjC,GAClB,KAAKjB,KAAL,CAAWD;AAFD,KAAd;AAID,G;;oBAMDmB,M,qBAAS;AAAA,iBACkB,KAAKpB,KADvB;AAAA,QACCG,MADD,UACCA,MADD;AAAA,QACSC,IADT,UACSA,IADT;;AAEP;AAAA,iBACiB;AADjB,eAEKD,UACC,oBAAC,UAAD;AACE,WAAK,KAAKE;AADZ,OAEM,KAAKH,KAFX;AAGE,YAAME,IAHR;AAIE,0BAAoB,KAAKJ,KAAL,CAAWC,kBAJjC;AAKE;AACE;AACA;AACAoB,uBAAe;AAHjB,SAIK,KAAKnB,KAAL,CAAWoB,KAJhB;AALF,OAHN;AAkBD,G;;;EA1HmB3B,MAAM4B,S;;AAAtBxB,O,CACGyB,S,2CAAY;AACjBF,SAAO1B,UAAU6B,MADA;AAEjBrB,QAAMR,UAAU8B,IAFC;AAGjB;;;AAGAzB,sBAAoBL,UAAU+B,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CAAhB;AANH,C;;;AA4HrB,eAAe5B,OAAf","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport MuiTooltip from 'material-ui/internal/Tooltip';\n\n/**\n * Wrapper for material-ui Tooltips with better center-alignment on things that\n * are not IconButtons, and auto-realignment when close to the window border in\n * order to prevent overflow.\n */\n\nclass Tooltip extends React.Component {\n  static propTypes = {\n    style: PropTypes.object,\n    show: PropTypes.bool,\n    /**\n     * Desired horizontal position of the tooltip.\n     */\n    horizontalPosition: PropTypes.oneOf(['left', 'center', 'right']),\n  };\n\n  state = {\n    /**\n     * Overflow-prevented horizontal position of the tooltip.\n     */\n    horizontalPosition: this.props.horizontalPosition,\n    /**\n     * Whether the tooltip element is currently in the DOM.\n     */\n    insert: this.props.show,\n    /**\n     * Whether the tooltip element is currently visible.\n     */\n    show: this.props.show,\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (!this.props.show && nextProps.show) {\n      this.show();\n    }\n\n    if (this.props.show && !nextProps.show) {\n      this.hide();\n    }\n  }\n\n  /**\n   * Clear the fade-out animation timeout.\n   */\n  clearTimeout() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n  }\n\n  /**\n   * Show the tooltip.\n   */\n  show() {\n    this.clearTimeout();\n    this.setState({ insert: true }, () => {\n      this.position();\n      this.setState({ show: true });\n    });\n  }\n\n  /**\n   * Hide the tooltip.\n   */\n  hide() {\n    if (this.timeout) {\n      return;\n    }\n\n    // First hide it,\n    this.setState({ show: false }, () => {\n      // Then wait for the fade-out animation,\n      this.timeout = setTimeout(() => {\n        // And finally remove the element.\n        this.setState({\n          insert: false,\n          // The horizontal position is reset here, so that the next time the\n          // tooltip is shown, the positioning checks run on the original\n          // position. Otherwise, it might getBoundingClientRect() from an\n          // already-repositioned element, discover that it is fits, and go back\n          // to the initial state even if it did not fit.\n          horizontalPosition: this.props.horizontalPosition,\n        });\n      }, 450);\n    });\n  }\n\n  /**\n   * Reposition the tooltip if it is close to the window border.\n   */\n  position() {\n    if (!this.tooltip) {\n      return;\n    }\n\n    // eslint-disable-next-line react/no-find-dom-node\n    const rect = findDOMNode(this.tooltip).getBoundingClientRect();\n    this.setState({\n      horizontalPosition: rect.right > window.innerWidth ? 'left' :\n        this.props.horizontalPosition,\n    });\n  }\n\n  refTooltip = (tooltip) => {\n    this.tooltip = tooltip;\n  };\n\n  render() {\n    const { insert, show } = this.state;\n    return (\n      <div className=\"u-TooltipFix\">\n        {insert && (\n          <MuiTooltip\n            ref={this.refTooltip}\n            {...this.props}\n            show={show}\n            horizontalPosition={this.state.horizontalPosition}\n            style={{\n              // \"pointer-events: none\" avoids interference with tooltips  that\n              // are very close to or overlay other elements that have tooltips.\n              pointerEvents: 'none',\n              ...this.props.style,\n            }}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Tooltip;\n"]}