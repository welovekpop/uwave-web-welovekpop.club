{"version":3,"sources":["components/PlaylistManager/Header/SourcePicker.js"],"names":["cx","React","PropTypes","Popover","ArrowIcon","injectMediaSources","SourcePickerElement","enhance","popoverPosition","anchorOrigin","vertical","horizontal","transformOrigin","SourcePicker","state","open","handleOpen","setState","anchor","container","handleClose","refContainer","createElement","sourceName","props","selected","getMediaSource","handleChange","onChange","render","className","getAllMediaSources","sourceNames","Object","keys","sources","filter","name","map","paper","Component","propTypes","string","func","isRequired"],"mappings":";;;;;AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAEA,IAAMC,UAAUF,oBAAhB;;AAEA,IAAMG,kBAAkB;AACtBC,gBAAc,EAAEC,UAAU,QAAZ,EAAsBC,YAAY,MAAlC,EADQ;AAEtBC,mBAAiB,EAAEF,UAAU,KAAZ,EAAmBC,YAAY,MAA/B;AAFK,CAAxB;;gBAiFW,S;aAAoB;;;IA5EzBE,Y;;;;;;;;;;;;wJAUJC,K,GAAQ,EAAEC,MAAM,KAAR,E,QAmBRC,U,GAAa,YAAM;AACjB,YAAKC,QAAL,CAAc;AACZF,cAAM,IADM;AAEZG,gBAAQ,MAAKC;AAFD,OAAd;AAID,K,QAEDC,W,GAAc,YAAM;AAClB,YAAKH,QAAL,CAAc,EAAEF,MAAM,KAAR,EAAd;AACD,K,QAODM,Y,GAAe,UAACF,SAAD,EAAe;AAC5B,YAAKA,SAAL,GAAiBA,SAAjB;AACD,K;;;yBAnCDG,a,0BAAcC,U,EAAY;AAAA;;AAAA,iBACa,KAAKC,KADlB;AAAA,QAChBC,QADgB,UAChBA,QADgB;AAAA,QACNC,cADM,UACNA,cADM;;AAExB;AAAA,iBAEc,mBAFd;AAAA,eAIa;AAAA,eAAM,OAAKC,YAAL,CAAkBJ,UAAlB,CAAN;AAAA;AAJb,OAGSA,UAHT,OAMK,mBANL;AAAA,YAOYA,UAPZ;AAAA,cAQcG,eAAeH,UAAf,CARd;AAAA,cAScE,aAAaF;AAT3B;AAaD,G;;yBAaDI,Y,yBAAaJ,U,EAAY;AACvB,SAAKH,WAAL;AACA,SAAKI,KAAL,CAAWI,QAAX,CAAoBL,UAApB;AACD,G;;yBAMDM,M,qBAAS;AAAA;;AAAA,kBAMH,KAAKL,KANF;AAAA,QAELM,SAFK,WAELA,SAFK;AAAA,QAGLL,QAHK,WAGLA,QAHK;AAAA,QAILC,cAJK,WAILA,cAJK;AAAA,QAKLK,kBALK,WAKLA,kBALK;;;AAQP,QAAMC,cAAcC,OAAOC,IAAP,CAAYH,oBAAZ,CAApB;AACA,QAAMI,UAAUH,YACbI,MADa,CACN;AAAA,aAAQC,SAASZ,QAAjB;AAAA,KADM,EAEba,GAFa,CAET;AAAA,aAAQ,OAAKhB,aAAL,CAAmBe,IAAnB,CAAR;AAAA,KAFS,CAAhB;;AAIA,WACE;AAAA;AAAA;AACE,mBAAWrC,GAAG,cAAH,EAAmB8B,SAAnB,CADb;AAEE,aAAK,KAAKT;AAFZ;AAAA;AAAA,mBAKc,qBALd;AAAA,iBAMa,KAAKL;AANlB,sBAQK,mBARL;AAAA,cASYS,QATZ;AAAA,gBAUcC,eAAeD,QAAf,CAVd;AAAA;AAAA;AAeE;AAAC,eAAD;AAAA;AACE,mBAAS,EAAEc,OAAO,mBAAT,EADX;AAEE,gBAAM,KAAKzB,KAAL,CAAWC,IAFnB;AAGE,oBAAU,KAAKD,KAAL,CAAWI,MAHvB;AAIE,mBAAS,KAAKE;AAJhB,WAKMZ,eALN;AAOG2B;AAPH;AAfF,KADF;AA2BD,G;;;EAzFwBlC,MAAMuC,S;;AAA3B3B,Y,CACG4B,S,2CAAY;AACjBX,aAAW5B,UAAUwC,MADJ;AAEjBjB,YAAUvB,UAAUwC,MAFH;AAGjBd,YAAU1B,UAAUyC,IAHH;;AAKjBjB,kBAAgBxB,UAAUyC,IAAV,CAAeC,UALd;AAMjBb,sBAAoB7B,UAAUyC,IAAV,CAAeC;AANlB,C;;;AA2FrB,eAAerC,QAAQM,YAAR,CAAf","file":"SourcePicker.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Popover from 'material-ui/Popover';\nimport ArrowIcon from 'material-ui-icons/ArrowDropDown';\nimport injectMediaSources from '../../../utils/injectMediaSources';\nimport SourcePickerElement from './SourcePickerElement';\n\nconst enhance = injectMediaSources();\n\nconst popoverPosition = {\n  anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n  transformOrigin: { vertical: 'top', horizontal: 'left' },\n};\n\nclass SourcePicker extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    selected: PropTypes.string,\n    onChange: PropTypes.func,\n\n    getMediaSource: PropTypes.func.isRequired,\n    getAllMediaSources: PropTypes.func.isRequired,\n  };\n\n  state = { open: false };\n\n  createElement(sourceName) {\n    const { selected, getMediaSource } = this.props;\n    return (\n      <button\n        className=\"SourcePicker-item\"\n        key={sourceName}\n        onClick={() => this.handleChange(sourceName)}\n      >\n        <SourcePickerElement\n          name={sourceName}\n          source={getMediaSource(sourceName)}\n          active={selected === sourceName}\n        />\n      </button>\n    );\n  }\n\n  handleOpen = () => {\n    this.setState({\n      open: true,\n      anchor: this.container,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleChange(sourceName) {\n    this.handleClose();\n    this.props.onChange(sourceName);\n  }\n\n  refContainer = (container) => {\n    this.container = container;\n  };\n\n  render() {\n    const {\n      className,\n      selected,\n      getMediaSource,\n      getAllMediaSources,\n    } = this.props;\n\n    const sourceNames = Object.keys(getAllMediaSources());\n    const sources = sourceNames\n      .filter(name => name !== selected)\n      .map(name => this.createElement(name));\n\n    return (\n      <div\n        className={cx('SourcePicker', className)}\n        ref={this.refContainer}\n      >\n        <button\n          className=\"SourcePicker-active\"\n          onClick={this.handleOpen}\n        >\n          <SourcePickerElement\n            name={selected}\n            source={getMediaSource(selected)}\n            active\n          />\n          <ArrowIcon className=\"SourcePicker-arrow\" />\n        </button>\n        <Popover\n          classes={{ paper: 'SourcePicker-list' }}\n          open={this.state.open}\n          anchorEl={this.state.anchor}\n          onClose={this.handleClose}\n          {...popoverPosition}\n        >\n          {sources}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nexport default enhance(SourcePicker);\n"]}