{"version":3,"sources":["components/PlaylistManager/Header/SourcePicker.js"],"names":["cx","React","PropTypes","compose","Popover","ArrowIcon","muiThemeable","injectMediaSources","SourcePickerElement","SourcePicker","state","open","handleOpen","setState","anchor","container","handleClose","refContainer","createElement","sourceName","props","selected","getMediaSource","handleChange","onChange","render","className","muiTheme","getAllMediaSources","sourceNames","Object","keys","sources","filter","name","map","palette","textColor","height","Component","propTypes","string","func","object","isRequired"],"mappings":"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","file":"SourcePicker.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport Popover from 'material-ui/Popover';\nimport ArrowIcon from 'material-ui/svg-icons/navigation/arrow-drop-down';\nimport muiThemeable from 'material-ui/styles/muiThemeable';\n\nimport injectMediaSources from '../../../utils/injectMediaSources';\nimport SourcePickerElement from './SourcePickerElement';\n\nclass SourcePicker extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    selected: PropTypes.string,\n    onChange: PropTypes.func,\n\n    muiTheme: PropTypes.object.isRequired,\n    getMediaSource: PropTypes.func.isRequired,\n    getAllMediaSources: PropTypes.func.isRequired,\n  };\n\n  state = { open: false };\n\n  createElement(sourceName) {\n    const { selected, getMediaSource } = this.props;\n    return (\n      <button\n        className=\"SourcePicker-item\"\n        key={sourceName}\n        onClick={() => this.handleChange(sourceName)}\n      >\n        <SourcePickerElement\n          name={sourceName}\n          source={getMediaSource(sourceName)}\n          active={selected === sourceName}\n        />\n      </button>\n    );\n  }\n\n  handleOpen = () => {\n    this.setState({\n      open: true,\n      anchor: this.container,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleChange(sourceName) {\n    this.handleClose();\n    this.props.onChange(sourceName);\n  }\n\n  refContainer = (container) => {\n    this.container = container;\n  };\n\n  render() {\n    const {\n      className,\n      selected,\n      muiTheme,\n      getMediaSource,\n      getAllMediaSources,\n    } = this.props;\n\n    const sourceNames = Object.keys(getAllMediaSources());\n    const sources = sourceNames\n      .filter(name => name !== selected)\n      .map(name => this.createElement(name));\n\n    return (\n      <div\n        className={cx('SourcePicker', className)}\n        ref={this.refContainer}\n      >\n        <button\n          className=\"SourcePicker-active\"\n          onClick={this.handleOpen}\n        >\n          <SourcePickerElement\n            name={selected}\n            source={getMediaSource(selected)}\n            active\n          />\n          <ArrowIcon\n            color={muiTheme.palette.textColor}\n            style={{ height: '100%' }}\n          />\n        </button>\n        <Popover\n          className=\"SourcePicker-list\"\n          open={this.state.open}\n          anchorEl={this.state.anchor}\n          onRequestClose={this.handleClose}\n        >\n          {sources}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectMediaSources(),\n  muiThemeable(),\n)(SourcePicker);\n"]}