{"version":3,"sources":["components/PlaylistManager/Menu/NewPlaylist.js"],"names":["cx","React","PropTypes","translate","CreatePlaylistIcon","PromptDialog","enhance","NewPlaylist","state","creating","handleOpen","setState","handleClose","closeDialog","handleSubmit","Promise","resolve","props","onCreatePlaylist","playlistName","then","bind","render","t","className","Component","propTypes","string","func","isRequired"],"mappings":";;;;AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;;AAEA,OAAOC,YAAP,MAAyB,4BAAzB;;AAEA,IAAMC,UAAUH,WAAhB;;;aAwC6B;gBACZ,kB;;iBASE,kB;eAA+B;;;IAhD5CI,W;;;;;;;;;;;;wJAOJC,K,GAAQ;AACNC,gBAAU;AADJ,K,QAQRC,U,GAAa,YAAM;AACjB,YAAKC,QAAL,CAAc,EAAEF,UAAU,IAAZ,EAAd;AACD,K,QAEDG,W,GAAc,YAAM;AAClB,YAAKC,WAAL;AACD,K,QAEDC,Y,GAAe;AAAA,aACbC,QAAQC,OAAR,CAAgB,MAAKC,KAAL,CAAWC,gBAAX,CAA4BC,YAA5B,CAAhB,EACGC,IADH,CACQ,MAAKP,WAAL,CAAiBQ,IAAjB,OADR,CADa;AAAA,K;;;wBAZfR,W,0BAAc;AACZ,SAAKF,QAAL,CAAc,EAAEF,UAAU,KAAZ,EAAd;AACD,G;;wBAcDa,M,qBAAS;AAAA,iBACkB,KAAKL,KADvB;AAAA,QACCM,CADD,UACCA,CADD;AAAA,QACIC,SADJ,UACIA,SADJ;;AAEP,gBACG,MAAM,QADT;AAAA,YAGW,UAHX;AAAA,iBAIiBxB,GAAG,iBAAH,EAAsB,yBAAtB,EAAiDwB,SAAjD,CAJjB;AAAA,eAKe,KAAKd;AALpB;AAAA,iBAOqB;AAPrB;AAAA,iBAQuB;AARvB,qBAYWa,EAAE,eAAF,CAZX,KAgBK,KAAKf,KAAL,CAAWC,QAAX,SACE,YADF;AAAA,aAEUc,EAAE,uCAAF,CAFV;AAAA;AAAA,mBAIgBA,EAAE,+BAAF,CAJhB;AAAA,gBAKa,KAAKT,YALlB;AAAA,gBAMa,KAAKF;AANlB,MAhBL;AA2BD,G;;;EAxDuBX,MAAMwB,S;;AAA1BlB,W,CACGmB,S,2CAAY;AACjBF,aAAWtB,UAAUyB,MADJ;AAEjBJ,KAAGrB,UAAU0B,IAAV,CAAeC,UAFD;AAGjBX,oBAAkBhB,UAAU0B,IAAV,CAAeC;AAHhB,C;;;AA0DrB,eAAevB,QAAQC,WAAR,CAAf","file":"NewPlaylist.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport CreatePlaylistIcon from 'material-ui-icons/Add';\n\nimport PromptDialog from '../../Dialogs/PromptDialog';\n\nconst enhance = translate();\n\nclass NewPlaylist extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    t: PropTypes.func.isRequired,\n    onCreatePlaylist: PropTypes.func.isRequired,\n  };\n\n  state = {\n    creating: false,\n  };\n\n  closeDialog() {\n    this.setState({ creating: false });\n  }\n\n  handleOpen = () => {\n    this.setState({ creating: true });\n  };\n\n  handleClose = () => {\n    this.closeDialog();\n  };\n\n  handleSubmit = playlistName =>\n    Promise.resolve(this.props.onCreatePlaylist(playlistName))\n      .then(this.closeDialog.bind(this));\n\n  render() {\n    const { t, className } = this.props;\n    return (\n      <React.Fragment>\n        <button\n          role=\"menuitem\"\n          className={cx('PlaylistMenuRow', 'PlaylistMenuRow--create', className)}\n          onClick={this.handleOpen}\n        >\n          <div className=\"PlaylistMenuRow-content\">\n            <div className=\"PlaylistMenuRow-title\">\n              <div className=\"PlaylistMenuRow-active-icon\">\n                <CreatePlaylistIcon />\n              </div>\n              {t('playlists.new')}\n            </div>\n          </div>\n        </button>\n        {this.state.creating && (\n          <PromptDialog\n            title={t('dialogs.createPlaylist.nameInputTitle')}\n            icon={<CreatePlaylistIcon nativeColor=\"#777\" />}\n            submitLabel={t('dialogs.createPlaylist.action')}\n            onSubmit={this.handleSubmit}\n            onCancel={this.handleClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default enhance(NewPlaylist);\n"]}