{"version":3,"sources":["components/PlaylistManager/Menu/Row.js"],"names":["cx","React","PropTypes","DropTarget","ActiveIcon","MEDIA","Loader","playlistTarget","drop","monitor","playlist","onAddToPlaylist","getItem","media","collect","connect","connectDropTarget","dropTarget","isOver","enhance","PlaylistRow","render","props","className","selected","onClick","activeClass","active","selectedClass","droppableClass","icon","creating","name","size","Component","propTypes","string","object","bool","isRequired","func"],"mappings":";;;;AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,SAASC,KAAT,QAAsB,gCAAtB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,IAAMC,iBAAiB;AACrBC,MADqB,sBACeC,OADf,EACwB;AAAA,QAAtCC,QAAsC,QAAtCA,QAAsC;AAAA,QAA5BC,eAA4B,QAA5BA,eAA4B;;AAAA,2BACzBF,QAAQG,OAAR,EADyB;AAAA,QACnCC,KADmC,oBACnCA,KADmC;;AAE3CF,oBAAgBD,QAAhB,EAA0BG,KAA1B;AACD;AAJoB,CAAvB;;AAOA,IAAMC,UAAU,SAAVA,OAAU,CAACC,OAAD,EAAUN,OAAV;AAAA,SAAuB;AACrCO,uBAAmBD,QAAQE,UAAR,EADkB;AAErCC,YAAQT,QAAQS,MAAR;AAF6B,GAAvB;AAAA,CAAhB;;AAKA,IAAMC,UAAUhB,WAAWE,KAAX,EAAkBE,cAAlB,EAAkCO,OAAlC,CAAhB;;;aAkCuB;gBACZ,M;QAAY;;;;aAKA;gBACZ,U;SAAiB;;;IAvCtBM,W;;;;;;;;;wBAcJC,M,qBAAS;AAAA,iBAUH,KAAKC,KAVF;AAAA,QAELC,SAFK,UAELA,SAFK;AAAA,QAGLb,QAHK,UAGLA,QAHK;AAAA,QAILc,QAJK,UAILA,QAJK;AAAA,QAMLC,OANK,UAMLA,OANK;AAAA,QAQLT,iBARK,UAQLA,iBARK;AAAA,QASLE,MATK,UASLA,MATK;;AAWP,QAAMQ,cAAchB,SAASiB,MAAT,IAAmB,WAAvC;AACA,QAAMC,gBAAgBJ,YAAY,aAAlC;AACA,QAAMK,iBAAiBX,UAAU,cAAjC;;AAEA,QAAIY,aAAJ;AACA,QAAIpB,SAASqB,QAAb,EAAuB;AACrBD;AAKD,KAND,MAMO,IAAIpB,SAASiB,MAAb,EAAqB;AAC1BG;AAKD;;AAED,WAAOd;AAAA,YAEE,UAFF;AAAA,iBAGQhB,GAAG,iBAAH,EAAsB0B,WAAtB,EAAmCE,aAAnC,EAAkDC,cAAlD,EAAkEN,SAAlE,CAHR;AAAA,eAIME;AAJN;AAAA,iBAMY;AANZ;AAAA,iBAOc;AAPd,eAQEK,IARF,EASEpB,SAASsB,IATX;AAAA,iBAWc;AAXd,eAWuCtB,SAASuB,IAXhD,IAAP;AAeD,G;;;EA3DuBhC,MAAMiC,S;;AAA1Bd,W,CACGe,S,2CAAY;AACjBZ,aAAWrB,UAAUkC,MADJ;AAEjB1B,YAAUR,UAAUmC,MAFH;AAGjBb,YAAUtB,UAAUoC,IAHH;AAIjBpB,UAAQhB,UAAUoC,IAAV,CAAeC,UAJN;;AAMjBvB,qBAAmBd,UAAUsC,IAAV,CAAeD,UANjB;AAOjBd,WAASvB,UAAUsC,IAPF;AAQjB;AACA;AACA7B,mBAAiBT,UAAUsC;AAVV,C;;;AA6DrB,eAAerB,QAAQC,WAAR,CAAf","file":"Row.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropTarget } from 'react-dnd';\nimport ActiveIcon from 'material-ui/svg-icons/navigation/check';\nimport { MEDIA } from '../../../constants/DDItemTypes';\nimport Loader from '../../Loader';\n\nconst playlistTarget = {\n  drop({ playlist, onAddToPlaylist }, monitor) {\n    const { media } = monitor.getItem();\n    onAddToPlaylist(playlist, media);\n  }\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver()\n});\n\nconst enhance = DropTarget(MEDIA, playlistTarget, collect);\n\nclass PlaylistRow extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    playlist: PropTypes.object,\n    selected: PropTypes.bool,\n    isOver: PropTypes.bool.isRequired,\n\n    connectDropTarget: PropTypes.func.isRequired,\n    onClick: PropTypes.func,\n    // Used in the drop handler above ðŸ‘†\n    // eslint-disable-next-line react/no-unused-prop-types\n    onAddToPlaylist: PropTypes.func\n  };\n\n  render() {\n    const {\n      className,\n      playlist,\n      selected,\n\n      onClick,\n\n      connectDropTarget,\n      isOver\n    } = this.props;\n    const activeClass = playlist.active && 'is-active';\n    const selectedClass = selected && 'is-selected';\n    const droppableClass = isOver && 'is-droppable';\n\n    let icon;\n    if (playlist.creating) {\n      icon = (\n        <div className=\"PlaylistMenuRow-loading\">\n          <Loader size=\"tiny\" />\n        </div>\n      );\n    } else if (playlist.active) {\n      icon = (\n        <div className=\"PlaylistMenuRow-active-icon\">\n          <ActiveIcon color=\"#fff\" />\n        </div>\n      );\n    }\n\n    return connectDropTarget((\n      <button\n        role=\"menuitem\"\n        className={cx('PlaylistMenuRow', activeClass, selectedClass, droppableClass, className)}\n        onClick={onClick}\n      >\n        <div className=\"PlaylistMenuRow-content\">\n          <div className=\"PlaylistMenuRow-title\">\n            {icon}\n            {playlist.name}\n          </div>\n          <div className=\"PlaylistMenuRow-count\">{playlist.size}</div>\n        </div>\n      </button>\n    ));\n  }\n}\n\nexport default enhance(PlaylistRow);\n"]}