{"version":3,"sources":["components/PlaylistManager/Menu/Row.js"],"names":["cx","React","PropTypes","DropTarget","CircularProgress","MenuItem","ActiveIcon","MEDIA","playlistTarget","drop","monitor","playlist","onAddToPlaylist","getItem","media","collect","connect","connectDropTarget","dropTarget","isOver","enhance","itemClasses","root","selected","PlaylistRow","render","props","onClick","activeClass","active","droppableClass","icon","creating","name","size","Component","propTypes","object","bool","isRequired","func"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,SAASC,KAAT,QAAsB,gCAAtB;AAEA,IAAMC,iBAAiB;AACrBC,MADqB,sBACeC,OADf,EACwB;AAAA,QAAtCC,QAAsC,QAAtCA,QAAsC;AAAA,QAA5BC,eAA4B,QAA5BA,eAA4B;;AAAA,2BACzBF,QAAQG,OAAR,EADyB;AAAA,QACnCC,KADmC,oBACnCA,KADmC;;AAE3CF,oBAAgBD,QAAhB,EAA0BG,KAA1B;AACD;AAJoB,CAAvB;;AAOA,IAAMC,UAAU,SAAVA,OAAU,CAACC,OAAD,EAAUN,OAAV;AAAA,SAAuB;AACrCO,uBAAmBD,QAAQE,UAAR,EADkB;AAErCC,YAAQT,QAAQS,MAAR;AAF6B,GAAvB;AAAA,CAAhB;;AAKA,IAAMC,UAAUjB,WAAWI,KAAX,EAAkBC,cAAlB,EAAkCO,OAAlC,CAAhB;AAEA,IAAMM,cAAc;AAClBC,QAAM,iBADY;AAElBC,YAAU;AAFQ,CAApB;;;;AAkCQ;AAAK,aAAU;AAAf,WACE,KAAC,gBAAD;AAAkB,QAAK;AAAvB,EADF,C;;;;AAMA;AAAK,aAAU;AAAf,WACE,KAAC,UAAD,KADF,C;;IAnCFC,W;;;;;;;;;;;SAaJC,M,qBAAS;AAAA,sBASH,KAAKC,KATF;AAAA,QAELf,QAFK,eAELA,QAFK;AAAA,QAGLY,QAHK,eAGLA,QAHK;AAAA,QAKLI,OALK,eAKLA,OALK;AAAA,QAOLV,iBAPK,eAOLA,iBAPK;AAAA,QAQLE,MARK,eAQLA,MARK;AAUP,QAAMS,cAAcjB,SAASkB,MAAT,IAAmB,WAAvC;AACA,QAAMC,iBAAiBX,UAAU,cAAjC;AAEA,QAAIY,IAAJ;;AACA,QAAIpB,SAASqB,QAAb,EAAuB;AACrBD;AAKD,KAND,MAMO,IAAIpB,SAASkB,MAAb,EAAqB;AAC1BE;AAKD;;AAED,WAAOd,kBACL,wBACE,KAAC,QAAD;AACE,gBAAUM,QADZ;AAEE,iBAAWvB,GAAG4B,WAAH,EAAgBE,cAAhB,CAFb;AAGE,eAAST,WAHX;AAIE,eAASM;AAJX,eAME;AAAK,iBAAU;AAAf,eACGI,IADH,EAEGpB,SAASsB,IAFZ,CANF,EAUE;AAAK,iBAAU;AAAf,eAAwCtB,SAASuB,IAAjD,CAVF,CADF,CADK,CAAP;AAgBD,G;;;EAzDuBjC,MAAMkC,S;;AAA1BX,W,CACGY,S,2CAAY;AACjBzB,YAAUT,UAAUmC,MADH;AAEjBd,YAAUrB,UAAUoC,IAFH;AAGjBnB,UAAQjB,UAAUoC,IAAV,CAAeC,UAHN;AAKjBtB,qBAAmBf,UAAUsC,IAAV,CAAeD,UALjB;AAMjBZ,WAASzB,UAAUsC,IANF;AAOjB;AACA;AACA5B,mBAAiBV,UAAUsC;AATV,C;AA2DrB,eAAepB,QAAQI,WAAR,CAAf","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DropTarget } from 'react-dnd';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ActiveIcon from '@material-ui/icons/Check';\nimport { MEDIA } from '../../../constants/DDItemTypes';\n\nconst playlistTarget = {\n  drop({ playlist, onAddToPlaylist }, monitor) {\n    const { media } = monitor.getItem();\n    onAddToPlaylist(playlist, media);\n  },\n};\n\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n});\n\nconst enhance = DropTarget(MEDIA, playlistTarget, collect);\n\nconst itemClasses = {\n  root: 'PlaylistMenuRow',\n  selected: 'is-selected',\n};\n\nclass PlaylistRow extends React.Component {\n  static propTypes = {\n    playlist: PropTypes.object,\n    selected: PropTypes.bool,\n    isOver: PropTypes.bool.isRequired,\n\n    connectDropTarget: PropTypes.func.isRequired,\n    onClick: PropTypes.func,\n    // Used in the drop handler above ðŸ‘†\n    // eslint-disable-next-line react/no-unused-prop-types\n    onAddToPlaylist: PropTypes.func,\n  };\n\n  render() {\n    const {\n      playlist,\n      selected,\n\n      onClick,\n\n      connectDropTarget,\n      isOver,\n    } = this.props;\n    const activeClass = playlist.active && 'is-active';\n    const droppableClass = isOver && 'is-droppable';\n\n    let icon;\n    if (playlist.creating) {\n      icon = (\n        <div className=\"PlaylistMenuRow-loading\">\n          <CircularProgress size=\"100%\" />\n        </div>\n      );\n    } else if (playlist.active) {\n      icon = (\n        <div className=\"PlaylistMenuRow-active-icon\">\n          <ActiveIcon />\n        </div>\n      );\n    }\n\n    return connectDropTarget((\n      <div>\n        <MenuItem\n          selected={selected}\n          className={cx(activeClass, droppableClass)}\n          classes={itemClasses}\n          onClick={onClick}\n        >\n          <div className=\"PlaylistMenuRow-title\">\n            {icon}\n            {playlist.name}\n          </div>\n          <div className=\"PlaylistMenuRow-count\">{playlist.size}</div>\n        </MenuItem>\n      </div>\n    ));\n  }\n}\n\nexport default enhance(PlaylistRow);\n"],"file":"Row.js"}