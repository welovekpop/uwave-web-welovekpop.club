{"version":3,"sources":["components/PlaylistManager/index.js"],"names":["cx","React","PropTypes","OverlayContent","PlaylistMenu","PlaylistPanel","PlaylistImport","SearchResults","PlaylistHeader","PlaylistPanelEmpty","PlaylistManager","className","selectedPlaylist","showSearchResults","showImportPanel","onCloseOverlay","panel","_id","propTypes","string","object","bool","isRequired","func"],"mappings":";AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,OAAOC,cAAP,MAA2B,UAA3B;AACA,OAAOC,kBAAP,MAA+B,eAA/B;;;;AAYM;AAAK,aAAU;AAAf,WACE,KAAC,cAAD,KADF,C;;;;AAKM,KAAC,aAAD,K;;;;AAYA,KAAC,kBAAD,K;;;;AAWJ,KAAC,YAAD;AAAc,aAAU;AAAxB,E;;AAtCR,IAAMC,kBAAkB,SAAlBA,eAAkB,OAMlB;AAAA,MALJC,SAKI,QALJA,SAKI;AAAA,MAJJC,gBAII,QAJJA,gBAII;AAAA,MAHJC,iBAGI,QAHJA,iBAGI;AAAA,MAFJC,eAEI,QAFJA,eAEI;AAAA,MADJC,cACI,QADJA,cACI;AACJ,MAAIC,KAAJ;;AACA,MAAIF,eAAJ,EAAqB;AACnBE;AAKD,GAND,MAMO,IAAIH,iBAAJ,EAAuB;AAC5BG;AACD,GAFM,MAEA,IAAIJ,gBAAJ,EAAsB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI,YAAQ,KAAC,aAAD,MAAoBJ,iBAAiBK,GAArC,CAAR;AACD,GAVM,MAUA;AACLD;AACD;;AAED,SACE;AAAK,eAAWhB,GAAG,iBAAH,EAAsBW,SAAtB;AAAhB,aACE,KAAC,cAAD;AACE,eAAU,2CADZ;AAEE,oBAAgBI;AAFlB,IADF,EAME,KAAC,cAAD,qBAEE;AAAK,eAAU;AAAf,aACGC,KADH,CAFF,CANF,CADF;AAeD,CA7CD;;AA+CAN,gBAAgBQ,SAAhB,2CAA4B;AAC1BP,aAAWT,UAAUiB,MADK;AAE1BP,oBAAkBV,UAAUkB,MAFF;AAG1BP,qBAAmBX,UAAUmB,IAAV,CAAeC,UAHR;AAI1BR,mBAAiBZ,UAAUmB,IAAV,CAAeC,UAJN;AAK1BP,kBAAgBb,UAAUqB;AALA,CAA5B;AAQA,eAAeb,eAAf","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport OverlayContent from '../Overlay/Content';\nimport PlaylistMenu from '../../containers/PlaylistManagerMenu';\nimport PlaylistPanel from '../../containers/PlaylistManagerPanel';\nimport PlaylistImport from '../../containers/PlaylistImportManager';\nimport SearchResults from '../../containers/SearchResultsPanel';\nimport PlaylistHeader from './Header';\nimport PlaylistPanelEmpty from './Panel/Empty';\n\nconst PlaylistManager = ({\n  className,\n  selectedPlaylist,\n  showSearchResults,\n  showImportPanel,\n  onCloseOverlay,\n}) => {\n  let panel;\n  if (showImportPanel) {\n    panel = (\n      <div className=\"PlaylistPanel\">\n        <PlaylistImport />\n      </div>\n    );\n  } else if (showSearchResults) {\n    panel = <SearchResults />;\n  } else if (selectedPlaylist) {\n    // HACK Give this a key so it's remounted when you switch playlists.\n    // This is because there is some statefulness down the tree, especially\n    // in playlist filters and scroll position.\n    // By forcing a remount using a key we throw away all state and keep it\n    // consistent.\n    // TODO To *actually* fix playlist filters bleeding across playlist lines,\n    // we should reset the playlist filter state alone somehow when the\n    // selected playlist changes.\n    panel = <PlaylistPanel key={selectedPlaylist._id} />;\n  } else {\n    panel = <PlaylistPanelEmpty />;\n  }\n\n  return (\n    <div className={cx('PlaylistManager', className)}>\n      <PlaylistHeader\n        className=\"PlaylistManager-header AppRow AppRow--top\"\n        onCloseOverlay={onCloseOverlay}\n      />\n\n      <OverlayContent>\n        <PlaylistMenu className=\"PlaylistManager-menu\" />\n        <div className=\"PlaylistManager-panel\">\n          {panel}\n        </div>\n      </OverlayContent>\n    </div>\n  );\n};\n\nPlaylistManager.propTypes = {\n  className: PropTypes.string,\n  selectedPlaylist: PropTypes.object,\n  showSearchResults: PropTypes.bool.isRequired,\n  showImportPanel: PropTypes.bool.isRequired,\n  onCloseOverlay: PropTypes.func,\n};\n\nexport default PlaylistManager;\n"],"file":"index.js"}