{"version":3,"sources":["components/PlaylistManager/Import/index.js"],"names":["React","PropTypes","injectMediaSources","PlaylistImport","getMediaSource","getAllMediaSources","selectedSourceType","sourceStates","onShowImportPanel","onHideImportPanel","Panel","ImportPanel","state","forms","sources","Object","keys","forEach","sourceType","ImportForm","push","propTypes","string","object","func","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB,OAOjB;AAAA,MANJC,cAMI,QANJA,cAMI;AAAA,MALJC,kBAKI,QALJA,kBAKI;AAAA,MAJJC,kBAII,QAJJA,kBAII;AAAA,MAHJC,YAGI,QAHJA,YAGI;AAAA,MAFJC,kBAEI,QAFJA,iBAEI;AAAA,MADJC,iBACI,QADJA,iBACI;;AACJ,MAAIH,kBAAJ,EAAwB;AACtB,QAAMI,QAAQN,eAAeE,kBAAf,EAAmCK,WAAjD;AACA,QAAMC,QAAQL,aAAaD,kBAAb,CAAd;AACA,WACE,oBAAC,KAAD;AACE,oBAAcG;AADhB,OAEMG,KAFN,EADF;AAMD;;AAED,MAAMC,QAAQ,EAAd;AACA,MAAMC,UAAUT,oBAAhB;AACAU,SAAOC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,UAACC,UAAD,EAAgB;AAC3C,QAAMC,aAAaL,QAAQI,UAAR,EAAoBC,UAAvC;AACA,QAAIA,UAAJ,EAAgB;AACdN,YAAMO,IAAN,MACG,UADH;AAAA,2BAGuB;AAAA,iBAAMZ,mBAAkBU,UAAlB,CAAN;AAAA,SAHvB;AAAA,2BAIuBT;AAJvB,SAESS,UAFT;AAOD;AACF,GAXD;;AAaA;AAAA,eACiB;AADjB,aAEKL,KAFL;AAKD,CAvCD;;AAyCAV,eAAekB,SAAf,2CAA2B;AACzBf,sBAAoBL,UAAUqB,MADL;AAEzBf,gBAAcN,UAAUsB,MAFC;;AAIzBnB,kBAAgBH,UAAUuB,IAAV,CAAeC,UAJN;AAKzBpB,sBAAoBJ,UAAUuB,IAAV,CAAeC,UALV;AAMzBjB,qBAAmBP,UAAUuB,IAAV,CAAeC,UANT;AAOzBhB,qBAAmBR,UAAUuB,IAAV,CAAeC;AAPT,CAA3B;;AAUA,eAAevB,qBAAqBC,cAArB,CAAf","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport injectMediaSources from '../../../utils/injectMediaSources';\n\nconst PlaylistImport = ({\n  getMediaSource,\n  getAllMediaSources,\n  selectedSourceType,\n  sourceStates,\n  onShowImportPanel,\n  onHideImportPanel\n}) => {\n  if (selectedSourceType) {\n    const Panel = getMediaSource(selectedSourceType).ImportPanel;\n    const state = sourceStates[selectedSourceType];\n    return (\n      <Panel\n        onClosePanel={onHideImportPanel}\n        {...state}\n      />\n    );\n  }\n\n  const forms = [];\n  const sources = getAllMediaSources();\n  Object.keys(sources).forEach((sourceType) => {\n    const ImportForm = sources[sourceType].ImportForm;\n    if (ImportForm) {\n      forms.push(\n        <ImportForm\n          key={sourceType}\n          onShowImportPanel={() => onShowImportPanel(sourceType)}\n          onHideImportPanel={onHideImportPanel}\n        />\n      );\n    }\n  });\n\n  return (\n    <div className=\"PlaylistImport\">\n      {forms}\n    </div>\n  );\n};\n\nPlaylistImport.propTypes = {\n  selectedSourceType: PropTypes.string,\n  sourceStates: PropTypes.object,\n\n  getMediaSource: PropTypes.func.isRequired,\n  getAllMediaSources: PropTypes.func.isRequired,\n  onShowImportPanel: PropTypes.func.isRequired,\n  onHideImportPanel: PropTypes.func.isRequired\n};\n\nexport default injectMediaSources()(PlaylistImport);\n"]}