{"version":3,"sources":["components/PlaylistManager/Panel/SearchResults.js"],"names":["cx","React","PropTypes","translate","IDLE","LOADING","LOADED","Loader","MediaList","AddToPlaylistAction","SearchResults","t","className","query","results","loadingState","onOpenAddMediaMenu","onOpenPreviewMediaDialog","list","media","selection","position","propTypes","func","isRequired","string","arrayOf","object","oneOf"],"mappings":";AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,MAAxB,QAAsC,kCAAtC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;AAEA,OAAOC,mBAAP,MAAgC,uCAAhC;;;aA4BqB;gBACZ,M;QAAY;;;AA3BrB,IAAMC,gBAAgB,SAAhBA,aAAgB,OAQhB;AAAA,MAPJC,CAOI,QAPJA,CAOI;AAAA,MANJC,SAMI,QANJA,SAMI;AAAA,MALJC,KAKI,QALJA,KAKI;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,YAGI,QAHJA,YAGI;AAAA,MAFJC,kBAEI,QAFJA,kBAEI;AAAA,MADJC,wBACI,QADJA,wBACI;;AACJ,MAAIC,aAAJ;AACA,MAAIH,iBAAiBT,MAArB,EAA6B;AAC3BY,gBACG,SADH;AAAA,iBAEc,qBAFd;AAAA,aAGWJ,OAHX;AAAA,gCAI8BG,wBAJ9B;AAAA,mBAKiB,qBAACE,KAAD,EAAQC,SAAR;AAAA,eAAsB,MAChC,mBADgC;AAAA,iBAGxB;AAAA,mBAAYJ,mBAAmBK,QAAnB,EAA6BF,KAA7B,EAAoCC,SAApC,CAAZ;AAAA;AAHwB,WAE3B,KAF2B,EAAtB;AAAA;AALjB;AAaD,GAdD,MAcO;AACLF;AAKD;;AAED;AAAA,eACkBlB,GAAG,eAAH,EAAoB,eAApB,EAAqCY,SAArC;AADlB;AAAA,eAEmB;AAFnB,aAGOD,EAAE,0BAAF,EAA8B,EAAEE,YAAF,EAA9B,CAHP,GAKKK,IALL;AAQD,CAxCD;;AA0CAR,cAAcY,SAAd,2CAA0B;AACxBX,KAAGT,UAAUqB,IAAV,CAAeC,UADM;AAExBZ,aAAWV,UAAUuB,MAFG;AAGxBZ,SAAOX,UAAUuB,MAAV,CAAiBD,UAHA;AAIxBV,WAASZ,UAAUwB,OAAV,CAAkBxB,UAAUyB,MAA5B,CAJe;AAKxBZ,gBAAcb,UAAU0B,KAAV,CAAgB,CAAExB,IAAF,EAAQC,OAAR,EAAiBC,MAAjB,CAAhB,EAA2CkB,UALjC;AAMxBR,sBAAoBd,UAAUqB,IAAV,CAAeC,UANX;AAOxBP,4BAA0Bf,UAAUqB,IAAV,CAAeC;AAPjB,CAA1B;;AAUA,eAAerB,YAAYO,aAAZ,CAAf","file":"SearchResults.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { IDLE, LOADING, LOADED } from '../../../constants/LoadingStates';\nimport Loader from '../../Loader';\nimport MediaList from '../../MediaList';\n\nimport AddToPlaylistAction from '../../MediaList/Actions/AddToPlaylist';\n\nconst SearchResults = ({\n  t,\n  className,\n  query,\n  results,\n  loadingState,\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog\n}) => {\n  let list;\n  if (loadingState === LOADED) {\n    list = (\n      <MediaList\n        className=\"PlaylistPanel-media\"\n        media={results}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        makeActions={(media, selection) => [\n          <AddToPlaylistAction\n            key=\"add\"\n            onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n          />\n        ]}\n      />\n    );\n  } else {\n    list = (\n      <div className=\"PlaylistPanel-loading\">\n        <Loader size=\"large\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className={cx('PlaylistPanel', 'SearchResults', className)}>\n      <div className=\"SearchResults-query\">\n        {t('playlists.search.results', { query })}\n      </div>\n      {list}\n    </div>\n  );\n};\n\nSearchResults.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  query: PropTypes.string.isRequired,\n  results: PropTypes.arrayOf(PropTypes.object),\n  loadingState: PropTypes.oneOf([ IDLE, LOADING, LOADED ]).isRequired,\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired\n};\n\nexport default translate()(SearchResults);\n"]}