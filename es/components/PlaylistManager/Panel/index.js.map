{"version":3,"sources":["components/PlaylistManager/Panel/index.js"],"names":["cx","React","PropTypes","CircularProgress","MediaList","PlaylistMeta","PlainItemRow","PlaylistItemRow","AddToPlaylistAction","RemoveFromPlaylistAction","EditMediaAction","MoveToFirstAction","MoveToLastAction","makeActions","onOpenAddMediaMenu","onMoveToFirst","onMoveToLast","onEditMedia","onRemoveFromPlaylist","isFiltered","media","selection","index","position","PlaylistPanel","props","className","playlist","loading","onShufflePlaylist","onActivatePlaylist","onRenamePlaylist","onDeletePlaylist","onNotDeletable","onLoadPlaylistPage","onFilterPlaylistItems","onMoveMedia","onOpenPreviewMediaDialog","list","length","_id","name","active","propTypes","string","object","isRequired","array","bool","func"],"mappings":";AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,YAAP,MAAyB,QAAzB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,wBAAP,MAAqC,4CAArC;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;;AAEA,IAAMC,cAAc,SAAdA,WAAc;AAAA,MAClBC,kBADkB,QAClBA,kBADkB;AAAA,MAElBC,aAFkB,QAElBA,aAFkB;AAAA,MAGlBC,YAHkB,QAGlBA,YAHkB;AAAA,MAIlBC,WAJkB,QAIlBA,WAJkB;AAAA,MAKlBC,oBALkB,QAKlBA,oBALkB;AAAA,MAMlBC,UANkB,QAMlBA,UANkB;AAAA,SAQlB,UAACC,KAAD,EAAQC,SAAR,EAAmBC,KAAnB;AAAA,WAA6B,CAC3B,KAAC,mBAAD;AAEE,aAAO;AAAA,eAAYR,mBAAmBS,QAAnB,EAA6BH,KAA7B,EAAoCC,SAApC,CAAZ;AAAA;AAFT,OACM,KADN,CAD2B,EAK3B;AACA;AACA;AACA,KAACC,QAAQ,CAAR,IAAaH,UAAd,KACE,KAAC,iBAAD;AAEE,eAAS;AAAA,eAAMJ,cAAcK,KAAd,EAAqBC,SAArB,CAAN;AAAA;AAFX,OACM,OADN,CATyB,EAc1BC,UAAU,CAAV,IAAe,CAACH,UAAjB,IACE,KAAC,gBAAD;AAEE,cAAQ;AAAA,eAAMH,aAAaI,KAAb,EAAoBC,SAApB,CAAN;AAAA;AAFV,OACM,MADN,CAfyB,EAoB3B,KAAC,eAAD;AAEE,cAAQ;AAAA,eAAMJ,YAAYG,KAAZ,CAAN;AAAA;AAFV,OACM,MADN,CApB2B,EAwB3B,KAAC,wBAAD;AAEE,gBAAU;AAAA,eAAMF,qBAAqBE,KAArB,EAA4BC,SAA5B,CAAN;AAAA;AAFZ,OACM,QADN,CAxB2B,CAA7B;AAAA,GARkB;AAAA,CAApB;;;;AA2DM;AAAK,aAAU;AAAf,WACE,KAAC,gBAAD;AAAkB,QAAK;AAAvB,EADF,C;;AArBN,IAAMG,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,MAE7BC,SAF6B,GAgB3BD,KAhB2B,CAE7BC,SAF6B;AAAA,MAG7BC,QAH6B,GAgB3BF,KAhB2B,CAG7BE,QAH6B;AAAA,MAI7BP,KAJ6B,GAgB3BK,KAhB2B,CAI7BL,KAJ6B;AAAA,MAK7BQ,OAL6B,GAgB3BH,KAhB2B,CAK7BG,OAL6B;AAAA,MAM7BT,UAN6B,GAgB3BM,KAhB2B,CAM7BN,UAN6B;AAAA,MAO7BU,iBAP6B,GAgB3BJ,KAhB2B,CAO7BI,iBAP6B;AAAA,MAQ7BC,kBAR6B,GAgB3BL,KAhB2B,CAQ7BK,kBAR6B;AAAA,MAS7BC,gBAT6B,GAgB3BN,KAhB2B,CAS7BM,gBAT6B;AAAA,MAU7BC,gBAV6B,GAgB3BP,KAhB2B,CAU7BO,gBAV6B;AAAA,MAW7BC,cAX6B,GAgB3BR,KAhB2B,CAW7BQ,cAX6B;AAAA,MAY7BC,kBAZ6B,GAgB3BT,KAhB2B,CAY7BS,kBAZ6B;AAAA,MAa7BC,qBAb6B,GAgB3BV,KAhB2B,CAa7BU,qBAb6B;AAAA,MAc7BC,WAd6B,GAgB3BX,KAhB2B,CAc7BW,WAd6B;AAAA,MAe7BC,wBAf6B,GAgB3BZ,KAhB2B,CAe7BY,wBAf6B;AAkB/B,MAAIC,IAAJ;;AACA,MAAIV,OAAJ,EAAa;AACXU;AAKD,GAND,MAMO;AACLA,WACE,KAAC,SAAD;AACE,iBAAU,qBADZ;AAEE,YAAMlB,MAAMmB,MAFd;AAGE,aAAOnB,KAHT;AAIE,oBAAcD,aAAab,YAAb,GAA4BC,eAJ5C;AAKE,gBAAU;AAAE6B;AAAF,OALZ;AAME,gCAA0BC,wBAN5B;AAOE,mBAAaxB,YAAYY,KAAZ,CAPf;AAQE,qBAAeS;AARjB,MADF;AAYD;;AAED,SACE;AAAK,eAAWlC,GAAG,eAAH,EAAoB0B,SAApB;AAAhB,aACE,KAAC,YAAD;AACE,eAAU,oBADZ;AAEE,QAAIC,SAASa,GAFf;AAGE,UAAMb,SAASc,IAHjB;AAIE,YAAQd,SAASe,MAJnB;AAKE,uBAAmBb,iBALrB;AAME,wBAAoBC,kBANtB;AAOE,sBAAkBC,gBAPpB;AAQE,sBAAkBC,gBARpB;AASE,oBAAgBC,cATlB;AAUE,cAAUE;AAVZ,IADF,EAaGG,IAbH,CADF;AAiBD,CAzDD;;AA2DAd,cAAcmB,SAAd,2CAA0B;AACxBjB,aAAWxB,UAAU0C,MADG;AAExBjB,YAAUzB,UAAU2C,MAAV,CAAiBC,UAFH;AAGxB1B,SAAOlB,UAAU6C,KAAV,CAAgBD,UAHC;AAIxBlB,WAAS1B,UAAU8C,IAAV,CAAeF,UAJA;AAKxB3B,cAAYjB,UAAU8C,IAAV,CAAeF,UALH;AAMxBjB,qBAAmB3B,UAAU+C,IAAV,CAAeH,UANV;AAOxBhB,sBAAoB5B,UAAU+C,IAAV,CAAeH,UAPX;AAQxBf,oBAAkB7B,UAAU+C,IAAV,CAAeH,UART;AASxBd,oBAAkB9B,UAAU+C,IAAV,CAAeH,UATT;AAUxBZ,sBAAoBhC,UAAU+C,IAAV,CAAeH,UAVX;AAWxBX,yBAAuBjC,UAAU+C,IAAV,CAAeH,UAXd;AAYxBb,kBAAgB/B,UAAU+C,IAAV,CAAeH,UAZP;AAaxBV,eAAalC,UAAU+C,IAAV,CAAeH,UAbJ;AAcxBT,4BAA0BnC,UAAU+C,IAAV,CAAeH;AAdjB,CAA1B;AAiBA,eAAetB,aAAf","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MediaList from '../../MediaList';\nimport PlaylistMeta from './Meta';\nimport PlainItemRow from '../../MediaList/Row';\nimport PlaylistItemRow from './PlaylistItemRow';\nimport AddToPlaylistAction from '../../MediaList/Actions/AddToPlaylist';\nimport RemoveFromPlaylistAction from '../../MediaList/Actions/RemoveFromPlaylist';\nimport EditMediaAction from '../../MediaList/Actions/EditMedia';\nimport MoveToFirstAction from '../../MediaList/Actions/MoveToFirst';\nimport MoveToLastAction from '../../MediaList/Actions/MoveToLast';\n\nconst makeActions = ({\n  onOpenAddMediaMenu,\n  onMoveToFirst,\n  onMoveToLast,\n  onEditMedia,\n  onRemoveFromPlaylist,\n  isFiltered,\n}) =>\n  (media, selection, index) => [\n    <AddToPlaylistAction\n      key=\"add\"\n      onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n    />,\n    // Don't show the \"move to first\" action on the first item in the playlist.\n    // If the playlist is filtered we don't know if the first item to show is\n    // also the first in the playlist, so just show it always in that case.\n    (index > 0 || isFiltered) && (\n      <MoveToFirstAction\n        key=\"first\"\n        onFirst={() => onMoveToFirst(media, selection)}\n      />\n    ),\n    (index === 0 && !isFiltered) && (\n      <MoveToLastAction\n        key=\"last\"\n        onLast={() => onMoveToLast(media, selection)}\n      />\n    ),\n    <EditMediaAction\n      key=\"edit\"\n      onEdit={() => onEditMedia(media)}\n    />,\n    <RemoveFromPlaylistAction\n      key=\"remove\"\n      onRemove={() => onRemoveFromPlaylist(media, selection)}\n    />,\n  ];\n\nconst PlaylistPanel = (props) => {\n  const {\n    className,\n    playlist,\n    media,\n    loading,\n    isFiltered,\n    onShufflePlaylist,\n    onActivatePlaylist,\n    onRenamePlaylist,\n    onDeletePlaylist,\n    onNotDeletable,\n    onLoadPlaylistPage,\n    onFilterPlaylistItems,\n    onMoveMedia,\n    onOpenPreviewMediaDialog,\n  } = props;\n\n  let list;\n  if (loading) {\n    list = (\n      <div className=\"PlaylistPanel-loading\">\n        <CircularProgress size=\"100%\" />\n      </div>\n    );\n  } else {\n    list = (\n      <MediaList\n        className=\"PlaylistPanel-media\"\n        size={media.length}\n        media={media}\n        rowComponent={isFiltered ? PlainItemRow : PlaylistItemRow}\n        rowProps={{ onMoveMedia }}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        makeActions={makeActions(props)}\n        onRequestPage={onLoadPlaylistPage}\n      />\n    );\n  }\n\n  return (\n    <div className={cx('PlaylistPanel', className)}>\n      <PlaylistMeta\n        className=\"PlaylistPanel-meta\"\n        id={playlist._id}\n        name={playlist.name}\n        active={playlist.active}\n        onShufflePlaylist={onShufflePlaylist}\n        onActivatePlaylist={onActivatePlaylist}\n        onRenamePlaylist={onRenamePlaylist}\n        onDeletePlaylist={onDeletePlaylist}\n        onNotDeletable={onNotDeletable}\n        onFilter={onFilterPlaylistItems}\n      />\n      {list}\n    </div>\n  );\n};\n\nPlaylistPanel.propTypes = {\n  className: PropTypes.string,\n  playlist: PropTypes.object.isRequired,\n  media: PropTypes.array.isRequired,\n  loading: PropTypes.bool.isRequired,\n  isFiltered: PropTypes.bool.isRequired,\n  onShufflePlaylist: PropTypes.func.isRequired,\n  onActivatePlaylist: PropTypes.func.isRequired,\n  onRenamePlaylist: PropTypes.func.isRequired,\n  onDeletePlaylist: PropTypes.func.isRequired,\n  onLoadPlaylistPage: PropTypes.func.isRequired,\n  onFilterPlaylistItems: PropTypes.func.isRequired,\n  onNotDeletable: PropTypes.func.isRequired,\n  onMoveMedia: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default PlaylistPanel;\n"],"file":"index.js"}