{"version":3,"sources":["components/RoomUserList/index.js"],"names":["cx","React","PropTypes","List","RoomUserRow","GuestsRow","RoomUserList","className","users","guests","showGuests","length","index","key","rowClass","propTypes","string","arrayOf","object","isRequired","number"],"mappings":";AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,WAAP,MAAwB,OAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,IAAMC,eAAe,SAAfA,YAAe,OAAkC;AAAA,MAA/BC,SAA+B,QAA/BA,SAA+B;AAAA,MAApBC,KAAoB,QAApBA,KAAoB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AACrD,MAAMC,aAAaD,SAAS,CAA5B;AACA;AACA;AACA;AACA;AACA,MAAME,SAASH,MAAMG,MAAN,IAAgBD,aAAa,CAAb,GAAiB,CAAjC,CAAf;AACA;AAAA,eACkBV,GAAG,UAAH,EAAe,kBAAf,EAAmCO,SAAnC;AADlB,kBAEK,IAFL;AAAA,kBAGoB,sBAACK,KAAD,EAAQC,GAAR,EAAgB;AAC5B,UAAMC,WAAWd,GACf,cADe,EAEdY,QAAQ,CAAR,KAAc,CAAf,IAAqB,yBAFN,CAAjB;AAIA;AACA,UAAIA,UAAUJ,MAAMG,MAApB,EAA4B;AAC1B,oBACG,SADH;AAAA,qBAGeG,QAHf;AAAA,kBAIYL;AAJZ,WAESI,GAFT;AAOD;AACD,kBACG,WADH;AAAA,mBAGeC,QAHf;AAAA,cAIUN,MAAMI,KAAN;AAJV,SAESC,GAFT;AAOD,KAzBP;AAAA,YA0BcF,MA1Bd;AAAA,UA2BW;AA3BX;AA+BD,CAtCD;;AAwCAL,aAAaS,SAAb,2CAAyB;AACvBR,aAAWL,UAAUc,MADE;AAEvBR,SAAON,UAAUe,OAAV,CAAkBf,UAAUgB,MAA5B,EAAoCC,UAFpB;AAGvBV,UAAQP,UAAUkB,MAAV,CAAiBD;AAHF,CAAzB;;AAMA,eAAeb,YAAf","file":"index.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport List from 'react-list';\nimport RoomUserRow from './Row';\nimport GuestsRow from './GuestsRow';\n\nconst RoomUserList = ({ className, users, guests }) => {\n  const showGuests = guests > 0;\n  // The \"and X guests\" row is implemented somewhat hackily as an extra user\n  // row. To render properly at the end of the list, it needs to be rendered as\n  // an element of the list--so we tell react-list that we have an extra row\n  // when th guests row is shown.\n  const length = users.length + (showGuests ? 1 : 0);\n  return (\n    <div className={cx('UserList', 'UserList--online', className)}>\n      <List\n        itemRenderer={(index, key) => {\n          const rowClass = cx(\n            'UserList-row',\n            (index % 2 === 0) && 'UserList-row--alternate',\n          );\n          // The very last row is the guests row\n          if (index === users.length) {\n            return (\n              <GuestsRow\n                key={key}\n                className={rowClass}\n                guests={guests}\n              />\n            );\n          }\n          return (\n            <RoomUserRow\n              key={key}\n              className={rowClass}\n              user={users[index]}\n            />\n          );\n        }}\n        length={length}\n        type=\"uniform\"\n      />\n    </div>\n  );\n};\n\nRoomUserList.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.arrayOf(PropTypes.object).isRequired,\n  guests: PropTypes.number.isRequired,\n};\n\nexport default RoomUserList;\n"]}