{"version":3,"sources":["components/Video/index.js"],"names":["cx","isEqual","React","PropTypes","screenfull","injectMediaSources","VideoBackdrop","VideoProgressBar","VideoToolbar","MouseMoveCapture","defaultSourceTools","enhance","Video","state","shouldShowToolbar","handleFullscreenEnter","enabled","request","element","props","onFullscreenEnter","handleFullscreenChange","isFullscreen","onFullscreenExit","handleMouseMove","timer","clearTimeout","setState","setTimeout","handleMouseMoveEnd","refElement","componentDidMount","on","componentWillReceiveProps","nextProps","exit","shouldComponentUpdate","render","getAllMediaSources","size","volume","isMuted","media","seek","mode","sources","players","Object","keys","map","sourceType","Player","filter","Boolean","currentSource","MediaSourceTools","VideoTools","thumbnail","Component","propTypes","func","isRequired","bool","string","number","object"],"mappings":"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","file":"index.js","sourcesContent":["import cx from 'classnames';\nimport isEqual from 'is-equal-shallow';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport screenfull from 'screenfull';\nimport injectMediaSources from '../../utils/injectMediaSources';\nimport VideoBackdrop from './VideoBackdrop';\nimport VideoProgressBar from './VideoProgressBar';\nimport VideoToolbar from './VideoToolbar';\nimport MouseMoveCapture from './VideoMouseMoveCapture';\n\nconst defaultSourceTools = () => null;\n\nconst enhance = injectMediaSources();\n\nclass Video extends React.Component {\n  static propTypes = {\n    getAllMediaSources: PropTypes.func.isRequired,\n    isFullscreen: PropTypes.bool,\n    enabled: PropTypes.bool,\n    size: PropTypes.string,\n    volume: PropTypes.number,\n    isMuted: PropTypes.bool,\n    media: PropTypes.object,\n    seek: PropTypes.number,\n    onFullscreenEnter: PropTypes.func.isRequired,\n    onFullscreenExit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    shouldShowToolbar: false,\n  };\n\n  componentDidMount() {\n    if (screenfull.enabled) {\n      screenfull.on('change', this.handleFullscreenChange);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.isFullscreen && !nextProps.isFullscreen && screenfull.enabled) {\n      // Checking for `enabled` here, because our props have probably changed\n      // _after_ exiting fullscreen mode (see `this.handleFullscreenChange`).\n      // This way we don't double-exit.\n      if (screenfull.isFullscreen) {\n        screenfull.exit();\n      }\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return !isEqual(nextProps, this.props);\n  }\n\n  handleFullscreenEnter = () => {\n    if (screenfull.enabled) {\n      screenfull.request(this.element);\n    }\n    this.props.onFullscreenEnter();\n  };\n\n  handleFullscreenChange = () => {\n    if (!screenfull.isFullscreen) {\n      this.props.onFullscreenExit();\n    }\n  };\n\n  handleMouseMove = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    } else {\n      this.setState({ shouldShowToolbar: true });\n    }\n    this.timer = setTimeout(this.handleMouseMoveEnd, 5000);\n  };\n\n  handleMouseMoveEnd = () => {\n    clearTimeout(this.timer);\n    this.timer = null;\n    this.setState({ shouldShowToolbar: false });\n  };\n\n  refElement = (element) => {\n    this.element = element;\n  };\n\n  render() {\n    const {\n      getAllMediaSources,\n      isFullscreen,\n      enabled,\n      size,\n      volume,\n      isMuted,\n      media,\n      seek,\n      onFullscreenExit,\n    } = this.props;\n\n    if (!media) {\n      return <div className=\"Video\" />;\n    }\n\n    const {\n      shouldShowToolbar,\n    } = this.state;\n\n    const props = {\n      enabled,\n      media,\n      seek,\n      mode: size,\n      volume: isMuted ? 0 : volume,\n    };\n\n    const sources = getAllMediaSources();\n    const players = Object.keys(sources).map((sourceType) => {\n      if (sources[sourceType].Player) {\n        const { Player } = sources[sourceType];\n        return (\n          <Player\n            key={sourceType}\n            {...props}\n            active={media.sourceType === sourceType}\n          />\n        );\n      }\n      return null;\n    }).filter(Boolean);\n\n    const currentSource = sources[media.sourceType];\n    const MediaSourceTools = (currentSource && currentSource.VideoTools)\n      ? currentSource.VideoTools\n      : defaultSourceTools;\n\n    return (\n      <div\n        ref={this.refElement}\n        className={cx('Video', `Video--${media.sourceType}`, `Video--${size}`)}\n      >\n        <VideoBackdrop url={media.thumbnail} />\n        {players}\n\n        {isFullscreen && (\n          <MouseMoveCapture\n            active={shouldShowToolbar}\n            onMouseMove={this.handleMouseMove}\n          />\n        )}\n        {isFullscreen && (\n          <VideoProgressBar\n            media={media}\n            seek={seek}\n          />\n        )}\n        {(!isFullscreen || shouldShowToolbar) && (\n          <VideoToolbar\n            isFullscreen={isFullscreen}\n            onFullscreenEnter={this.handleFullscreenEnter}\n            onFullscreenExit={onFullscreenExit}\n          >\n            <MediaSourceTools media={media} />\n          </VideoToolbar>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default enhance(Video);\n"]}