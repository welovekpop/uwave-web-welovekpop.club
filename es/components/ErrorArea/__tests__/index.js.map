{"version":3,"sources":["components/ErrorArea/__tests__/index.js"],"names":["React","sinon","expect","shallow","ErrorArea","errorThemeSelector","describe","it","context","testUtils","dive","childAt","to","have","prop","notificationTheme","muiTheme","palette","notifications","contextTheme","snackbar","property","errorTextColor","errorBackgroundColor","spy","area","call","calledOnce","equal"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,SAAP,IAAoBC,kBAApB,QAA8C,KAA9C;;AAEAC,SAAS,eAAT,EAA0B,YAAM;AAC9BC,KAAG,sCAAH,EAA2C,YAAM;AAC/CL,WACEC,aACG,SADH;AAAA,aAEW,IAFX;AAAA,iBAGe,qBAAM,CAAE;AAHvB,QAKE,EAAEK,SAASC,UAAUD,OAArB,EALF,EAMEE,IANF,GAMSC,OANT,CAMiB,CANjB,CADF,EAQEC,EARF,CAQKC,IARL,CAQUC,IARV,CAQe,MARf,EAQuB,KARvB;AASD,GAVD;;AAYAP,KAAG,kCAAH,EAAuC,YAAM;AAC3CL,WACEC,aACG,SADH;AAAA,aAEU,qBAFV;AAAA,iBAGe,qBAAM,CAAE;AAHvB,QAKE,EAAEK,SAASC,UAAUD,OAArB,EALF,EAMEE,IANF,GAMSC,OANT,CAMiB,CANjB,CADF,EAQEC,EARF,CAQKC,IARL,CAQUC,IARV,CAQe,MARf,EAQuB,IARvB;AASD,GAVD;;AAYAP,KAAG,+CAAH,EAAoD,YAAM;AACxD,QAAMQ,oBAAoBN,UAAUO,QAAV,CAAmBC,OAAnB,CAA2BC,aAArD;;AAEA,QAAMC,eAAed,mBAAmBI,UAAUD,OAA7B,EAAsCQ,QAA3D;;AAEAd,WAAOiB,aAAaC,QAApB,EAA8BR,EAA9B,CAAiCC,IAAjC,CAAsCQ,QAAtC,CAA+C,WAA/C,EAA4DN,kBAAkBO,cAA9E;AACApB,WAAOiB,aAAaC,QAApB,EAA8BR,EAA9B,CAAiCC,IAAjC,CAAsCQ,QAAtC,CAA+C,iBAA/C,EAAkEN,kBAAkBQ,oBAApF;AACD,GAPD;;AASAhB,KAAG,8CAAH,EAAmD,YAAM;AACvD,QAAMiB,MAAMvB,MAAMuB,GAAN,EAAZ;;AAEA,QAAMC,OAAOtB,aACV,SADU;AAAA,aAEH,SAFG;AAAA,iBAGEqB;AAHF,QAKV,EAAEhB,SAASC,UAAUD,OAArB,EALU,EAKsBE,IALtB,EAAb;;AAOAe,SAAKd,OAAL,CAAa,CAAb,EAAgBG,IAAhB,CAAqB,gBAArB,EAAuCY,IAAvC;;AAEAxB,WAAOsB,IAAIG,UAAX,EAAuBf,EAAvB,CAA0BgB,KAA1B,CAAgC,IAAhC;AACD,GAbD;AAcD,CAhDD","file":"index.js","sourcesContent":["/* eslint-env mocha */\n/* global testUtils */\nimport React from 'react';\nimport sinon from 'sinon';\nimport { expect } from 'chai';\nimport { shallow } from 'enzyme';\nimport ErrorArea, { errorThemeSelector } from '../';\n\ndescribe('<ErrorArea />', () => {\n  it('should not show if there is no error', () => {\n    expect(\n      shallow(\n        <ErrorArea\n          error={null}\n          onDismiss={() => {}}\n        />,\n        { context: testUtils.context }\n      ).dive().childAt(0)\n    ).to.have.prop('open', false);\n  });\n\n  it('should open if there is an error', () => {\n    expect(\n      shallow(\n        <ErrorArea\n          error=\"Something is WRONG!\"\n          onDismiss={() => {}}\n        />,\n        { context: testUtils.context }\n      ).dive().childAt(0)\n    ).to.have.prop('open', true);\n  });\n\n  it('uses the error notification palette overrides', () => {\n    const notificationTheme = testUtils.muiTheme.palette.notifications;\n\n    const contextTheme = errorThemeSelector(testUtils.context).muiTheme;\n\n    expect(contextTheme.snackbar).to.have.property('textColor', notificationTheme.errorTextColor);\n    expect(contextTheme.snackbar).to.have.property('backgroundColor', notificationTheme.errorBackgroundColor);\n  });\n\n  it('closes when user clicks anywhere on the page', () => {\n    const spy = sinon.spy();\n\n    const area = shallow((\n      <ErrorArea\n        error=\"Message\"\n        onDismiss={spy}\n      />\n    ), { context: testUtils.context }).dive();\n\n    area.childAt(0).prop('onRequestClose').call();\n\n    expect(spy.calledOnce).to.equal(true);\n  });\n});\n"]}