{"version":3,"sources":["components/ErrorArea/index.js"],"names":["React","PropTypes","Snackbar","muiThemeable","createSelector","wrapperStyle","pointerEvents","snackbarStyle","height","lineHeight","padding","errorThemeSelector","props","muiTheme","notifyTheme","palette","notifications","snackbar","textColor","errorTextColor","backgroundColor","errorBackgroundColor","enhance","ErrorArea","getChildContext","render","error","handleDismiss","Component","childContextTypes","object","onDismiss","propTypes","string","func","isRequired"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,SAASC,cAAT,QAA+B,UAA/B;;AAEA,IAAMC,eAAe;AACnB;AACA;AACAC,iBAAe;AAHI,CAArB;AAKA,IAAMC,gBAAgB;AACpB;AACAC,UAAQ,MAFY;AAGpBC,cAAY,MAHQ;AAIpBC,WAAS,WAJW;AAKpB;AACAJ,iBAAe;AANK,CAAtB;;AASA;AACA;AACA,OAAO,IAAMK,qBAAqBP,eAChC;AAAA,SAASQ,MAAMC,QAAf;AAAA,CADgC,EAEhC,UAACA,QAAD,EAAc;AACZ,MAAMC,cAAcD,SAASE,OAAT,CAAiBC,aAArC;AACA,SAAO;AACLH,2BACKA,QADL;AAEEI,6BACKJ,SAASI,QADd;AAEEC,mBAAWJ,YAAYK,cAFzB;AAGEC,yBAAiBN,YAAYO;AAH/B;AAFF;AADK,GAAP;AAUD,CAd+B,CAA3B;;AAiBP,IAAMC,UAAUnB,cAAhB;;IAEMoB,S;;;;;;;;;;;;;;;sBAaJC,e,8BAAkB;AAChB,WAAOb,mBAAmB,KAAKC,KAAxB,CAAP;AACD,G;;sBAMDa,M,qBAAS;AAAA,QACCC,KADD,GACW,KAAKd,KADhB,CACCc,KADD;;;AAGP;AAAA,iBACiB;AADjB,oBAEK,QAFL;AAAA,aAGarB,YAHb;AAAA,iBAIiBE,aAJjB;AAAA,YAKY,CAAC,CAACmB,KALd;AAAA,eAMeA,SAAS,EANxB;AAAA,sBAOsB,KAAKC;AAP3B;AAWD,G;;;EAnCqB3B,MAAM4B,S;;AAAxBL,S,CASGM,iB,GAAoB;AACzBhB,YAAUZ,UAAU6B;AADK,C;;;;;OAQ3BH,a,GAAgB,YAAa;AAAA;;AAC3B,qBAAKf,KAAL,EAAWmB,SAAX;AACD,G;;;AAnBGR,S,CACGS,S,2CAAY;AACjBN,SAAOzB,UAAUgC,MADA;AAEjBF,aAAW9B,UAAUiC,IAAV,CAAeC,UAFT;AAGjB;AACA;AACAtB,YAAUZ,UAAU6B,MAAV,CAAiBK;AALV,C;;;AAqCrB,eAAeb,QAAQC,SAAR,CAAf","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Snackbar from 'material-ui/Snackbar';\nimport muiThemeable from 'material-ui/styles/muiThemeable';\nimport { createSelector } from 'reselect';\n\nconst wrapperStyle = {\n  // Prevent clicks from hitting the overlay. Ensures the chat input can be\n  // focused even if a snackbar is open.\n  pointerEvents: 'none'\n};\nconst snackbarStyle = {\n  // Allow multiline snackbars.\n  height: 'auto',\n  lineHeight: '24px',\n  padding: '12px 24px',\n  // Allow clicks on snackbars themselves.\n  pointerEvents: 'initial'\n};\n\n// Create a material-ui theme with the error notification theme applied.\n// Using a selector for memoization.\nexport const errorThemeSelector = createSelector(\n  props => props.muiTheme,\n  (muiTheme) => {\n    const notifyTheme = muiTheme.palette.notifications;\n    return {\n      muiTheme: {\n        ...muiTheme,\n        snackbar: {\n          ...muiTheme.snackbar,\n          textColor: notifyTheme.errorTextColor,\n          backgroundColor: notifyTheme.errorBackgroundColor\n        }\n      }\n    };\n  }\n);\n\nconst enhance = muiThemeable();\n\nclass ErrorArea extends React.Component {\n  static propTypes = {\n    error: PropTypes.string,\n    onDismiss: PropTypes.func.isRequired,\n    // Used in the theme selector above ðŸ‘†\n    // eslint-disable-next-line react/no-unused-prop-types\n    muiTheme: PropTypes.object.isRequired\n  };\n\n  static childContextTypes = {\n    muiTheme: PropTypes.object\n  };\n\n  getChildContext() {\n    return errorThemeSelector(this.props);\n  }\n\n  handleDismiss = (...args) => {\n    this.props.onDismiss(...args);\n  };\n\n  render() {\n    const { error } = this.props;\n\n    return (\n      <div className=\"ErrorArea\">\n        <Snackbar\n          style={wrapperStyle}\n          bodyStyle={snackbarStyle}\n          open={!!error}\n          message={error || ''}\n          onRequestClose={this.handleDismiss}\n        />\n      </div>\n    );\n  }\n}\n\nexport default enhance(ErrorArea);\n"]}