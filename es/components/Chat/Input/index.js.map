{"version":3,"sources":["components/Chat/Input/index.js"],"names":["cx","sortBy","uniqBy","React","PropTypes","translate","AutoComplete","Completion","SuggestionsList","EmojiSuggestion","GroupSuggestion","UserSuggestion","renderSuggestions","children","getUserCompletions","value","trigger","completions","compare","substr","length","toLowerCase","filter","user","username","getUserText","renderUser","props","renderGroup","getEmojiCompletions","results","emoji","shortcode","image","getEmojiText","renderEmoji","enhance","ChatInput","state","focused","handleFocus","setState","handleBlur","handleKeyDown","e","stopPropagation","key","target","trim","onSend","clear","handleUpdate","newValue","render","t","mentionableUsers","mentionableGroups","availableEmoji","focusClass","type","className","placeholder","onFocus","onBlur","onKeyDown","Component","propTypes","func","isRequired","array"],"mappings":"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","file":"index.js","sourcesContent":["import cx from 'classnames';\nimport sortBy from 'lodash/sortBy';\nimport uniqBy from 'lodash/uniqBy';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport AutoComplete, { Completion } from 'react-abstract-autocomplete';\nimport SuggestionsList from './SuggestionsList';\nimport EmojiSuggestion from './EmojiSuggestion';\nimport GroupSuggestion from './GroupSuggestion';\nimport UserSuggestion from './UserSuggestion';\n\nconst renderSuggestions = children => (\n  <SuggestionsList>{children}</SuggestionsList>\n);\n\n// User suggestions:\nconst getUserCompletions = (value, { trigger, completions }) => {\n  const compare = value.substr(trigger.length).toLowerCase();\n  return completions.filter(user => (\n    user.username.substr(0, compare.length).toLowerCase() === compare\n  ));\n};\nconst getUserText = (user, { trigger }) => `${trigger}${user.username} `;\nconst renderUser = props => <UserSuggestion {...props} />;\n\n// Group suggestions:\nconst renderGroup = props => <GroupSuggestion {...props} />;\n\n// Emoji suggestions:\nconst getEmojiCompletions = (value, { trigger, completions }) => {\n  const compare = value.substr(trigger.length).toLowerCase();\n  const results = completions.filter(emoji => (\n    emoji.shortcode.substr(0, compare.length).toLowerCase() === compare\n  ));\n  return sortBy(\n    uniqBy(results, emoji => emoji.image),\n    emoji => emoji.shortcode.length\n  );\n};\nconst getEmojiText = value => `:${value.shortcode}: `;\nconst renderEmoji = props => <EmojiSuggestion {...props} />;\n\nconst enhance = translate();\n\nclass ChatInput extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    onSend: PropTypes.func.isRequired,\n    mentionableUsers: PropTypes.array.isRequired,\n    mentionableGroups: PropTypes.array.isRequired,\n    availableEmoji: PropTypes.array.isRequired\n  };\n\n  state = {\n    focused: false,\n    value: ''\n  };\n\n  clear() {\n    this.setState({ value: '' });\n  }\n\n  handleFocus = () => {\n    this.setState({ focused: true });\n  };\n  handleBlur = () => {\n    this.setState({ focused: false });\n  };\n\n  handleKeyDown = (e) => {\n    e.stopPropagation();\n    if (e.key === 'Enter') {\n      const value = e.target.value.trim();\n      if (value.length > 0) {\n        this.props.onSend(value);\n      }\n      this.clear();\n    }\n  };\n\n  handleUpdate = (newValue) => {\n    this.setState({ value: newValue });\n  };\n\n  render() {\n    const {\n      focused,\n      value\n    } = this.state;\n    const {\n      t,\n      mentionableUsers,\n      mentionableGroups,\n      availableEmoji\n    } = this.props;\n    const focusClass = focused ? 'is-focused' : '';\n    return (\n      <div className={cx('ChatInput', focusClass)}>\n        <AutoComplete\n          inputProps={{\n            type: 'text',\n            className: cx('ChatInput-input', focusClass),\n            placeholder: focused ? '' : t('chat.placeholder'),\n            onFocus: this.handleFocus,\n            onBlur: this.handleBlur,\n            onKeyDown: this.handleKeyDown\n          }}\n          onUpdate={this.handleUpdate}\n          value={value}\n          renderSuggestions={renderSuggestions}\n          limit={6}\n        >\n          <Completion\n            trigger=\"@\"\n            minLength={2}\n            completions={mentionableUsers}\n            getCompletions={getUserCompletions}\n            getText={getUserText}\n            renderSuggestion={renderUser}\n          />\n          <Completion\n            trigger=\"@\"\n            minLength={2}\n            completions={mentionableGroups}\n            renderSuggestion={renderGroup}\n          />\n          <Completion\n            trigger=\":\"\n            completions={availableEmoji}\n            getCompletions={getEmojiCompletions}\n            getText={getEmojiText}\n            renderSuggestion={renderEmoji}\n          />\n        </AutoComplete>\n      </div>\n    );\n  }\n}\n\nexport default enhance(ChatInput);\n"]}