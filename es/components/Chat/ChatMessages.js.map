{"version":3,"sources":["components/Chat/ChatMessages.js"],"names":["React","PropTypes","Message","Motd","ScrollDownNotice","specialMessages","ChatMessages","state","isScrolledToBottom","onExternalScroll","direction","el","container","scrollTop","scrollHeight","handleResize","scrollToBottom","handleScroll","setState","handleScrollToBottom","event","preventDefault","refContainer","componentDidMount","bus","props","shouldScrollToBottom","on","window","addEventListener","componentWillReceiveProps","componentDidUpdate","componentWillUnmount","off","removeEventListener","lastMessage","lastElementChild","neededSize","offsetHeight","renderMotd","motd","compileOptions","renderMessage","msg","SpecialMessage","type","_id","canDeleteMessages","onDeleteMessage","render","messages","map","Component","propTypes","object","isRequired","array","bool","func","shape","availableEmoji","emojiImages"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;IAEqBC,Y;;;;;;;;;;;;wJAanBC,K,GAAQ;AACNC,0BAAoB;AADd,K,QAwCRC,gB,GAAmB,UAACC,SAAD,EAAe;AAChC,UAAMC,KAAK,MAAKC,SAAhB;AACA,UAAIF,cAAc,OAAlB,EAA2B;AACzBC,WAAGE,SAAH,GAAe,CAAf;AACD,OAFD,MAEO,IAAIH,cAAc,KAAlB,EAAyB;AAC9BC,WAAGE,SAAH,GAAeF,GAAGG,YAAlB;AACD,OAFM,MAEA;AACLH,WAAGE,SAAH,IAAgBH,YAAY,GAA5B;AACD;AACF,K,QAiBDK,Y,GAAe,YAAM;AACnB,UAAI,MAAKR,KAAL,CAAWC,kBAAf,EAAmC;AACjC,cAAKQ,cAAL;AACD;AACF,K,QAEDC,Y,GAAe,YAAM;AACnB,YAAKC,QAAL,CAAc;AACZV,4BAAoB,MAAKA,kBAAL;AADR,OAAd;AAGD,K,QAEDW,oB,GAAuB,UAACC,KAAD,EAAW;AAChCA,YAAMC,cAAN;AACA,YAAKL,cAAL;AACD,K,QAEDM,Y,GAAe,UAACV,SAAD,EAAe;AAC5B,YAAKA,SAAL,GAAiBA,SAAjB;AACD,K;;;yBAjFDW,iB,gCAAoB;AAAA,QACVC,GADU,GACF,KAAKC,KADH,CACVD,GADU;;;AAGlB,SAAKR,cAAL;AACA,SAAKU,oBAAL,GAA4B,KAA5B;;AAEAF,QAAIG,EAAJ,CAAO,aAAP,EAAsB,KAAKlB,gBAA3B;;AAEA;AACA,QAAI,OAAOmB,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,aAAOC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKd,YAAvC;AACD;AACF,G;;yBAEDe,yB,wCAA4B;AAC1B,SAAKJ,oBAAL,GAA4B,KAAKlB,kBAAL,EAA5B;AACD,G;;yBAEDuB,kB,iCAAqB;AACnB;AACA,QAAI,KAAKL,oBAAT,EAA+B;AAC7B,WAAKV,cAAL;AACA,WAAKU,oBAAL,GAA4B,KAA5B;AACD;AACF,G;;yBAEDM,oB,mCAAuB;AAAA,QACbR,GADa,GACL,KAAKC,KADA,CACbD,GADa;;;AAGrBA,QAAIS,GAAJ,CAAQ,aAAR,EAAuB,KAAKxB,gBAA5B;;AAEA,QAAI,OAAOmB,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,aAAOM,mBAAP,CAA2B,QAA3B,EAAqC,KAAKnB,YAA1C;AACD;AACF,G;;yBAaDC,c,6BAAiB;AACf,QAAML,KAAK,KAAKC,SAAhB;AACAD,OAAGE,SAAH,GAAeF,GAAGG,YAAlB;AACD,G;;yBAEDN,kB,iCAAqB;AACnB,QAAMG,KAAK,KAAKC,SAAhB;AACA,QAAMuB,cAAcxB,GAAGyB,gBAAvB;AACA,QAAID,WAAJ,EAAiB;AACf,UAAME,aAAa1B,GAAGE,SAAH,GAAeF,GAAG2B,YAAlB,GAAiCH,YAAYG,YAAhE;AACA,aAAOD,cAAc1B,GAAGG,YAAH,GAAkB,EAAvC;AACD;AACD,WAAO,IAAP;AACD,G;;yBAuBDyB,U,yBAAa;AACX,QAAI,CAAC,KAAKd,KAAL,CAAWe,IAAhB,EAAsB;AACpB,aAAO,IAAP;AACD;AACD,gBACG,IADH;AAAA,sBACwB,KAAKf,KAAL,CAAWgB;AADnC,eAEK,KAAKhB,KAAL,CAAWe,IAFhB;AAKD,G;;yBAEDE,a,0BAAcC,G,EAAK;AACjB,QAAMC,iBAAiBvC,gBAAgBsC,IAAIE,IAApB,CAAvB;AACA,QAAID,cAAJ,EAAoB;AAClB,aACE,oBAAC,cAAD;AACE,aAAKD,IAAIG;AADX,SAEMH,GAFN,EADF;AAMD;;AAED,WACE,oBAAC,OAAD;AACE,WAAKA,IAAIG,GADX;AAEE,sBAAgB,KAAKrB,KAAL,CAAWgB,cAF7B;AAGE,iBAAW,KAAKhB,KAAL,CAAWsB,iBAHxB;AAIE,gBAAU,KAAKtB,KAAL,CAAWuB;AAJvB,OAKML,GALN,EADF;AASD,G;;yBAEDM,M,qBAAS;AAAA,QACCzC,kBADD,GACwB,KAAKD,KAD7B,CACCC,kBADD;;;AAGP,WACE;AAAA;AAAA;AACE,aAAK,KAAKc,YADZ;AAEE,mBAAU,cAFZ;AAGE,kBAAU,KAAKL;AAHjB;AAAA,WAKG,gBALH;AAAA,cAMU,CAACT,kBANX;AAAA,iBAOa,KAAKW;AAPlB;AASG,WAAKoB,UAAL,EATH;AAUG,WAAKd,KAAL,CAAWyB,QAAX,CAAoBC,GAApB,CAAwB,KAAKT,aAA7B,EAA4C,IAA5C;AAVH,KADF;AAcD,G;;;EAtJuC1C,MAAMoD,S;;eAA3B9C,Y;AAAAA,Y,CACZ+C,S,2CAAY;AACjB7B,OAAKvB,UAAUqD,MAAV,CAAiBC,UADL;AAEjBL,YAAUjD,UAAUuD,KAFH;AAGjBhB,QAAMvC,UAAUuD,KAHC;AAIjBT,qBAAmB9C,UAAUwD,IAJZ;AAKjBT,mBAAiB/C,UAAUyD,IALV;AAMjBjB,kBAAgBxC,UAAU0D,KAAV,CAAgB;AAC9BC,oBAAgB3D,UAAUuD,KADI;AAE9BK,iBAAa5D,UAAUqD;AAFO,GAAhB;AANC,C","file":"ChatMessages.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Message from './Message';\nimport Motd from './Motd';\nimport ScrollDownNotice from './ScrollDownNotice';\nimport specialMessages from './specialMessages';\n\nexport default class ChatMessages extends React.Component {\n  static propTypes = {\n    bus: PropTypes.object.isRequired,\n    messages: PropTypes.array,\n    motd: PropTypes.array,\n    canDeleteMessages: PropTypes.bool,\n    onDeleteMessage: PropTypes.func,\n    compileOptions: PropTypes.shape({\n      availableEmoji: PropTypes.array,\n      emojiImages: PropTypes.object\n    })\n  };\n\n  state = {\n    isScrolledToBottom: true\n  };\n\n  componentDidMount() {\n    const { bus } = this.props;\n\n    this.scrollToBottom();\n    this.shouldScrollToBottom = false;\n\n    bus.on('chat:scroll', this.onExternalScroll);\n\n    // A window resize may affect the available space.\n    if (typeof window !== 'undefined') {\n      window.addEventListener('resize', this.handleResize);\n    }\n  }\n\n  componentWillReceiveProps() {\n    this.shouldScrollToBottom = this.isScrolledToBottom();\n  }\n\n  componentDidUpdate() {\n    // Keep the chat scrolled to the bottom after a new message is addded.\n    if (this.shouldScrollToBottom) {\n      this.scrollToBottom();\n      this.shouldScrollToBottom = false;\n    }\n  }\n\n  componentWillUnmount() {\n    const { bus } = this.props;\n\n    bus.off('chat:scroll', this.onExternalScroll);\n\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  }\n\n  onExternalScroll = (direction) => {\n    const el = this.container;\n    if (direction === 'start') {\n      el.scrollTop = 0;\n    } else if (direction === 'end') {\n      el.scrollTop = el.scrollHeight;\n    } else {\n      el.scrollTop += direction * 250;\n    }\n  };\n\n  scrollToBottom() {\n    const el = this.container;\n    el.scrollTop = el.scrollHeight;\n  }\n\n  isScrolledToBottom() {\n    const el = this.container;\n    const lastMessage = el.lastElementChild;\n    if (lastMessage) {\n      const neededSize = el.scrollTop + el.offsetHeight + lastMessage.offsetHeight;\n      return neededSize >= el.scrollHeight - 20;\n    }\n    return true;\n  }\n\n  handleResize = () => {\n    if (this.state.isScrolledToBottom) {\n      this.scrollToBottom();\n    }\n  };\n\n  handleScroll = () => {\n    this.setState({\n      isScrolledToBottom: this.isScrolledToBottom()\n    });\n  };\n\n  handleScrollToBottom = (event) => {\n    event.preventDefault();\n    this.scrollToBottom();\n  };\n\n  refContainer = (container) => {\n    this.container = container;\n  };\n\n  renderMotd() {\n    if (!this.props.motd) {\n      return null;\n    }\n    return (\n      <Motd compileOptions={this.props.compileOptions}>\n        {this.props.motd}\n      </Motd>\n    );\n  }\n\n  renderMessage(msg) {\n    const SpecialMessage = specialMessages[msg.type];\n    if (SpecialMessage) {\n      return (\n        <SpecialMessage\n          key={msg._id}\n          {...msg}\n        />\n      );\n    }\n\n    return (\n      <Message\n        key={msg._id}\n        compileOptions={this.props.compileOptions}\n        deletable={this.props.canDeleteMessages}\n        onDelete={this.props.onDeleteMessage}\n        {...msg}\n      />\n    );\n  }\n\n  render() {\n    const { isScrolledToBottom } = this.state;\n\n    return (\n      <div\n        ref={this.refContainer}\n        className=\"ChatMessages\"\n        onScroll={this.handleScroll}\n      >\n        <ScrollDownNotice\n          show={!isScrolledToBottom}\n          onClick={this.handleScrollToBottom}\n        />\n        {this.renderMotd()}\n        {this.props.messages.map(this.renderMessage, this)}\n      </div>\n    );\n  }\n}\n"]}