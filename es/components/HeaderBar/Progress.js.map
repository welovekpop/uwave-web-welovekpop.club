{"version":3,"sources":["components/HeaderBar/Progress.js"],"names":["cx","React","PropTypes","transformStyle","forceReflow","el","getBoundingClientRect","Progress","className","currentProgress","timeRemaining","animate","Object","assign","style","transitionDuration","propTypes","string","number","isRequired"],"mappings":";AAAA,OAAOA,EAAP,MAAe,YAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AAEA,SAASC,WAAT,CAAqBC,EAArB,EAAyB;AACvB;AACAA,KAAGC,qBAAH;AACD;;AAED,IAAMC,WAAW,SAAXA,QAAW,OAAmD;AAAA,MAAhDC,SAAgD,QAAhDA,SAAgD;AAAA,MAArCC,eAAqC,QAArCA,eAAqC;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;;AAClE,WAASC,OAAT,CAAiBN,EAAjB,EAAqB;AACnB,QAAI,CAACA,EAAL,EAAS;;AAET;AACAO,WAAOC,MAAP,CAAcR,GAAGS,KAAjB,EAAwB;AACtBC,0BAAoB;AADE,KAAxB,EAEGZ,2BAAyBM,eAAzB,OAFH;;AAIA;AACAL,gBAAYC,EAAZ;;AAEA;AACA;AACAO,WAAOC,MAAP,CAAcR,GAAGS,KAAjB,EAAwB;AACtBC,0BAAuBL,aAAvB;AADsB,KAAxB,EAEGP,eAAe,WAAf,CAFH;AAGD;;AAED;AAAA,eACkBH,GAAG,UAAH,EAAeQ,SAAf;AADlB,aAEI,6BAAK,WAAU,eAAf,EAA+B,KAAKG,OAApC,GAFJ;AAKD,CAxBD;;AA0BAJ,SAASS,SAAT,2CAAqB;AACnBR,aAAWN,UAAUe,MADF;AAEnBR,mBAAiBP,UAAUgB,MAAV,CAAiBC,UAFf;AAGnBT,iBAAeR,UAAUgB,MAAV,CAAiBC;AAHb,CAArB;;AAMA,eAAeZ,QAAf","file":"Progress.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport transformStyle from '../../utils/transformStyle';\n\nfunction forceReflow(el) {\n  // Hopefully the minifier won't optimise this away!\n  el.getBoundingClientRect();\n}\n\nconst Progress = ({ className, currentProgress, timeRemaining }) => {\n  function animate(el) {\n    if (!el) return;\n\n    // Set the width to the current progress without animating\n    Object.assign(el.style, {\n      transitionDuration: '0s',\n    }, transformStyle(`scaleX(${currentProgress})`));\n\n    // Force browser to rerender the bar immediately\n    forceReflow(el);\n\n    // Set up the actual animation. Progress bar goes to 100% full\n    // in $timeRemaining seconds.\n    Object.assign(el.style, {\n      transitionDuration: `${timeRemaining}s`,\n    }, transformStyle('scaleX(1)'));\n  }\n\n  return (\n    <div className={cx('Progress', className)}>\n      <div className=\"Progress-fill\" ref={animate} />\n    </div>\n  );\n};\n\nProgress.propTypes = {\n  className: PropTypes.string,\n  currentProgress: PropTypes.number.isRequired,\n  timeRemaining: PropTypes.number.isRequired,\n};\n\nexport default Progress;\n"]}