{"version":3,"sources":["components/App/Overlays.js"],"names":["React","PropTypes","find","CSSTransition","TransitionGroup","addTransitionEndListener","node","done","addEventListener","Overlays","children","active","view","Array","isArray","child","key","propTypes","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,eAAP,MAA4B,wCAA5B,C,CAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,wBAAT,CAAkCC,IAAlC,EAAwCC,IAAxC,EAA8C;AAC5CD,OAAKE,gBAAL,CAAsB,eAAtB,EAAuCD,IAAvC,EAA6C,KAA7C;AACD;;AAED,IAAME,WAAW,SAAXA,QAAW,OAA0B;AAAA,MAAvBC,QAAuB,QAAvBA,QAAuB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AACzC,MAAIC,IAAJ;;AACA,MAAIC,MAAMC,OAAN,CAAcJ,QAAd,CAAJ,EAA6B;AAC3BE,WAAOV,KAAKQ,QAAL,EAAe;AAAA,aAASK,MAAMC,GAAN,KAAcL,MAAvB;AAAA,KAAf,CAAP;AACD,GAFD,MAEO,IAAID,SAASM,GAAT,KAAiBL,MAArB,EAA6B;AAClCC,WAAOF,QAAP;AACD;;AACD,MAAIE,IAAJ,EAAU;AACR;AACA;AACAA,WACE,KAAC,aAAD;AAEE,wBAFF;AAGE,yBAHF;AAIE,kBAAW,SAJb;AAKE,sBAAgBP;AALlB,OACOO,KAAKI,GADZ,EAOGJ,IAPH,CADF;AAWD;;AACD,SACE,KAAC,eAAD;AAAiB,eAAU;AAA3B,aACGA,IADH,CADF;AAKD,CA3BD;;AA6BAH,SAASQ,SAAT,2CAAqB;AACnBP,YAAUT,UAAUK,IADD;AAEnBK,UAAQV,UAAUiB;AAFC,CAArB;AAKA,eAAeT,QAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport find from 'array-find';\nimport CSSTransition from 'react-transition-group/CSSTransition';\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\n\n// Use the css transitionend event to mark the finish of a transition.\n// Using this instead of a timeout prop so that we don't have to define\n// the timeout in multiple places, and it also fixes a small visual\n// glitch in Firefox where a scrollbar would appear for a split second\n// when the enter transition was almost complete.\nfunction addTransitionEndListener(node, done) {\n  node.addEventListener('transitionend', done, false);\n}\n\nconst Overlays = ({ children, active }) => {\n  let view;\n  if (Array.isArray(children)) {\n    view = find(children, child => child.key === active);\n  } else if (children.key === active) {\n    view = children;\n  }\n  if (view) {\n    // Pass on the `view.key` so that overlays are mounted and unmounted correctly\n    // when switching from one to the other.\n    view = (\n      <CSSTransition\n        key={view.key}\n        mountOnEnter\n        unmountOnExit\n        classNames=\"Overlay\"\n        addEndListener={addTransitionEndListener}\n      >\n        {view}\n      </CSSTransition>\n    );\n  }\n  return (\n    <TransitionGroup className=\"Overlays\">\n      {view}\n    </TransitionGroup>\n  );\n};\n\nOverlays.propTypes = {\n  children: PropTypes.node,\n  active: PropTypes.string,\n};\n\nexport default Overlays;\n"],"file":"Overlays.js"}