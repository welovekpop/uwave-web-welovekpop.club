{"version":3,"sources":["middleware/index.js"],"names":["path","defaultFs","hstream","router","serveStatic","gzip","uwaveWebClient","uw","options","basePath","join","__dirname","fs","title","clientOptions","clientRouter","mobile","req","res","transform","JSON","stringify","createReadStream","pipe","get","setHeader","apiUrl","params","key","json","use"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,IAAtB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;;AAEA,eAAe,SAASC,cAAT,CAAwBC,EAAxB,EAA4BC,UAAU,EAAtC,EAA0C;AACvD,QAAM;AACJC,eAAWT,KAAKU,IAAL,CAAUC,SAAV,EAAqB,cAArB,CADP;AAEJC,SAAKX,SAFD,EAEY;AAChBY,YAAQ,OAHJ;AAIJ,OAAGC;AAJC,MAKFN,OALJ;;AAOA,QAAMO,eAAeZ,QAArB;;AAEA,QAAMa,SAAS,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3B,UAAMC,YAAYjB,QAAQ;AACxBW,WADwB;AAExB,wBAAkBO,KAAKC,SAAL,CAAeP,aAAf;AAFM,KAAR,CAAlB;;AAKAF,OAAGU,gBAAH,CAAoBtB,KAAKU,IAAL,CAAUD,QAAV,EAAoB,QAApB,CAApB,EAAmD,MAAnD,EACGc,IADH,CACQJ,SADR,EAEGI,IAFH,CAEQL,GAFR;AAGD,GATD;;AAWA,SAAOH,aACJS,GADI,CACA,GADA,EACK,CAACP,GAAD,EAAMC,GAAN,KAAc;AACtBA,QAAIO,SAAJ,CAAc,cAAd,EAA8B,WAA9B;;AAEA,UAAMN,YAAYjB,QAAQ;AACxBW,WADwB;AAExB,wBAAkBO,KAAKC,SAAL,CAAeP,aAAf;AAFM,KAAR,CAAlB;;AAKAF,OAAGU,gBAAH,CAAoBtB,KAAKU,IAAL,CAAUD,QAAV,EAAoB,YAApB,CAApB,EAAuD,MAAvD,EACGc,IADH,CACQJ,SADR,EAEGI,IAFH,CAEQlB,KAAKY,GAAL,EAAUC,GAAV,CAFR,EAGGK,IAHH,CAGQL,GAHR;AAID,GAbI,EAcJM,GAdI,CAcA,aAdA,EAce,CAACP,GAAD,EAAMC,GAAN,KAAc;AAChCA,QAAIO,SAAJ,CAAc,cAAd,EAA8B,WAA9B;;AAEA,UAAMN,YAAYjB,QAAQ;AACxBW,WADwB;AAExB,wBAAkBO,KAAKC,SAAL,CAAe,EAAEK,QAAQZ,cAAcY,MAAxB,EAAf,CAFM;AAGxB,qBAAeT,IAAIU,MAAJ,CAAWC;AAHF,KAAR,CAAlB;;AAMAhB,OAAGU,gBAAH,CAAoBtB,KAAKU,IAAL,CAAUD,QAAV,EAAoB,qBAApB,CAApB,EAAgE,MAAhE,EACGc,IADH,CACQJ,SADR,EAEGI,IAFH,CAEQlB,KAAKY,GAAL,EAAUC,GAAV,CAFR,EAGGK,IAHH,CAGQL,GAHR;AAID,GA3BI,EA4BJM,GA5BI,CA4BA,yBA5BA,EA4B2B,CAACP,GAAD,EAAMC,GAAN,KAAc;AAC5CA,QAAIW,IAAJ,CAASf,aAAT;AACD,GA9BI,EA+BJU,GA/BI,CA+BA,IA/BA,EA+BMR,MA/BN,EAgCJQ,GAhCI,CAgCA,SAhCA,EAgCWR,MAhCX,EAiCJc,GAjCI,CAiCA1B,YAAYK,QAAZ,CAjCA,CAAP;AAkCD","file":"index.js","sourcesContent":["import path from 'path';\nimport defaultFs from 'fs';\nimport hstream from 'hstream';\nimport router from 'router';\nimport serveStatic from 'connect-gzip-static';\nimport gzip from 'http-gzip-maybe';\n\nexport default function uwaveWebClient(uw, options = {}) {\n  const {\n    basePath = path.join(__dirname, '../../public'),\n    fs = defaultFs, // Should only be used by the dev server.\n    title = 'Ã¼Wave',\n    ...clientOptions\n  } = options;\n\n  const clientRouter = router();\n\n  const mobile = (req, res) => {\n    const transform = hstream({\n      title,\n      '#u-wave-config': JSON.stringify(clientOptions),\n    });\n\n    fs.createReadStream(path.join(basePath, 'm.html'), 'utf8')\n      .pipe(transform)\n      .pipe(res);\n  };\n\n  return clientRouter\n    .get('/', (req, res) => {\n      res.setHeader('content-type', 'text/html');\n\n      const transform = hstream({\n        title,\n        '#u-wave-config': JSON.stringify(clientOptions),\n      });\n\n      fs.createReadStream(path.join(basePath, 'index.html'), 'utf8')\n        .pipe(transform)\n        .pipe(gzip(req, res))\n        .pipe(res);\n    })\n    .get('/reset/:key', (req, res) => {\n      res.setHeader('content-type', 'text/html');\n\n      const transform = hstream({\n        title,\n        '#u-wave-config': JSON.stringify({ apiUrl: clientOptions.apiUrl }),\n        '#reset-data': req.params.key,\n      });\n\n      fs.createReadStream(path.join(basePath, 'password-reset.html'), 'utf8')\n        .pipe(transform)\n        .pipe(gzip(req, res))\n        .pipe(res);\n    })\n    .get('/u-wave-web-config.json', (req, res) => {\n      res.json(clientOptions);\n    })\n    .get('/m', mobile)\n    .get('/m.html', mobile)\n    .use(serveStatic(basePath));\n}\n"]}