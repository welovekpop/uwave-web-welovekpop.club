{"version":3,"sources":["middleware/index.js"],"names":["path","defaultFs","hstream","router","serveStatic","gzip","uwaveWebClient","uw","options","basePath","join","__dirname","fs","title","clientOptions","clientRouter","get","req","res","setHeader","transform","JSON","stringify","createReadStream","pipe","apiUrl","params","key","json","use"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,IAAtB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,eAAe,SAASC,cAAT,CAAwBC,EAAxB,EAA4BC,UAAU,EAAtC,EAA0C;AACvD,QAAM;AACJC,eAAWT,KAAKU,IAAL,CAAUC,SAAV,EAAqB,cAArB,CADP;AAEJC,SAAKX,SAFD;AAEY;AAChBY,YAAQ,OAHJ;AAIJ,OAAGC;AAJC,MAKFN,OALJ;AAOA,QAAMO,eAAeZ,QAArB;AAEA,SAAOY,aACJC,GADI,CACA,GADA,EACK,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtBA,QAAIC,SAAJ,CAAc,cAAd,EAA8B,WAA9B;AAEA,UAAMC,YAAYlB,QAAQ;AACxBW,WADwB;AAExB,wBAAkBQ,KAAKC,SAAL,CAAeR,aAAf;AAFM,KAAR,CAAlB;AAKAF,OAAGW,gBAAH,CAAoBvB,KAAKU,IAAL,CAAUD,QAAV,EAAoB,YAApB,CAApB,EAAuD,MAAvD,EACGe,IADH,CACQJ,SADR,EAEGI,IAFH,CAEQnB,KAAKY,GAAL,EAAUC,GAAV,CAFR,EAGGM,IAHH,CAGQN,GAHR;AAID,GAbI,EAcJF,GAdI,CAcA,aAdA,EAce,CAACC,GAAD,EAAMC,GAAN,KAAc;AAChCA,QAAIC,SAAJ,CAAc,cAAd,EAA8B,WAA9B;AAEA,UAAMC,YAAYlB,QAAQ;AACxBW,WADwB;AAExB,wBAAkBQ,KAAKC,SAAL,CAAe;AAAEG,gBAAQX,cAAcW;AAAxB,OAAf,CAFM;AAGxB,qBAAeR,IAAIS,MAAJ,CAAWC;AAHF,KAAR,CAAlB;AAMAf,OAAGW,gBAAH,CAAoBvB,KAAKU,IAAL,CAAUD,QAAV,EAAoB,qBAApB,CAApB,EAAgE,MAAhE,EACGe,IADH,CACQJ,SADR,EAEGI,IAFH,CAEQnB,KAAKY,GAAL,EAAUC,GAAV,CAFR,EAGGM,IAHH,CAGQN,GAHR;AAID,GA3BI,EA4BJF,GA5BI,CA4BA,yBA5BA,EA4B2B,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5CA,QAAIU,IAAJ,CAASd,aAAT;AACD,GA9BI,EA+BJe,GA/BI,CA+BAzB,YAAYK,QAAZ,CA/BA,CAAP;AAgCD","sourcesContent":["import path from 'path';\nimport defaultFs from 'fs';\nimport hstream from 'hstream';\nimport router from 'router';\nimport serveStatic from 'connect-gzip-static';\nimport gzip from 'http-gzip-maybe';\n\nexport default function uwaveWebClient(uw, options = {}) {\n  const {\n    basePath = path.join(__dirname, '../../public'),\n    fs = defaultFs, // Should only be used by the dev server.\n    title = 'Ã¼Wave',\n    ...clientOptions\n  } = options;\n\n  const clientRouter = router();\n\n  return clientRouter\n    .get('/', (req, res) => {\n      res.setHeader('content-type', 'text/html');\n\n      const transform = hstream({\n        title,\n        '#u-wave-config': JSON.stringify(clientOptions),\n      });\n\n      fs.createReadStream(path.join(basePath, 'index.html'), 'utf8')\n        .pipe(transform)\n        .pipe(gzip(req, res))\n        .pipe(res);\n    })\n    .get('/reset/:key', (req, res) => {\n      res.setHeader('content-type', 'text/html');\n\n      const transform = hstream({\n        title,\n        '#u-wave-config': JSON.stringify({ apiUrl: clientOptions.apiUrl }),\n        '#reset-data': req.params.key,\n      });\n\n      fs.createReadStream(path.join(basePath, 'password-reset.html'), 'utf8')\n        .pipe(transform)\n        .pipe(gzip(req, res))\n        .pipe(res);\n    })\n    .get('/u-wave-web-config.json', (req, res) => {\n      res.json(clientOptions);\n    })\n    .use(serveStatic(basePath));\n}\n"],"file":"index.js"}