{"version":3,"sources":["store/configureStore.js"],"names":["createUwaveStore","initialState","options","isTesting","process","env","NODE_ENV","enableLogging","rerender","notify","raf","middleware","thunk","url","socketUrl","logger","filter","Boolean","currentReducers","reducers","sources","store","applyMiddleware","apply","persistSettings","module","hot","accept","replaceReducer","mount","name","reducer","_objectSpread2"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAAqE;AACrE;AACA;AAEe,SAASA,gBAAT,CAA0BC,YAA1B,EAAwCC,OAAxC,EAAiD;AAC9D,MAAID,iBAAiB,KAAK,CAA1B,EAA6B;AAC3BA,mBAAe,EAAf;AACD;;AAED,MAAIC,YAAY,KAAK,CAArB,EAAwB;AACtBA,cAAU,EAAV;AACD;;AAED,MAAIC,YAAYC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,SAAzC;AACA,MAAIC,gBAAgBH,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,CAACH,SAA9D;AACA,MAAIK,WAAW,sBAAQ,UAAUC,MAAV,EAAkB;AACvCA;AACD,GAFc,EAEZC,YAFY,CAAf;AAGA,MAAIC,aAAa,CAAC;AAClB;AACA;AACA;AACA;AACAC,qBALiB,EAKV;AACP;AACA,yBAPiB,EAOA,CAACT,SAAD,IAAc,qBAAa;AAC1CU,SAAKX,QAAQY;AAD6B,GAAb,CAPd,EASb;AACJ;AACA;AACAP,mBAAiBQ,oBAZA,EAYQC,MAZR,CAYeC,OAZf,CAAjB;AAcA,MAAIC,kBAAkB,4BAAc,EAAd,EAAkBC,QAAlB,EAA4B;AAChDC,aAAS,mCAAqBlB,OAArB;AADuC,GAA5B,CAAtB;AAIA,MAAImB,QAAQ,yBAAa;AACzB;AACA,8BAAgBH,eAAhB,CAFY,EAEsBjB,YAFtB,EAEoC,qBAAS;AACzDqB,yBAAgBC,KAAhB,CAAsB,KAAK,CAA3B,EAA8BZ,UAA9B,CADgD,EACL;AAC3C;AACA;AACA;AACAa,0BALgD,EAK/B,6CAAiBhB,QAAjB,CAL+B,CAFpC,CAAZ;;AASA,MAAIJ,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CmB,OAAOC,GAArD,EAA0D;AACxD;AACA;AACA;AACAD,WAAOC,GAAP,CAAWC,MAAX,CAAkB,aAAlB,EAAiC,YAAY;AAC3CN,YAAMO,cAAN,CAAqB,4BAAgB,4BAAc,EAAd,EAAkBT,QAAlB,EAA4B;AAC/DC,iBAAS,mCAAqBlB,OAArB;AADsD,OAA5B,CAAhB,CAArB;AAGD,KAJD;AAKD;;AAEDmB,QAAMQ,KAAN,GAAc,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACrC,QAAIC,cAAJ;;AAEAd,sBAAkB,4BAAc,EAAd,EAAkBA,eAAlB,GAAoCc,iBAAiB,EAAjB,EAAqBA,eAAeF,IAAf,IAAuBC,OAA5C,EAAqDC,cAAzF,EAAlB;AACAX,UAAMO,cAAN,CAAqB,4BAAgBV,eAAhB,CAArB;AACD,GALD;;AAOA,SAAOG,KAAP;AACD,C,CACD","file":"configureStore.js","sourcesContent":["import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { batchedSubscribe } from 'redux-batched-subscribe';\nimport nanoraf from 'nanoraf';\nimport raf from 'raf';\nimport persistSettings from './persistSettings';\nimport webApiRequest from './request';\nimport webApiSocket from './socket';\nimport * as reducers from '../reducers';\nimport createSourcesReducer from '../reducers/createSourcesReducer';\n\n// Setting up a store in Redux can be kind of messy because there are a lot of\n// things coming together in one place. Luckily, we don't have _that_ much going\n// on in üWave, so it's kind of manageable.\n\nexport default function createUwaveStore(initialState = {}, options = {}) {\n  const isTesting = process.env.NODE_ENV === 'testing';\n  const enableLogging = process.env.NODE_ENV !== 'production' && !isTesting;\n\n  const rerender = nanoraf((notify) => {\n    notify();\n  }, raf);\n\n  const middleware = [\n    // Redux-Thunk allows dispatching a function to the store instead of an\n    // action object. These functions can then dispatch action objects as they\n    // please. It's used primarily for async actions: for example, actions that\n    // send HTTP requests. Those might dispatch an action object once the\n    // request finishes.\n    thunk,\n    // This allows dispatching REQUEST_START actions to the store, which will\n    // then be executed and handled as HTTP requests by the middleware.\n    webApiRequest(),\n    !isTesting && webApiSocket({ url: options.socketUrl }),\n    // Redux-Logger logs state changes to the console, including the\n    // Before-state, the Action object, and the After-state. Invaluable for\n    // debugging :)\n    enableLogging && logger,\n  ].filter(Boolean);\n\n  let currentReducers = {\n    ...reducers,\n    sources: createSourcesReducer(options),\n  };\n\n  const store = createStore(\n    // Finish up the reducer function by combining all the different reducers\n    // into one big reducer that works on one big state object.\n    combineReducers(currentReducers),\n    initialState,\n    compose(\n      // Adds all of the above ☝ middleware features to the store.\n      applyMiddleware(...middleware),\n      // Keeps the user's settings in localStorage, so that a refresh doesn't\n      // reset all your preferences.\n      // This is done separately from the Middleware features, because it changes\n      // the _initial_ `settings` state, something that Middleware can't do.\n      persistSettings,\n      batchedSubscribe(rerender),\n    ),\n  );\n\n  if (process.env.NODE_ENV === 'development' && module.hot) {\n    // Update the store's reducer function when the reducer source code has\n    // changed. See /tasks/watch.js for more on Hot Reloading!\n    // This is only used when debugging, not in a deployed app.\n    module.hot.accept('../reducers', () => {\n      store.replaceReducer(combineReducers({\n        ...reducers,\n        sources: createSourcesReducer(options),\n      }));\n    });\n  }\n\n  store.mount = (name, reducer) => {\n    currentReducers = {\n      ...currentReducers,\n      [name]: reducer,\n    };\n    store.replaceReducer(combineReducers(currentReducers));\n  };\n\n  return store;\n}\n"]}