{"version":3,"sources":["utils/chatMentions.js"],"names":["getAvailableGroupMentions","canMention","Object","keys","groupMentions","filter","resolveMentions","tree","state","users","forEach","node","type","groupSelector","mention","group","user","username","toLowerCase","content","hasMention","id","some","_id","Array","isArray"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA;;;;;AAMO,SAASA,yBAAT,CAAmCC,UAAnC,EAA+C;AACpD,MAAIA,UAAJ,EAAgB;AACd,WAAOC,OAAOC,IAAP,CAAYC,aAAZ,EAA2BC,MAA3B,CAAkCJ,UAAlC,CAAP;AACD;;AAED,SAAO,EAAP;AACD;AACD;;;;;;;;AAOO,SAASK,eAAT,CAAyBC,IAAzB,EAA+BC,KAA/B,EAAsC;AAC3C,MAAIC,QAAQ,qCAAiBD,KAAjB,CAAZ;AACAD,OAAKG,OAAL,CAAa,UAAUC,IAAV,EAAgB;AAC3B,QAAIA,KAAKC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,UAAIC,gBAAgBT,cAAcO,KAAKG,OAAnB,CAApB;AACA;;AAEA,UAAID,aAAJ,EAAmB;AACjBF,aAAKI,KAAL,GAAaF,cAAcL,KAAd,CAAb;AACD,OAFD,MAEO;AACLG,aAAKK,IAAL,GAAY,mBAAKP,KAAL,EAAY,UAAUO,IAAV,EAAgB;AACtC,iBAAOA,KAAKC,QAAL,CAAcC,WAAd,OAAgCP,KAAKG,OAA5C;AACD,SAFW,CAAZ;AAGD;AACD;;AAED,KAbD,MAaO,IAAIH,KAAKQ,OAAT,EAAkB;AACvBb,sBAAgBK,KAAKQ,OAArB,EAA8BX,KAA9B;AACD;AACF,GAjBD;AAkBD;AACD;;;;;;;;;AAQO,SAASY,UAAT,CAAoBb,IAApB,EAA0Bc,EAA1B,EAA8B;AACnC,SAAOd,KAAKe,IAAL,CAAU,UAAUX,IAAV,EAAgB;AAC/B,QAAIA,KAAKC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,UAAID,KAAKK,IAAT,EAAe;AACb,eAAOL,KAAKK,IAAL,CAAUO,GAAV,KAAkBF,EAAzB;AACD,OAFD,MAEO,IAAIV,KAAKI,KAAT,EAAgB;AACrB,eAAOJ,KAAKI,KAAL,CAAWO,IAAX,CAAgB,UAAUN,IAAV,EAAgB;AACrC,iBAAOA,KAAKO,GAAL,KAAaF,EAApB;AACD,SAFM,CAAP;AAGD;;AAED,aAAO,KAAP;AACD;;AAED,WAAOG,MAAMC,OAAN,CAAcd,IAAd,KAAuBS,WAAWT,IAAX,EAAiBU,EAAjB,CAA9B;AACD,GAdM,CAAP;AAeD,C,CACD","file":"chatMentions.js","sourcesContent":["import find from 'lodash/find';\nimport { userListSelector } from '../selectors/userSelectors';\nimport * as groupMentions from './groupMentions';\n\nexport { groupMentions };\n\n/**\n * Get a list of group names that can be mentioned by a user.\n *\n * @param {function(role: string): boolean} canMention\n */\nexport function getAvailableGroupMentions(canMention) {\n  if (canMention) {\n    return Object.keys(groupMentions).filter(canMention);\n  }\n  return [];\n}\n\n/**\n * Attach user objects to mentions in a parsed chat message.\n *\n * @param {Array} tree Parsed message.\n * @param {Array.<{username: string}>} users List of users.\n */\nexport function resolveMentions(tree, state) {\n  const users = userListSelector(state);\n  tree.forEach((node) => {\n    if (node.type === 'mention') {\n      const groupSelector = groupMentions[node.mention];\n      /* eslint-disable no-param-reassign */\n      if (groupSelector) {\n        node.group = groupSelector(state);\n      } else {\n        node.user = find(users, user => user.username.toLowerCase() === node.mention);\n      }\n      /* eslint-enable no-param-reassign */\n    } else if (node.content) {\n      resolveMentions(node.content, state);\n    }\n  });\n}\n\n/**\n * Check whether a parsed chat message mentions a given user ID. Expects mention\n * nodes to have User data, added by `resolveMentions()`.\n *\n * @param {Array} tree Parsed message.\n * @param {String} id User ID.\n */\nexport function hasMention(tree, id) {\n  return tree.some((node) => {\n    if (node.type === 'mention') {\n      if (node.user) {\n        return node.user._id === id;\n      } else if (node.group) {\n        return node.group.some(user => user._id === id);\n      }\n      return false;\n    }\n    return Array.isArray(node) && hasMention(node, id);\n  });\n}\n"]}