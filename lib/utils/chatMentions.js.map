{"version":3,"sources":["utils/chatMentions.js"],"names":["getAvailableGroupMentions","resolveMentions","hasMention","groupMentions","user","Object","keys","filter","mention","role","tree","state","users","forEach","node","type","group","username","toLowerCase","content","id","some","_id","Array","isArray"],"mappings":";;;;;;QAWgBA,yB,GAAAA,yB;QAeAC,e,GAAAA,e;QA2BAC,U,GAAAA,U;;AArDhB;;;;AACA;;AACA;;IAAYC,a;;;;;;QAEHA,a,GAAAA,a;;AAET;;;;;;AAKO,SAASH,yBAAT,CAAmCI,IAAnC,EAAyC;AAC9C,MAAIA,IAAJ,EAAU;AACR,WAAOC,OAAOC,IAAP,CAAYH,aAAZ,EAA2BI,MAA3B,CAAkC,UAAUC,OAAV,EAAmB;AAC1D,aAAOJ,KAAKK,IAAL,IAAaN,cAAcK,OAAd,EAAuBC,IAA3C;AACD,KAFM,CAAP;AAGD;AACD,SAAO,EAAP;AACD;;AAED;;;;;;AAMO,SAASR,eAAT,CAAyBS,IAAzB,EAA+BC,KAA/B,EAAsC;AAC3C,MAAIC,QAAQ,qCAAiBD,KAAjB,CAAZ;AACAD,OAAKG,OAAL,CAAa,UAAUC,IAAV,EAAgB;AAC3B,QAAIA,KAAKC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,UAAIC,QAAQb,cAAcW,KAAKN,OAAnB,CAAZ;AACA;AACA,UAAIQ,KAAJ,EAAW;AACTF,aAAKE,KAAL,GAAaA,MAAMJ,KAAN,CAAYD,KAAZ,CAAb;AACD,OAFD,MAEO;AACLG,aAAKV,IAAL,GAAY,oBAAKQ,KAAL,EAAY,UAAUR,IAAV,EAAgB;AACtC,iBAAOA,KAAKa,QAAL,CAAcC,WAAd,OAAgCJ,KAAKN,OAA5C;AACD,SAFW,CAAZ;AAGD;AACD;AACD,KAXD,MAWO,IAAIM,KAAKK,OAAT,EAAkB;AACvBlB,sBAAgBa,KAAKK,OAArB,EAA8BR,KAA9B;AACD;AACF,GAfD;AAgBD;;AAED;;;;;;;AAOO,SAAST,UAAT,CAAoBQ,IAApB,EAA0BU,EAA1B,EAA8B;AACnC,SAAOV,KAAKW,IAAL,CAAU,UAAUP,IAAV,EAAgB;AAC/B,QAAIA,KAAKC,IAAL,KAAc,SAAlB,EAA6B;AAC3B,UAAID,KAAKV,IAAT,EAAe;AACb,eAAOU,KAAKV,IAAL,CAAUkB,GAAV,KAAkBF,EAAzB;AACD,OAFD,MAEO,IAAIN,KAAKE,KAAT,EAAgB;AACrB,eAAOF,KAAKE,KAAL,CAAWK,IAAX,CAAgB,UAAUjB,IAAV,EAAgB;AACrC,iBAAOA,KAAKkB,GAAL,KAAaF,EAApB;AACD,SAFM,CAAP;AAGD;AACD,aAAO,KAAP;AACD;AACD,WAAOG,MAAMC,OAAN,CAAcV,IAAd,KAAuBZ,WAAWY,IAAX,EAAiBM,EAAjB,CAA9B;AACD,GAZM,CAAP;AAaD;AACD","file":"chatMentions.js","sourcesContent":["import find from 'lodash/find';\nimport { userListSelector } from '../selectors/userSelectors';\nimport * as groupMentions from './groupMentions';\n\nexport { groupMentions };\n\n/**\n * Get a list of group names that can be mentioned by a user.\n *\n * @param {{ role: number }} user\n */\nexport function getAvailableGroupMentions(user) {\n  if (user) {\n    return Object.keys(groupMentions).filter(mention => user.role >= groupMentions[mention].role);\n  }\n  return [];\n}\n\n/**\n * Attach user objects to mentions in a parsed chat message.\n *\n * @param {Array} tree Parsed message.\n * @param {Array.<{username: string}>} users List of users.\n */\nexport function resolveMentions(tree, state) {\n  const users = userListSelector(state);\n  tree.forEach((node) => {\n    if (node.type === 'mention') {\n      const group = groupMentions[node.mention];\n      /* eslint-disable no-param-reassign */\n      if (group) {\n        node.group = group.users(state);\n      } else {\n        node.user = find(users, user => user.username.toLowerCase() === node.mention);\n      }\n      /* eslint-enable no-param-reassign */\n    } else if (node.content) {\n      resolveMentions(node.content, state);\n    }\n  });\n}\n\n/**\n * Check whether a parsed chat message mentions a given user ID. Expects mention\n * nodes to have User data, added by `resolveMentions()`.\n *\n * @param {Array} tree Parsed message.\n * @param {String} id User ID.\n */\nexport function hasMention(tree, id) {\n  return tree.some((node) => {\n    if (node.type === 'mention') {\n      if (node.user) {\n        return node.user._id === id;\n      } else if (node.group) {\n        return node.group.some(user => user._id === id);\n      }\n      return false;\n    }\n    return Array.isArray(node) && hasMention(node, id);\n  });\n}\n"]}