{"version":3,"sources":["utils/commands/waitlist.js"],"names":["guard","action","_len","arguments","length","args","Array","_key","join","username","dispatch","getState","user","posStr","position","parseInt"],"mappings":"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","file":"waitlist.js","sourcesContent":["import { register, findUser } from '../ChatCommands';\nimport { log } from '../../actions/ChatActionCreators';\n\nimport {\n  joinWaitlist,\n  modClearWaitlist,\n  modLockWaitlist,\n  modUnlockWaitlist,\n} from '../../actions/WaitlistActionCreators';\nimport {\n  skipCurrentDJ,\n  removeWaitlistUser,\n  moveWaitlistUser,\n} from '../../actions/ModerationActionCreators';\nimport {\n  userListSelector,\n  isModeratorSelector,\n} from '../../selectors/userSelectors';\nimport {\n  waitlistUsersSelector,\n  djAndWaitlistUsersSelector,\n} from '../../selectors/waitlistSelectors';\n\nregister('skip', 'Skip the current DJ.', {\n  guard: isModeratorSelector,\n  action: (...args) => skipCurrentDJ(args ? args.join(' ') : '[No reason given]'),\n});\n\nregister(\n  'wladd',\n  'Add a user to the waitlist. Syntax: \"/wladd username\"',\n  {\n    guard: isModeratorSelector,\n    action: username => (dispatch, getState) => {\n      if (!username) {\n        return dispatch(log('Provide a user to add to the waitlist. Syntax: \"/wladd username\"'));\n      }\n\n      const user = findUser(userListSelector(getState()), username);\n      if (user) {\n        return dispatch(joinWaitlist(user));\n      }\n      return dispatch(log(`User ${username} is not online right now.`));\n    },\n  },\n);\n\nregister(\n  'wlremove',\n  'Remove a user from the waitlist. Syntax: \"/wlremove username\"',\n  {\n    guard: isModeratorSelector,\n    action: username => (dispatch, getState) => {\n      if (!username) {\n        return dispatch(log('Provide a user to remove from the waitlist. Syntax: \"/wlremove username\"'));\n      }\n\n      const user = findUser(\n        djAndWaitlistUsersSelector(getState()),\n        username,\n      );\n      if (user) {\n        return dispatch(removeWaitlistUser(user));\n      }\n      return dispatch(log(`User ${username} is not in the waitlist.`));\n    },\n  },\n);\n\nregister(\n  'wlclear',\n  'Remove everyone from the waitlist.',\n  { guard: isModeratorSelector, action: modClearWaitlist },\n);\n\nregister(\n  'wllock',\n  'Lock the waitlist.',\n  { guard: isModeratorSelector, action: modLockWaitlist },\n);\n\nregister(\n  'wlunlock',\n  'Unlock the waitlist.',\n  { guard: isModeratorSelector, action: modUnlockWaitlist },\n);\n\nregister(\n  'wlmove',\n  'Move a user to a different position in the waitlist. ' +\n  'Syntax: \"/wlmove username position\"',\n  {\n    guard: isModeratorSelector,\n    action: (username, posStr) => (dispatch, getState) => {\n      if (!username) {\n        return dispatch(log('Provide a user to move in the waitlist. Syntax: \"/wlmove username position\"'));\n      }\n      const position = parseInt(posStr, 10) - 1;\n      if (typeof position !== 'number' || position < 0) {\n        return dispatch(log(`Provide a position to move @${username} to. Syntax: \"/wlmove username position\"`));\n      }\n\n      const user = findUser(\n        waitlistUsersSelector(getState()),\n        username,\n      );\n      if (user) {\n        return dispatch(moveWaitlistUser(user, position));\n      }\n      return dispatch(log(`User ${username} is not in the waitlist.`));\n    },\n  },\n);\n"]}