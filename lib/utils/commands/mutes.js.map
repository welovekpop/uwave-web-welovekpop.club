{"version":3,"sources":["utils/commands/mutes.js"],"names":["guard","action","username","duration","arguments","length","undefined","dispatch","getState","user"],"mappings":";;AAAA;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA,4BAAS,MAAT,EAAiB,uFAAjB,EAA0G;AACxGA,2CADwG;AAExGC,UAAQ,SAASA,MAAT,CAAgBC,QAAhB,EAA0B;AAChC,QAAIC,WAAWC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,KAAnF;AACA,WAAO,UAAUG,QAAV,EAAoBC,QAApB,EAA8B;AACnC,UAAI,CAACN,QAAL,EAAe;AACb,eAAOK,SAAS,6BAAI,yBAAJ,CAAT,CAAP;AACD;AACD,UAAIE,OAAO,4BAAS,qCAAiBD,UAAjB,CAAT,EAAuCN,QAAvC,CAAX;AACA,UAAI,CAACO,IAAL,EAAW;AACT,eAAOF,SAAS,6BAAI,WAAWL,QAAX,GAAsB,kBAA1B,CAAT,CAAP;AACD;AACD,aAAOK,SAAS,wCAASE,IAAT,EAAe,kBAAG,KAAKN,QAAR,CAAf,CAAT,CAAP;AACD,KATD;AAUD;AAduG,CAA1G;;AAiBA,4BAAS,QAAT,EAAmB,mDAAnB,EAAwE;AACtEH,2CADsE;AAEtEC,UAAQ,SAASA,MAAT,CAAgBC,QAAhB,EAA0B;AAChC,WAAO,UAAUK,QAAV,EAAoBC,QAApB,EAA8B;AACnC,UAAI,CAACN,QAAL,EAAe;AACb,eAAOK,SAAS,6BAAI,2BAAJ,CAAT,CAAP;AACD;AACD,UAAIE,OAAO,4BAAS,uCAAmBD,UAAnB,CAAT,EAAyCN,QAAzC,CAAX;AACA,UAAI,CAACO,IAAL,EAAW;AACT,eAAOF,SAAS,6BAAI,WAAWL,QAAX,GAAsB,iBAA1B,CAAT,CAAP;AACD;AACD,aAAOK,SAAS,0CAAWE,IAAX,CAAT,CAAP;AACD,KATD;AAUD;AAbqE,CAAxE;AAeA","file":"mutes.js","sourcesContent":["import ms from 'ms';\nimport { register, findUser } from '../ChatCommands';\nimport { log } from '../../actions/ChatActionCreators';\n\nimport { mutedUsersSelector } from '../../selectors/chatSelectors';\nimport {\n  userListSelector,\n  isModeratorSelector,\n} from '../../selectors/userSelectors';\nimport { muteUser, unmuteUser } from '../../actions/ModerationActionCreators';\n\nregister(\n  'mute',\n  'Mute a user in chat, preventing them from chatting. Syntax: \"/mute username duration\"',\n  {\n    guard: isModeratorSelector,\n    action: (username, duration = '30m') => (dispatch, getState) => {\n      if (!username) {\n        return dispatch(log('Provide a user to mute.'));\n      }\n      const user = findUser(\n        userListSelector(getState()),\n        username,\n      );\n      if (!user) {\n        return dispatch(log(`User \"${username}\" is not online.`));\n      }\n      return dispatch(muteUser(user, ms(`${duration}`)));\n    },\n  },\n);\n\nregister(\n  'unmute',\n  'Unmute a user in chat. Syntax: \"/unmute username\"',\n  {\n    guard: isModeratorSelector,\n    action: username => (dispatch, getState) => {\n      if (!username) {\n        return dispatch(log('Provide a user to unmute.'));\n      }\n      const user = findUser(mutedUsersSelector(getState()), username);\n      if (!user) {\n        return dispatch(log(`User \"${username}\" is not muted.`));\n      }\n      return dispatch(unmuteUser(user));\n    },\n  },\n);\n"]}