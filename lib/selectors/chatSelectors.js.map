{"version":3,"sources":["selectors/chatSelectors.js"],"names":["isModeratorSelector","baseSelector","state","chat","motdSelector","motd","MAX_MESSAGES","allMessagesSelector","messages","filteredMessagesSelector","notificationSettings","filter","message","type","userJoin","userLeave","userNameChanged","messagesSelector","slice","markupCompilerOptionsSelector","availableEmoji","emojiImages","mutesSelector","mutedUsers","muteTimeoutsSelector","mutes","mute","expirationTimer","mutedUserIDsSelector","Object","keys","mutedUsersSelector","mutedIDs","users","map","userID","currentUserMuteSelector","user","_id","availableGroupMentionsSelector","emojiCompletionsSelector","images","name","shortcode","image"],"mappings":";;;;;;;AAKA;;;;;0BAqESA,mB;;;;AA1ET;;AACA;;;;AAEA;;AACA;;AAEA;;;;AAEA,IAAIC,eAAe,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AAC9C,SAAOA,MAAMC,IAAb;AACD,CAFD;;AAIO,IAAIC,sCAAe,8BAAeH,YAAf,EAA6B,UAAUE,IAAV,EAAgB;AACrE,SAAOA,KAAKE,IAAZ;AACD,CAFyB,CAAnB;;AAIP,IAAIC,eAAe,GAAnB;AACA,IAAIC,sBAAsB,8BAAeN,YAAf,EAA6B,UAAUE,IAAV,EAAgB;AACrE,SAAOA,KAAKK,QAAZ;AACD,CAFyB,CAA1B;AAGA,IAAIC,2BAA2B,8BAAeF,mBAAf,kDAAkE,UAAUC,QAAV,EAAoBE,oBAApB,EAA0C;AACzI,SAAOF,SAASG,MAAT,CAAgB,UAAUC,OAAV,EAAmB;AACxC,QAAIA,QAAQC,IAAR,KAAiB,UAArB,EAAiC,OAAOH,qBAAqBI,QAA5B;AACjC,QAAIF,QAAQC,IAAR,KAAiB,WAArB,EAAkC,OAAOH,qBAAqBK,SAA5B;AAClC,QAAIH,QAAQC,IAAR,KAAiB,iBAArB,EAAwC,OAAOH,qBAAqBM,eAA5B;AACxC,WAAO,IAAP;AACD,GALM,CAAP;AAMD,CAP8B,CAA/B;AAQO,IAAIC,8CAAmB,8BAAeR,wBAAf,EAAyC,UAAUD,QAAV,EAAoB;AACzF,SAAOA,SAASU,KAAT,CAAe,CAACZ,YAAhB,CAAP;AACD,CAF6B,CAAvB;;AAIA,IAAIa,wEAAgC,wCAAyB;AAClEC,8DADkE;AAElEC;AAFkE,CAAzB,CAApC;;AAKP,IAAIC,gBAAgB,8BAAerB,YAAf,EAA6B,UAAUE,IAAV,EAAgB;AAC/D,SAAOA,KAAKoB,UAAZ;AACD,CAFmB,CAApB;;AAIO,IAAIC,sDAAuB,8BAAeF,aAAf,EAA8B,UAAUG,KAAV,EAAiB;AAC/E,SAAO,sBAAOA,KAAP,EAAc,UAAUC,IAAV,EAAgB;AACnC,WAAOA,KAAKC,eAAZ;AACD,GAFM,CAAP;AAGD,CAJiC,CAA3B;;AAMA,IAAIC,sDAAuB,8BAAeN,aAAf,EAA8B,UAAUG,KAAV,EAAiB;AAC/E,SAAOI,OAAOC,IAAP,CAAYL,KAAZ,CAAP;AACD,CAFiC,CAA3B;;AAIA,IAAIM,kDAAqB,8BAAeH,oBAAf,gCAAoD,UAAUI,QAAV,EAAoBC,KAApB,EAA2B;AAC7G,SAAOD,SAASE,GAAT,CAAa,UAAUC,MAAV,EAAkB;AACpC,WAAOF,MAAME,MAAN,CAAP;AACD,GAFM,CAAP;AAGD,CAJ+B,CAAzB;;AAMA,IAAIC,4DAA0B,kEAAoCd,aAApC,EAAmD,UAAUe,IAAV,EAAgBZ,KAAhB,EAAuB;AAC7G,SAAOY,OAAOZ,MAAMY,KAAKC,GAAX,CAAP,GAAyB,IAAhC;AACD,CAFoC,CAA9B;;AAIA,IAAIC,0EAAiC,kEAAoC,UAAUF,IAAV,EAAgB;AAC9F,SAAO,6CAA0BA,IAA1B,CAAP;AACD,CAF2C,CAArC;;AAIA,IAAIG,8DAA2B,6EAA6C,UAAUC,MAAV,EAAkB;AACnG,SAAOZ,OAAOC,IAAP,CAAYW,MAAZ,EAAoBP,GAApB,CAAwB,UAAUQ,IAAV,EAAgB;AAC7C,WAAO;AACLC,iBAAWD,IADN;AAELE,aAAOH,OAAOC,IAAP;AAFF,KAAP;AAID,GALM,CAAP;AAMD,CAPqC,CAA/B","file":"chatSelectors.js","sourcesContent":["import { createSelector, createStructuredSelector } from 'reselect';\nimport objMap from 'object.map';\n\nimport {\n  getAvailableGroupMentions\n} from '../utils/chatMentions';\nimport {\n  availableEmojiNamesSelector,\n  availableEmojiImagesSelector\n} from './configSelectors';\nimport {\n  usersSelector,\n  currentUserSelector\n} from './userSelectors';\nimport {\n  notificationSettingsSelector\n} from './settingSelectors';\n\nconst baseSelector = state => state.chat;\n\nexport const motdSelector = createSelector(baseSelector, chat => chat.motd);\n\nconst MAX_MESSAGES = 500;\nconst allMessagesSelector = createSelector(baseSelector, chat => chat.messages);\nconst filteredMessagesSelector = createSelector(\n  allMessagesSelector,\n  notificationSettingsSelector,\n  (messages, notificationSettings) => messages.filter((message) => {\n    if (message.type === 'userJoin') return notificationSettings.userJoin;\n    if (message.type === 'userLeave') return notificationSettings.userLeave;\n    if (message.type === 'userNameChanged') return notificationSettings.userNameChanged;\n    return true;\n  })\n);\nexport const messagesSelector = createSelector(\n  filteredMessagesSelector,\n  messages => messages.slice(-MAX_MESSAGES)\n);\n\nexport const markupCompilerOptionsSelector = createStructuredSelector({\n  availableEmoji: availableEmojiNamesSelector,\n  emojiImages: availableEmojiImagesSelector\n});\n\nconst mutesSelector = createSelector(baseSelector, chat => chat.mutedUsers);\n\nexport const muteTimeoutsSelector = createSelector(\n  mutesSelector,\n  mutes => objMap(mutes, mute => mute.expirationTimer)\n);\n\nexport const mutedUserIDsSelector = createSelector(\n  mutesSelector,\n  mutes => Object.keys(mutes)\n);\n\nexport const mutedUsersSelector = createSelector(\n  mutedUserIDsSelector,\n  usersSelector,\n  (mutedIDs, users) => mutedIDs.map(userID => users[userID])\n);\n\nexport const currentUserMuteSelector = createSelector(\n  currentUserSelector,\n  mutesSelector,\n  (user, mutes) => (user ? mutes[user._id] : null)\n);\n\nexport const availableGroupMentionsSelector = createSelector(\n  currentUserSelector,\n  user => getAvailableGroupMentions(user)\n);\n\nexport const emojiCompletionsSelector = createSelector(\n  availableEmojiImagesSelector,\n  images => Object.keys(images).map(name => ({\n    shortcode: name,\n    image: images[name]\n  }))\n);\n\nexport { isModeratorSelector as canDeleteMessagesSelector } from './userSelectors';\n"]}