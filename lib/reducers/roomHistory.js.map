{"version":3,"sources":["reducers/roomHistory.js"],"names":["reduce","initialState","normalize","entry","_id","historyID","user","media","timestamp","Date","playedAt","getTime","stats","upvotes","downvotes","favorites","state","arguments","length","undefined","action","type","payload","meta","map","mostRecent","slice","previous","concat"],"mappings":";;;;;kBAmBwBA,M;;AAnBxB;;;;AACA;;;;AAEA,IAAIC,eAAe,EAAnB;;AAEA,IAAIC,YAAY,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACxC,SAAO;AACLC,SAAKD,MAAMC,GAAN,IAAaD,MAAME,SADnB;AAELC,UAAMH,MAAMG,IAFP;AAGLC,WAAO,uBAAS,EAAT,EAAaJ,MAAMI,KAAN,CAAYA,KAAzB,EAAgCJ,MAAMI,KAAtC,CAHF;AAILC,eAAW,IAAIC,IAAJ,CAASN,MAAMK,SAAN,IAAmBL,MAAMO,QAAlC,EAA4CC,OAA5C,EAJN;AAKLC,WAAOT,MAAMS,KAAN,IAAe;AACpBC,eAASV,MAAMU,OAAN,IAAiB,EADN;AAEpBC,iBAAWX,MAAMW,SAAN,IAAmB,EAFV;AAGpBC,iBAAWZ,MAAMY,SAAN,IAAmB;AAHV;AALjB,GAAP;AAWD,CAZD;;AAce,SAASf,MAAT,GAAkB;AAC/B,MAAIgB,QAAQC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoEhB,YAAhF;AACA,MAAImB,SAASH,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAAjF;AACA,MAAII,OAAOD,OAAOC,IAAlB;AAAA,MACIC,UAAUF,OAAOE,OADrB;AAAA,MAEIC,OAAOH,OAAOG,IAFlB;;AAIA,UAAQF,IAAR;AACE;AACE,aAAOC,QAAQE,GAAR,CAAYtB,SAAZ,CAAP;AACF;AACE;AACE,YAAIuB,aAAaT,MAAM,CAAN,CAAjB;AACA;AACA;AACA;AACA,YAAIS,cAAcH,OAAd,IAAyBG,WAAWrB,GAAX,KAAmBkB,QAAQjB,SAAxD,EAAmE;AACjE,iBAAOW,MAAMU,KAAN,CAAY,CAAZ,CAAP;AACD;AACD,YAAI,CAACH,IAAD,IAAS,CAACA,KAAKI,QAAnB,EAA6B;AAC3B,iBAAOX,KAAP;AACD;AACD,eAAO,CAACd,UAAUqB,KAAKI,QAAf,CAAD,EAA2BC,MAA3B,CAAkCZ,KAAlC,CAAP;AACD;AACH;AACE,aAAOA,KAAP;AAlBJ;AAoBD;AACD","file":"roomHistory.js","sourcesContent":["import { ADVANCE, LOAD_HISTORY_COMPLETE } from '../constants/actionTypes/booth';\n\nconst initialState = [];\n\nconst normalize = entry => ({\n  _id: entry._id || entry.historyID,\n  user: entry.user,\n  media: {\n    ...entry.media.media,\n    ...entry.media\n  },\n  timestamp: new Date(entry.timestamp || entry.playedAt).getTime(),\n  stats: entry.stats || {\n    upvotes: entry.upvotes || [],\n    downvotes: entry.downvotes || [],\n    favorites: entry.favorites || []\n  }\n});\n\nexport default function reduce(state = initialState, action = {}) {\n  const { type, payload, meta } = action;\n  switch (type) {\n  case LOAD_HISTORY_COMPLETE:\n    return payload.map(normalize);\n  case ADVANCE: {\n    const mostRecent = state[0];\n    // If the currently playing track is already in the history, remove it--\n    // it'll be added back on the next advance, and will be handled by the\n    // roomHistorySelector in the mean time.\n    if (mostRecent && payload && mostRecent._id === payload.historyID) {\n      return state.slice(1);\n    }\n    if (!meta || !meta.previous) {\n      return state;\n    }\n    return [ normalize(meta.previous), ...state ];\n  }\n  default:\n    return state;\n  }\n}\n"]}