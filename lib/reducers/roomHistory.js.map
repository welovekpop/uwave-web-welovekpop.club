{"version":3,"sources":["reducers/roomHistory.js"],"names":["initialState","normalize","entry","_id","historyID","user","media","timestamp","Date","playedAt","getTime","stats","upvotes","downvotes","favorites","reduce","state","action","_action","type","payload","meta","LOAD_HISTORY_COMPLETE","map","ADVANCE","mostRecent","slice","previous","concat"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA,IAAIA,eAAe,EAAnB;;AAEA,IAAIC,YAAY,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACxC,SAAO;AACLC,SAAKD,MAAMC,GAAN,IAAaD,MAAME,SADnB;AAELC,UAAMH,MAAMG,IAFP;AAGLC,WAAO,uBAAS,EAAT,EAAaJ,MAAMI,KAAN,CAAYA,KAAzB,EAAgCJ,MAAMI,KAAtC,CAHF;AAILC,eAAW,IAAIC,IAAJ,CAASN,MAAMK,SAAN,IAAmBL,MAAMO,QAAlC,EAA4CC,OAA5C,EAJN;AAKLC,WAAOT,MAAMS,KAAN,IAAe;AACpBC,eAASV,MAAMU,OAAN,IAAiB,EADN;AAEpBC,iBAAWX,MAAMW,SAAN,IAAmB,EAFV;AAGpBC,iBAAWZ,MAAMY,SAAN,IAAmB;AAHV;AALjB,GAAP;AAWD,CAZD;;AAce,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+B;AAC5C,MAAID,UAAU,KAAK,CAAnB,EAAsB;AACpBA,YAAQhB,YAAR;AACD;;AAED,MAAIiB,WAAW,KAAK,CAApB,EAAuB;AACrBA,aAAS,EAAT;AACD;;AAED,MAAIC,UAAUD,MAAd;AAAA,MACIE,OAAOD,QAAQC,IADnB;AAAA,MAEIC,UAAUF,QAAQE,OAFtB;AAAA,MAGIC,OAAOH,QAAQG,IAHnB;;AAKA,UAAQF,IAAR;AACE,SAAKG,kCAAL;AACE,aAAOF,QAAQG,GAAR,CAAYtB,SAAZ,CAAP;;AAEF,SAAKuB,oBAAL;AACE;AACE,YAAIC,aAAaT,MAAM,CAAN,CAAjB,CADF,CAC6B;AAC3B;AACA;;AAEA,YAAIS,cAAcL,OAAd,IAAyBK,WAAWtB,GAAX,KAAmBiB,QAAQhB,SAAxD,EAAmE;AACjE,iBAAOY,MAAMU,KAAN,CAAY,CAAZ,CAAP;AACD;;AAED,YAAI,CAACL,IAAD,IAAS,CAACA,KAAKM,QAAnB,EAA6B;AAC3B,iBAAOX,KAAP;AACD;;AAED,eAAO,CAACf,UAAUoB,KAAKM,QAAf,CAAD,EAA2BC,MAA3B,CAAkCZ,KAAlC,CAAP;AACD;;AAEH;AACE,aAAOA,KAAP;AAtBJ;AAwBD","file":"roomHistory.js","sourcesContent":["import { ADVANCE, LOAD_HISTORY_COMPLETE } from '../constants/ActionTypes';\n\nconst initialState = [];\n\nconst normalize = entry => ({\n  _id: entry._id || entry.historyID,\n  user: entry.user,\n  media: {\n    ...entry.media.media,\n    ...entry.media,\n  },\n  timestamp: new Date(entry.timestamp || entry.playedAt).getTime(),\n  stats: entry.stats || {\n    upvotes: entry.upvotes || [],\n    downvotes: entry.downvotes || [],\n    favorites: entry.favorites || [],\n  },\n});\n\nexport default function reduce(state = initialState, action = {}) {\n  const { type, payload, meta } = action;\n  switch (type) {\n    case LOAD_HISTORY_COMPLETE:\n      return payload.map(normalize);\n    case ADVANCE: {\n      const mostRecent = state[0];\n      // If the currently playing track is already in the history, remove it--\n      // it'll be added back on the next advance, and will be handled by the\n      // roomHistorySelector in the mean time.\n      if (mostRecent && payload && mostRecent._id === payload.historyID) {\n        return state.slice(1);\n      }\n      if (!meta || !meta.previous) {\n        return state;\n      }\n      return [normalize(meta.previous), ...state];\n    }\n    default:\n      return state;\n  }\n}\n"]}