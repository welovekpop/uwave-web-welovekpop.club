{"version":3,"sources":["reducers/users.js"],"names":["updateUser","state","userID","update","_extends2","guestsReducer","action","type","INIT_STATE","payload","guests","RECEIVE_GUEST_COUNT","usersReducer","_extends3","_action","LOAD_ONLINE_USERS","users","USER_JOIN","user","_id","USER_LEAVE","CHANGE_USERNAME","username","USER_ADD_ROLES","roles","concat","USER_REMOVE_ROLES","filter","role","indexOf","reduce"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2C;AACzC,MAAIF,MAAMC,MAAN,CAAJ,EAAmB;AACjB,QAAIE,SAAJ;;AAEA,WAAO,uBAAS,EAAT,EAAaH,KAAb,GAAqBG,YAAY,EAAZ,EAAgBA,UAAUF,MAAV,IAAoBC,OAAOF,MAAMC,MAAN,CAAP,CAApC,EAA2DE,SAAhF,EAAP;AACD;;AAED,SAAOH,KAAP;AACD;;AAED,SAASI,aAAT,CAAuBJ,KAAvB,EAA8BK,MAA9B,EAAsC;AACpC,MAAIL,UAAU,KAAK,CAAnB,EAAsB;AACpBA,YAAQ,CAAR;AACD;;AAED,MAAIK,WAAW,KAAK,CAApB,EAAuB;AACrBA,aAAS,EAAT;AACD;;AAED,MAAIA,OAAOC,IAAP,KAAgBC,uBAApB,EAAgC;AAC9B,WAAOF,OAAOG,OAAP,CAAeC,MAAtB;AACD;;AAED,MAAIJ,OAAOC,IAAP,KAAgBI,gCAApB,EAAyC;AACvC,WAAOL,OAAOG,OAAP,CAAeC,MAAtB;AACD;;AAED,SAAOT,KAAP;AACD;;AAED,SAASW,YAAT,CAAsBX,KAAtB,EAA6BK,MAA7B,EAAqC;AACnC,MAAIO,SAAJ;;AAEA,MAAIZ,UAAU,KAAK,CAAnB,EAAsB;AACpBA,YAAQ,EAAR;AACD;;AAED,MAAIK,WAAW,KAAK,CAApB,EAAuB;AACrBA,aAAS,EAAT;AACD;;AAED,MAAIQ,UAAUR,MAAd;AAAA,MACIC,OAAOO,QAAQP,IADnB;AAAA,MAEIE,UAAUK,QAAQL,OAFtB;;AAIA,UAAQF,IAAR;AACE,SAAKC,uBAAL,CADF,CACmB;;AAEjB,SAAKO,8BAAL;AACE;AACA;AACA;AACA;AACA;AACA,aAAO,uBAAS,EAAT,EAAad,KAAb,EAAoB,sBAAQQ,QAAQO,KAAhB,EAAuB,KAAvB,CAApB,CAAP;;AAEF,SAAKC,sBAAL;AACE,aAAO,uBAAS,EAAT,EAAahB,KAAb,GAAqBY,YAAY,EAAZ,EAAgBA,UAAUJ,QAAQS,IAAR,CAAaC,GAAvB,IAA8BV,QAAQS,IAAtD,EAA4DL,SAAjF,EAAP;;AAEF,SAAKO,uBAAL;AACE,aAAO,qBAAOnB,KAAP,EAAcQ,QAAQP,MAAtB,CAAP;;AAEF,SAAKmB,4BAAL;AACE,aAAOrB,WAAWC,KAAX,EAAkBQ,QAAQP,MAA1B,EAAkC,UAAUgB,IAAV,EAAgB;AACvD,eAAO,uBAAS,EAAT,EAAaA,IAAb,EAAmB;AACxBI,oBAAUb,QAAQa;AADM,SAAnB,CAAP;AAGD,OAJM,CAAP;;AAMF,SAAKC,2BAAL;AACE,aAAOvB,WAAWC,KAAX,EAAkBQ,QAAQP,MAA1B,EAAkC,UAAUgB,IAAV,EAAgB;AACvD,eAAO,uBAAS,EAAT,EAAaA,IAAb,EAAmB;AACxBM,iBAAON,KAAKM,KAAL,CAAWC,MAAX,CAAkBhB,QAAQe,KAA1B;AADiB,SAAnB,CAAP;AAGD,OAJM,CAAP;;AAMF,SAAKE,8BAAL;AACE,aAAO1B,WAAWC,KAAX,EAAkBQ,QAAQP,MAA1B,EAAkC,UAAUgB,IAAV,EAAgB;AACvD,eAAO,uBAAS,EAAT,EAAaA,IAAb,EAAmB;AACxBM,iBAAON,KAAKM,KAAL,CAAWG,MAAX,CAAkB,UAAUC,IAAV,EAAgB;AACvC,mBAAOnB,QAAQe,KAAR,CAAcK,OAAd,CAAsBD,IAAtB,MAAgC,CAAC,CAAxC;AACD,WAFM;AADiB,SAAnB,CAAP;AAKD,OANM,CAAP;;AAQF;AACE,aAAO3B,KAAP;AAzCJ;AA2CD;;AAED,IAAI6B,SAAS,4BAAgB;AAC3BpB,UAAQL,aADmB;AAE3BW,SAAOJ;AAFoB,CAAhB,CAAb;eAIekB,M","file":"users.js","sourcesContent":["import except from 'except';\nimport indexBy from 'index-by';\nimport { combineReducers } from 'redux';\nimport {\n  INIT_STATE,\n  LOAD_ONLINE_USERS,\n  USER_JOIN,\n  USER_LEAVE,\n  CHANGE_USERNAME,\n  USER_ADD_ROLES,\n  USER_REMOVE_ROLES,\n  RECEIVE_GUEST_COUNT,\n} from '../constants/ActionTypes';\n\nfunction updateUser(state, userID, update) {\n  if (state[userID]) {\n    return {\n      ...state,\n      [userID]: update(state[userID]),\n    };\n  }\n  return state;\n}\n\nfunction guestsReducer(state = 0, action = {}) {\n  if (action.type === INIT_STATE) {\n    return action.payload.guests;\n  }\n  if (action.type === RECEIVE_GUEST_COUNT) {\n    return action.payload.guests;\n  }\n  return state;\n}\n\nfunction usersReducer(state = {}, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case INIT_STATE: // fall through\n    case LOAD_ONLINE_USERS:\n    // this is merged in instead of replacing the state, because sometimes the\n    // JOIN event from the current user comes in before the LOAD event, and then\n    // the current user is sometimes excluded from the state. it looks like this\n    // approach could cause problems, too, though.\n    // TODO maybe replace state instead anyway and merge in the current user?\n      return {\n        ...state,\n        ...indexBy(payload.users, '_id'),\n      };\n    case USER_JOIN:\n      return {\n        ...state,\n        [payload.user._id]: payload.user,\n      };\n    case USER_LEAVE:\n      return except(state, payload.userID);\n    case CHANGE_USERNAME:\n      return updateUser(state, payload.userID, user => ({\n        ...user,\n        username: payload.username,\n      }));\n    case USER_ADD_ROLES:\n      return updateUser(state, payload.userID, user => ({\n        ...user,\n        roles: [...user.roles, ...payload.roles],\n      }));\n    case USER_REMOVE_ROLES:\n      return updateUser(state, payload.userID, user => ({\n        ...user,\n        roles: user.roles.filter(role => payload.roles.indexOf(role) === -1),\n      }));\n    default:\n      return state;\n  }\n}\n\nconst reduce = combineReducers({\n  guests: guestsReducer,\n  users: usersReducer,\n});\n\nexport default reduce;\n"]}