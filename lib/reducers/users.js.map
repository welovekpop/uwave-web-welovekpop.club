{"version":3,"sources":["reducers/users.js"],"names":["updateUser","state","userID","update","_extends2","guestsReducer","arguments","length","undefined","action","type","payload","guests","usersReducer","_extends3","users","user","_id","username","roles","concat","filter","role","indexOf","reduce"],"mappings":"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","file":"users.js","sourcesContent":["import except from 'except';\nimport indexBy from 'index-by';\nimport { combineReducers } from 'redux';\n\nimport {\n  INIT_STATE,\n} from '../constants/actionTypes/auth';\nimport {\n  LOAD_ONLINE_USERS,\n  USER_JOIN,\n  USER_LEAVE,\n  CHANGE_USERNAME,\n  USER_ADD_ROLES,\n  USER_REMOVE_ROLES,\n\n  RECEIVE_GUEST_COUNT,\n} from '../constants/actionTypes/users';\n\nfunction updateUser(state, userID, update) {\n  if (state[userID]) {\n    return {\n      ...state,\n      [userID]: update(state[userID]),\n    };\n  }\n  return state;\n}\n\nfunction guestsReducer(state = 0, action = {}) {\n  if (action.type === INIT_STATE) {\n    return action.payload.guests;\n  }\n  if (action.type === RECEIVE_GUEST_COUNT) {\n    return action.payload.guests;\n  }\n  return state;\n}\n\nfunction usersReducer(state = {}, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n    case LOAD_ONLINE_USERS:\n    // this is merged in instead of replacing the state, because sometimes the\n    // JOIN event from the current user comes in before the LOAD event, and then\n    // the current user is sometimes excluded from the state. it looks like this\n    // approach could cause problems, too, though.\n    // TODO maybe replace state instead anyway and merge in the current user?\n      return {\n        ...state,\n        ...indexBy(payload.users, '_id'),\n      };\n    case USER_JOIN:\n      return {\n        ...state,\n        [payload.user._id]: payload.user,\n      };\n    case USER_LEAVE:\n      return except(state, payload.userID);\n    case CHANGE_USERNAME:\n      return updateUser(state, payload.userID, user => ({\n        ...user,\n        username: payload.username,\n      }));\n    case USER_ADD_ROLES:\n      return updateUser(state, payload.userID, user => ({\n        ...user,\n        roles: [...user.roles, ...payload.roles],\n      }));\n    case USER_REMOVE_ROLES:\n      return updateUser(state, payload.userID, user => ({\n        ...user,\n        roles: user.roles.filter(role => payload.roles.indexOf(role) === -1),\n      }));\n    default:\n      return state;\n  }\n}\n\nconst reduce = combineReducers({\n  guests: guestsReducer,\n  users: usersReducer,\n});\n\nexport default reduce;\n"]}