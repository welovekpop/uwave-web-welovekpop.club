{"version":3,"sources":["reducers/users.js"],"names":["guestsReducer","state","arguments","length","undefined","action","type","payload","guests","usersReducer","_extends2","users","user","_id","userID","_extends3","username","_extends4","role","reduce"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;AACA;;;;AAEA,SAASA,aAAT,GAAyB;AACvB,MAAIC,QAAQC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,CAAhF;AACA,MAAIG,SAASH,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAAjF;;AAEA,MAAIG,OAAOC,IAAP,qBAAJ,EAAgC;AAC9B,WAAOD,OAAOE,OAAP,CAAeC,MAAtB;AACD;AACD,MAAIH,OAAOC,IAAP,+BAAJ,EAAyC;AACvC,WAAOD,OAAOE,OAAP,CAAeC,MAAtB;AACD;AACD,SAAOP,KAAP;AACD;;AAED,SAASQ,YAAT,GAAwB;AACtB,MAAIC,SAAJ;;AAEA,MAAIT,QAAQC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAAhF;AACA,MAAIG,SAASH,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAAjF;AACA,MAAII,OAAOD,OAAOC,IAAlB;AAAA,MACIC,UAAUF,OAAOE,OADrB;;AAGA,UAAQD,IAAR;AACE;AACE;AACA;AACA;AACA;AACA;AACA,aAAO,uBAAS,EAAT,EAAaL,KAAb,EAAoB,uBAAQM,QAAQI,KAAhB,EAAuB,KAAvB,CAApB,CAAP;AACF;AACE,aAAO,uBAAS,EAAT,EAAaV,KAAb,GAAqBS,YAAY,EAAZ,EAAgBA,UAAUH,QAAQK,IAAR,CAAaC,GAAvB,IAA8BN,QAAQK,IAAtD,EAA4DF,SAAjF,EAAP;AACF;AACE,aAAO,sBAAOT,KAAP,EAAcM,QAAQO,MAAtB,CAAP;AACF;AACE,UAAIb,MAAMM,QAAQO,MAAd,CAAJ,EAA2B;AACzB,YAAIC,SAAJ;;AAEA,eAAO,uBAAS,EAAT,EAAad,KAAb,GAAqBc,YAAY,EAAZ,EAAgBA,UAAUR,QAAQO,MAAlB,IAA4B,uBAAS,EAAT,EAAab,MAAMM,QAAQO,MAAd,CAAb,EAAoC;AAC1GE,oBAAUT,QAAQS;AADwF,SAApC,CAA5C,EAExBD,SAFG,EAAP;AAGD;AACD,aAAOd,KAAP;AACF;AACE,UAAIA,MAAMM,QAAQO,MAAd,CAAJ,EAA2B;AACzB,YAAIG,SAAJ;;AAEA,eAAO,uBAAS,EAAT,EAAahB,KAAb,GAAqBgB,YAAY,EAAZ,EAAgBA,UAAUV,QAAQO,MAAlB,IAA4B,uBAAS,EAAT,EAAab,MAAMM,QAAQO,MAAd,CAAb,EAAoC;AAC1GI,gBAAMX,QAAQW;AAD4F,SAApC,CAA5C,EAExBD,SAFG,EAAP;AAGD;AACD,aAAOhB,KAAP;AACF;AACE,aAAOA,KAAP;AA/BJ;AAiCD;;AAED,IAAIkB,SAAS,4BAAgB;AAC3BX,UAAQR,aADmB;AAE3BW,SAAOF;AAFoB,CAAhB,CAAb;;kBAKeU,M;AACf","file":"users.js","sourcesContent":["import except from 'except';\nimport indexBy from 'index-by';\nimport { combineReducers } from 'redux';\n\nimport {\n  INIT_STATE\n} from '../constants/actionTypes/auth';\nimport {\n  LOAD_ONLINE_USERS,\n  USER_JOIN,\n  USER_LEAVE,\n  CHANGE_USERNAME,\n  CHANGE_ROLE,\n\n  RECEIVE_GUEST_COUNT\n} from '../constants/actionTypes/users';\n\nfunction guestsReducer(state = 0, action = {}) {\n  if (action.type === INIT_STATE) {\n    return action.payload.guests;\n  }\n  if (action.type === RECEIVE_GUEST_COUNT) {\n    return action.payload.guests;\n  }\n  return state;\n}\n\nfunction usersReducer(state = {}, action = {}) {\n  const { type, payload } = action;\n  switch (type) {\n  case LOAD_ONLINE_USERS:\n    // this is merged in instead of replacing the state, because sometimes the\n    // JOIN event from the current user comes in before the LOAD event, and then\n    // the current user is sometimes excluded from the state. it looks like this\n    // approach could cause problems, too, though.\n    // TODO maybe replace state instead anyway and merge in the current user?\n    return {\n      ...state,\n      ...indexBy(payload.users, '_id')\n    };\n  case USER_JOIN:\n    return {\n      ...state,\n      [payload.user._id]: payload.user\n    };\n  case USER_LEAVE:\n    return except(state, payload.userID);\n  case CHANGE_USERNAME:\n    if (state[payload.userID]) {\n      return {\n        ...state,\n        [payload.userID]: {\n          ...state[payload.userID],\n          username: payload.username\n        }\n      };\n    }\n    return state;\n  case CHANGE_ROLE:\n    if (state[payload.userID]) {\n      return {\n        ...state,\n        [payload.userID]: {\n          ...state[payload.userID],\n          role: payload.role\n        }\n      };\n    }\n    return state;\n  default:\n    return state;\n  }\n}\n\nconst reduce = combineReducers({\n  guests: guestsReducer,\n  users: usersReducer\n});\n\nexport default reduce;\n"]}