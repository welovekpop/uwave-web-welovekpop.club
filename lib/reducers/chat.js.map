{"version":3,"sources":["reducers/chat.js"],"names":["initialState","motd","messages","mutedUsers","removeInFlightMessage","remove","filter","message","inFlight","userID","text","reduce","state","action","_extends2","_action","type","payload","_state","INIT_STATE","RECEIVE_MOTD","SEND_MESSAGE","inFlightMessage","_id","Date","now","user","parsedText","parsed","timestamp","isMention","concat","RECEIVE_MESSAGE","LOG","logMessage","REMOVE_MESSAGE","msg","REMOVE_USER_MESSAGES","REMOVE_ALL_MESSAGES","MUTE_USER","mutedBy","moderatorID","expiresAt","expirationTimer","UNMUTE_USER","nextMessages"],"mappings":"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","file":"chat.js","sourcesContent":["import except from 'except';\nimport {\n  INIT_STATE,\n  RECEIVE_MOTD,\n  RECEIVE_MESSAGE,\n  SEND_MESSAGE,\n  LOG,\n  REMOVE_MESSAGE,\n  REMOVE_USER_MESSAGES,\n  REMOVE_ALL_MESSAGES,\n  MUTE_USER,\n  UNMUTE_USER,\n} from '../constants/ActionTypes';\nimport reduceNotifications from './chat/notifications';\n\nconst initialState = {\n  /**\n   * Message of the Day, a message shown at the very top of the Chat box. Can be\n   * used for announcements, for example, or a welcome message.\n   */\n  motd: null,\n  /**\n   * All messages, including log messages and in-flight messages.\n   */\n  messages: [],\n  /**\n   * Mutes and their expiration times.\n   */\n  mutedUsers: {},\n};\n\nfunction removeInFlightMessage(messages, remove) {\n  return messages.filter(message => (\n    // keep if this message is not in flight\n    !message.inFlight ||\n    // or is not the message we're looking for\n    message.userID !== remove.userID ||\n    message.text !== remove.text\n  ));\n}\n\nexport default function reduce(state = initialState, action = {}) {\n  const { type, payload } = action;\n  const { messages } = state;\n  switch (type) {\n    case INIT_STATE:\n      return {\n        ...state,\n        motd: payload.motd,\n      };\n    case RECEIVE_MOTD:\n      return {\n        ...state,\n        motd: payload,\n      };\n    case SEND_MESSAGE: {\n      const inFlightMessage = {\n        _id: `inflight${Date.now()}`,\n        type: 'chat',\n        user: payload.user,\n        userID: payload.user._id,\n        text: payload.message,\n        parsedText: payload.parsed,\n        timestamp: Date.now(),\n        inFlight: true,\n        // Will be resolved when the message is received instead.\n        isMention: false,\n      };\n      return {\n        ...state,\n        messages: messages.concat([inFlightMessage]),\n      };\n    }\n    case RECEIVE_MESSAGE: {\n      const message = {\n        ...payload.message,\n        type: 'chat',\n        inFlight: false,\n        parsedText: payload.parsed,\n        isMention: payload.isMention,\n      };\n\n      return {\n        ...state,\n        messages: removeInFlightMessage(messages, message).concat([message]),\n      };\n    }\n    case LOG: {\n      const logMessage = {\n        type: 'log',\n        _id: `log-${payload._id}`,\n        text: payload.text,\n      };\n      return {\n        ...state,\n        messages: messages.concat([logMessage]),\n      };\n    }\n\n    case REMOVE_MESSAGE:\n      return {\n        ...state,\n        messages: state.messages.filter(msg => msg._id !== payload._id),\n      };\n    case REMOVE_USER_MESSAGES:\n      return {\n        ...state,\n        messages: state.messages.filter(msg => msg.userID !== payload.userID),\n      };\n    case REMOVE_ALL_MESSAGES:\n      return {\n        ...state,\n        messages: [],\n      };\n\n    case MUTE_USER:\n      return {\n        ...state,\n        mutedUsers: {\n          ...state.mutedUsers,\n          [payload.userID]: {\n            mutedBy: payload.moderatorID,\n            expiresAt: payload.expiresAt,\n            expirationTimer: payload.expirationTimer,\n          },\n        },\n      };\n    case UNMUTE_USER:\n      return {\n        ...state,\n        mutedUsers: except(state.mutedUsers, payload.userID),\n      };\n\n    default: {\n      const nextMessages = reduceNotifications(messages, action);\n      if (nextMessages !== messages) {\n        return { ...state, messages: nextMessages };\n      }\n      return state;\n    }\n  }\n}\n"]}