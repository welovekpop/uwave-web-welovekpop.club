{"version":3,"sources":["reducers/chat.js"],"names":["reduce","initialState","motd","messages","mutedUsers","removeInFlightMessage","remove","filter","message","inFlight","userID","text","_extends2","state","arguments","length","undefined","action","type","payload","inFlightMessage","_id","Date","now","user","parsedText","parsed","timestamp","isMention","concat","logMessage","msg","mutedBy","moderatorID","expiresAt","expirationTimer","nextMessages"],"mappings":"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","file":"chat.js","sourcesContent":["import except from 'except';\nimport {\n  RECEIVE_MOTD,\n  RECEIVE_MESSAGE,\n  SEND_MESSAGE,\n  LOG,\n  REMOVE_MESSAGE,\n  REMOVE_USER_MESSAGES,\n  REMOVE_ALL_MESSAGES,\n  MUTE_USER,\n  UNMUTE_USER\n} from '../constants/ActionTypes';\nimport reduceNotifications from './chat/notifications';\n\nconst initialState = {\n  /**\n   * Message of the Day, a message shown at the very top of the Chat box. Can be\n   * used for announcements, for example, or a welcome message.\n   * Stored here as a parsed message, so an array of message tokens from the\n   * u-wave-parse-chat-markup module.\n   */\n  motd: [],\n  /**\n   * All messages, including log messages and in-flight messages.\n   */\n  messages: [],\n  /**\n   * Mutes and their expiration times.\n   */\n  mutedUsers: {}\n};\n\nfunction removeInFlightMessage(messages, remove) {\n  return messages.filter(message => (\n    // keep if this message is not in flight\n    !message.inFlight ||\n    // or is not the message we're looking for\n    message.userID !== remove.userID ||\n    message.text !== remove.text\n  ));\n}\n\nexport default function reduce(state = initialState, action = {}) {\n  const { type, payload } = action;\n  const { messages } = state;\n  switch (type) {\n  case RECEIVE_MOTD:\n    return {\n      ...state,\n      motd: payload\n    };\n  case SEND_MESSAGE: {\n    const inFlightMessage = {\n      _id: `inflight${Date.now()}`,\n      type: 'chat',\n      user: payload.user,\n      userID: payload.user._id,\n      text: payload.message,\n      parsedText: payload.parsed,\n      timestamp: Date.now(),\n      inFlight: true,\n      // Will be resolved when the message is received instead.\n      isMention: false\n    };\n    return {\n      ...state,\n      messages: messages.concat([ inFlightMessage ])\n    };\n  }\n  case RECEIVE_MESSAGE: {\n    const message = {\n      ...payload.message,\n      type: 'chat',\n      inFlight: false,\n      parsedText: payload.parsed,\n      isMention: payload.isMention\n    };\n\n    return {\n      ...state,\n      messages: removeInFlightMessage(messages, message).concat([ message ])\n    };\n  }\n  case LOG: {\n    const logMessage = {\n      type: 'log',\n      _id: `log-${payload._id}`,\n      text: payload.text\n    };\n    return {\n      ...state,\n      messages: messages.concat([ logMessage ])\n    };\n  }\n\n  case REMOVE_MESSAGE:\n    return {\n      ...state,\n      messages: state.messages.filter(msg => msg._id !== payload._id)\n    };\n  case REMOVE_USER_MESSAGES:\n    return {\n      ...state,\n      messages: state.messages.filter(msg => msg.userID !== payload.userID)\n    };\n  case REMOVE_ALL_MESSAGES:\n    return {\n      ...state,\n      messages: []\n    };\n\n  case MUTE_USER:\n    return {\n      ...state,\n      mutedUsers: {\n        ...state.mutedUsers,\n        [payload.userID]: {\n          mutedBy: payload.moderatorID,\n          expiresAt: payload.expiresAt,\n          expirationTimer: payload.expirationTimer\n        }\n      }\n    };\n  case UNMUTE_USER:\n    return {\n      ...state,\n      mutedUsers: except(state.mutedUsers, payload.userID)\n    };\n\n  default: {\n    const nextMessages = reduceNotifications(messages, action);\n    if (nextMessages !== messages) {\n      return { ...state, messages: nextMessages };\n    }\n    return state;\n  }\n  }\n}\n"]}