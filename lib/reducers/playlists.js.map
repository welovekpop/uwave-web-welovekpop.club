{"version":3,"sources":["reducers/playlists.js"],"names":["reduce","initialState","playlists","playlistItems","activePlaylistID","selectedPlaylistID","currentFilter","deselectAll","playlist","selected","processInsert","list","insert","position","insertIdx","at","length","after","media","_id","concat","slice","processMove","movedMedia","afterID","wasMoved","newPlaylist","filter","updatePlaylist","state","playlistID","modify","_extends2","updatePlaylistItems","_extends3","nextFilter","items","updatePlaylistAndItems","modifyPlaylist","modifyItems","newState","setPlaylistLoading","id","loading","arguments","undefined","fill","array","value","i","l","mergePlaylistPage","size","oldMedia","newMedia","_ref","page","pageSize","Array","forEach","item","filterCachedPlaylistItems","rx","RegExp","test","artist","title","_assign2","action","type","payload","meta","error","active","sneaky","map","newItems","_assign","tempId","name","description","shared","creating","renamedPlaylist","newSize","appendedMedia","added","mediaID","isMovingMedia","medias","isRemovingMedia","isRemovedMedia","removedMedia"],"mappings":"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","file":"playlists.js","sourcesContent":["import assign from 'object-assign';\nimport except from 'except';\nimport escapeStringRegExp from 'escape-string-regexp';\nimport findIndex from 'array-findindex';\nimport indexBy from 'index-by';\nimport mapObj from 'object.map';\n\nimport {\n  LOAD_ALL_PLAYLISTS_COMPLETE,\n  LOAD_PLAYLIST_START,\n  LOAD_PLAYLIST_COMPLETE,\n  PLAYLIST_CYCLED,\n  SELECT_PLAYLIST,\n  ACTIVATE_PLAYLIST_START,\n  ACTIVATE_PLAYLIST_COMPLETE,\n  CREATE_PLAYLIST_START,\n  CREATE_PLAYLIST_COMPLETE,\n  RENAME_PLAYLIST_START,\n  RENAME_PLAYLIST_COMPLETE,\n  DELETE_PLAYLIST_START,\n  DELETE_PLAYLIST_COMPLETE,\n  ADD_MEDIA_START,\n  ADD_MEDIA_COMPLETE,\n  REMOVE_MEDIA_START,\n  REMOVE_MEDIA_COMPLETE,\n  MOVE_MEDIA_START,\n  MOVE_MEDIA_COMPLETE,\n  UPDATE_MEDIA_START,\n  UPDATE_MEDIA_COMPLETE,\n  FILTER_PLAYLIST_ITEMS,\n  FILTER_PLAYLIST_ITEMS_COMPLETE\n} from '../constants/actionTypes/playlists';\nimport {\n  DO_FAVORITE_COMPLETE\n} from '../constants/actionTypes/votes';\nimport {\n  SEARCH_START\n} from '../constants/actionTypes/search';\n\nconst initialState = {\n  playlists: {},\n  playlistItems: {},\n  activePlaylistID: null,\n  selectedPlaylistID: null,\n  currentFilter: {}\n};\n\nfunction deselectAll(playlists) {\n  return mapObj(playlists, playlist => (\n    playlist.selected\n      ? { ...playlist, selected: false }\n      : playlist\n  ));\n}\n\nfunction processInsert(list, insert, position) {\n  let insertIdx = 0;\n  if (position.at === 'end') {\n    insertIdx = list.length;\n  } else if (position.at === 'start') {\n    insertIdx = 0;\n  } else if (position.after != null && position.after !== -1) {\n    insertIdx = findIndex(list, media => media !== null && media._id === position.after) + 1;\n  }\n  return [\n    ...list.slice(0, insertIdx),\n    ...insert,\n    ...list.slice(insertIdx)\n  ];\n}\n\n// Moves a list of media items to a given position in the playlist.\nfunction processMove(list, movedMedia, afterID) {\n  // Take all moved media items out of the playlist…\n  const wasMoved = indexBy(movedMedia, '_id');\n  const newPlaylist = list.filter(media => media === null || !wasMoved[media._id]);\n  // …and add them back in at the correct place.\n  return processInsert(newPlaylist, movedMedia, { after: afterID });\n}\n\nfunction updatePlaylist(state, playlistID, modify) {\n  const playlist = state.playlists[playlistID];\n  if (playlist) {\n    return {\n      ...state,\n      playlists: {\n        ...state.playlists,\n        [playlistID]: modify(playlist)\n      }\n    };\n  }\n  return state;\n}\n\n// Applies a function to the media list belonging to `playlistID` if it is found\n// locally, i.e. in either the active or the selected playlist.\nfunction updatePlaylistItems(state, playlistID, modify) {\n  const playlist = state.playlists[playlistID];\n  const media = state.playlistItems[playlistID];\n  if (playlist) {\n    let nextFilter = state.currentFilter;\n    if (state.selectedPlaylistID === playlistID && nextFilter) {\n      nextFilter = {\n        ...nextFilter,\n        items: modify(nextFilter.items || [], playlist)\n      };\n    }\n    return {\n      ...state,\n      playlistItems: {\n        ...state.playlistItems,\n        [playlistID]: modify(media || [], playlist)\n      },\n      currentFilter: nextFilter\n    };\n  }\n  return state;\n}\n\nfunction updatePlaylistAndItems(state, playlistID, modifyPlaylist, modifyItems) {\n  const newState = updatePlaylist(state, playlistID, modifyPlaylist);\n  return updatePlaylistItems(newState, playlistID, modifyItems);\n}\n\nfunction setPlaylistLoading(state, id, loading = true) {\n  return updatePlaylist(state, id, playlist => ({\n    ...playlist,\n    loading\n  }));\n}\n\nfunction fill(array, value) {\n  for (let i = 0, l = array.length; i < l; i += 1) {\n    array[i] = value; // eslint-disable-line no-param-reassign\n  }\n  return array;\n}\n\nfunction mergePlaylistPage(size, oldMedia, newMedia, { page, pageSize }) {\n  const media = fill(Array(size), null);\n  oldMedia.forEach((item, i) => {\n    media[i] = item;\n  });\n  newMedia.forEach((item, i) => {\n    media[(page * pageSize) + i] = item;\n  });\n  return media;\n}\n\nfunction filterCachedPlaylistItems(state, playlistID, filter) {\n  const rx = new RegExp(escapeStringRegExp(filter), 'i');\n  const playlist = state.playlistItems[playlistID];\n  if (playlist) {\n    return playlist.filter(item => item && (\n      rx.test(item.artist) || rx.test(item.title)\n    ));\n  }\n  return [];\n}\n\nexport default function reduce(state = initialState, action = {}) {\n  const { type, payload, meta, error } = action;\n\n  switch (type) {\n  case LOAD_ALL_PLAYLISTS_COMPLETE:\n    return {\n      ...state,\n      playlists: indexBy(payload.playlists, '_id')\n    };\n  case ACTIVATE_PLAYLIST_START:\n    // TODO use a different property here so we can show a loading icon on\n    // the \"Active\" button only, instead of on top of the entire playlist\n    return setPlaylistLoading(state, payload.playlistID);\n  case ACTIVATE_PLAYLIST_COMPLETE:\n    if (error) {\n      return setPlaylistLoading(state, meta.playlistID, false);\n    }\n\n    return {\n      ...state,\n      // set `active` property on all playlists\n      playlists: mapObj(state.playlists, playlist => ({\n        ...playlist,\n        loading: playlist._id === payload.playlistID ? false : playlist.loading,\n        active: playlist._id === payload.playlistID\n      })),\n      activePlaylistID: payload.playlistID\n    };\n  case SELECT_PLAYLIST:\n    return {\n      ...state,\n      // set `selected` property on playlists\n      playlists: mapObj(state.playlists, playlist => ({\n        ...playlist,\n        selected: playlist._id === payload.playlistID\n      })),\n      selectedPlaylistID: payload.playlistID\n    };\n  case SEARCH_START:\n    // We deselect playlists when doing a search, so the UI can switch to the\n    // search results view instead.\n    return {\n      ...state,\n      playlists: deselectAll(state.playlists),\n      selectedPlaylistID: null\n    };\n\n  case LOAD_PLAYLIST_START: {\n    if (meta.sneaky || meta.page !== 0 || state.playlistItems[payload.playlistID]) {\n      return state;\n    }\n\n    // Reserve space in the playlistItems array.\n    return updatePlaylistItems(\n      state,\n      payload.playlistID,\n      (items, playlist) => fill(Array(playlist.size), null)\n        .map((item, i) => items[i] || item)\n    );\n  }\n  case LOAD_PLAYLIST_COMPLETE:\n    if (error) {\n      return setPlaylistLoading(state, meta.playlistID, false);\n    }\n\n    return updatePlaylistAndItems(\n      state,\n      payload.playlistID,\n      playlist => ({ ...playlist, loading: false }),\n      items => mergePlaylistPage(meta.size, items, payload.media, meta)\n    );\n\n  case FILTER_PLAYLIST_ITEMS:\n    // Only the selected playlist can be filtered.\n    if (payload.playlistID !== state.selectedPlaylistID) {\n      return state;\n    }\n    if (!payload.filter) {\n      return {\n        ...state,\n        currentFilter: null\n      };\n    }\n    return {\n      ...state,\n      currentFilter: {\n        playlistID: payload.playlistID,\n        filter: payload.filter,\n        items: filterCachedPlaylistItems(state, payload.playlistID, payload.filter)\n      }\n    };\n  case FILTER_PLAYLIST_ITEMS_COMPLETE: {\n    // Only the selected playlist can be filtered.\n    if (payload.playlistID !== state.selectedPlaylistID) {\n      return state;\n    }\n    const currentFilter = state.currentFilter;\n    const items = mergePlaylistPage(meta.size, currentFilter.items, payload.media, meta);\n    return {\n      ...state,\n      currentFilter: { ...currentFilter, items }\n    };\n  }\n\n  case PLAYLIST_CYCLED:\n    return updatePlaylistItems(state, payload.playlistID, (items, playlist) => {\n      const newItems = items.slice(1);\n      newItems[playlist.size - 1] = items[0];\n      return newItems;\n    });\n\n  // here be dragons\n  // TODO find a simpler way to store this stuff, that doesn't involve keeping\n  // millions of properties (six properties to be precise) in sync\n  // Playlists that are being created have a temporary ID that is used until the\n  // real ID comes back from the server.\n  case CREATE_PLAYLIST_START: {\n    const newPlaylist = {\n      _id: meta.tempId,\n      name: payload.name,\n      description: payload.description,\n      shared: payload.shared,\n      selected: true,\n      creating: true\n    };\n    return {\n      ...state,\n      playlists: assign(\n        deselectAll(state.playlists),\n        { [meta.tempId]: newPlaylist }\n      ),\n      selectedPlaylistID: meta.tempId\n    };\n  }\n  case CREATE_PLAYLIST_COMPLETE:\n    if (error) {\n      return {\n        ...state,\n        playlists: except(state.playlists, `${meta.tempId}`)\n      };\n    }\n\n    return {\n      ...state,\n      playlists: assign(\n        deselectAll(except(state.playlists, `${meta.tempId}`)),\n        { [payload.playlist._id]: {\n          ...payload.playlist,\n          selected: true\n        } }\n      ),\n      selectedPlaylistID: payload.playlist._id\n    };\n\n  case RENAME_PLAYLIST_START:\n    return setPlaylistLoading(state, payload.playlistID);\n  case RENAME_PLAYLIST_COMPLETE: {\n    if (error) {\n      return setPlaylistLoading(state, meta.playlistID, false);\n    }\n\n    const renamedPlaylist = state.playlists[payload.playlistID];\n    if (renamedPlaylist) {\n      return updatePlaylist(state, payload.playlistID, playlist => ({\n        ...playlist,\n        name: payload.name,\n        loading: false\n      }));\n    }\n    return state;\n  }\n  case DELETE_PLAYLIST_START:\n    return setPlaylistLoading(state, payload.playlistID);\n  case DELETE_PLAYLIST_COMPLETE:\n    if (error) {\n      return setPlaylistLoading(state, meta.playlistID, false);\n    }\n\n    return {\n      ...state,\n      // When deleting the selected playlist, select the active playlist instead.\n      selectedPlaylistID: state.selectedPlaylistID === payload.playlistID\n        ? state.activePlaylistID\n        : state.selectedPlaylistID,\n      playlists: except(state.playlists, payload.playlistID)\n    };\n\n  case ADD_MEDIA_START:\n    return setPlaylistLoading(state, payload.playlistID);\n  case ADD_MEDIA_COMPLETE:\n    if (error) {\n      return setPlaylistLoading(state, meta.playlistID, false);\n    }\n\n    return updatePlaylistAndItems(\n      state,\n      payload.playlistID,\n      playlist => ({\n        ...playlist,\n        loading: false,\n        size: payload.newSize\n      }),\n      items => processInsert(items, payload.appendedMedia, { after: payload.afterID })\n    );\n  case DO_FAVORITE_COMPLETE:\n    return updatePlaylistAndItems(\n      state,\n      payload.playlistID,\n      playlist => ({\n        ...playlist,\n        size: payload.newSize\n      }),\n      items => processInsert(items, payload.added, { at: 'end' })\n    );\n\n  case UPDATE_MEDIA_START:\n    return updatePlaylistItems(state, payload.playlistID, items =>\n      items.map(media => (\n        media && media._id === payload.mediaID\n          ? { ...media, loading: true }\n          : media\n      ))\n    );\n  case UPDATE_MEDIA_COMPLETE:\n    return updatePlaylistItems(state, payload.playlistID, items =>\n      items.map(media => (\n        media && media._id === payload.mediaID\n          ? { ...media, ...payload.media, loading: false }\n          : media\n      ))\n    );\n\n  case MOVE_MEDIA_START: {\n    const isMovingMedia = indexBy(payload.medias, '_id');\n    return updatePlaylistItems(state, payload.playlistID, items =>\n      items.map(media => media && ({\n        ...media,\n        loading: isMovingMedia[media._id] || media.loading\n      }))\n    );\n  }\n  case MOVE_MEDIA_COMPLETE:\n    return updatePlaylistItems(state, payload.playlistID, items =>\n      processMove(items, payload.medias, payload.afterID)\n    );\n\n  case REMOVE_MEDIA_START: {\n    const isRemovingMedia = indexBy(payload.medias, '_id');\n    return updatePlaylistItems(state, payload.playlistID, items =>\n      items.map(media => media && ({\n        ...media,\n        loading: isRemovingMedia[media._id] || media.loading\n      }))\n    );\n  }\n  case REMOVE_MEDIA_COMPLETE: {\n    const isRemovedMedia = indexBy(payload.removedMedia, '_id');\n    return updatePlaylistAndItems(\n      state,\n      payload.playlistID,\n      playlist => ({ ...playlist, size: payload.newSize }),\n      items => items.filter(media => media === null || !isRemovedMedia[media._id])\n    );\n  }\n  default:\n    return state;\n  }\n}\n"]}