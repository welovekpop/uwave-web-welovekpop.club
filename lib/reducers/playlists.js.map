{"version":3,"sources":["reducers/playlists.js"],"names":["initialState","playlists","playlistItems","activePlaylistID","selectedPlaylistID","currentFilter","deselectAll","playlist","selected","processInsert","list","insert","position","insertIdx","at","length","after","media","_id","slice","concat","processMove","movedMedia","location","wasMoved","newPlaylist","filter","updatePlaylist","state","playlistID","modify","_extends2","updatePlaylistItems","_extends3","nextFilter","items","updatePlaylistAndItems","modifyPlaylist","modifyItems","newState","setPlaylistLoading","id","loading","fill","array","value","i","l","mergePlaylistPage","size","oldMedia","newMedia","_ref","page","pageSize","Array","forEach","item","filterCachedPlaylistItems","rx","RegExp","test","artist","title","reduce","action","_extends4","_assign2","_action","type","payload","meta","error","INIT_STATE","map","active","activePlaylist","firstActivePlaylistItem","LOAD_ALL_PLAYLISTS_COMPLETE","ACTIVATE_PLAYLIST_START","ACTIVATE_PLAYLIST_COMPLETE","SELECT_PLAYLIST","SEARCH_START","SEARCH_DELETE","LOAD_PLAYLIST_START","sneaky","LOAD_PLAYLIST_COMPLETE","FILTER_PLAYLIST_ITEMS","FILTER_PLAYLIST_ITEMS_COMPLETE","_state","PLAYLIST_CYCLED","newItems","CREATE_PLAYLIST_START","_assign","tempId","name","description","shared","creating","CREATE_PLAYLIST_COMPLETE","RENAME_PLAYLIST_START","RENAME_PLAYLIST_COMPLETE","renamedPlaylist","DELETE_PLAYLIST_START","DELETE_PLAYLIST_COMPLETE","ADD_MEDIA_START","ADD_MEDIA_COMPLETE","newSize","appendedMedia","afterID","DO_FAVORITE_COMPLETE","added","UPDATE_MEDIA_START","mediaID","UPDATE_MEDIA_COMPLETE","MOVE_MEDIA_START","isMovingMedia","medias","MOVE_MEDIA_COMPLETE","REMOVE_MEDIA_START","isRemovingMedia","REMOVE_MEDIA_COMPLETE","isRemovedMedia","removedMedia"],"mappings":"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","file":"playlists.js","sourcesContent":["import assign from 'object-assign';\nimport except from 'except';\nimport escapeStringRegExp from 'escape-string-regexp';\nimport findIndex from 'array-findindex';\nimport indexBy from 'index-by';\nimport mapObj from 'object.map';\n\nimport {\n  INIT_STATE,\n\n  LOAD_ALL_PLAYLISTS_COMPLETE,\n  LOAD_PLAYLIST_START,\n  LOAD_PLAYLIST_COMPLETE,\n  PLAYLIST_CYCLED,\n  SELECT_PLAYLIST,\n  ACTIVATE_PLAYLIST_START,\n  ACTIVATE_PLAYLIST_COMPLETE,\n  CREATE_PLAYLIST_START,\n  CREATE_PLAYLIST_COMPLETE,\n  RENAME_PLAYLIST_START,\n  RENAME_PLAYLIST_COMPLETE,\n  DELETE_PLAYLIST_START,\n  DELETE_PLAYLIST_COMPLETE,\n  ADD_MEDIA_START,\n  ADD_MEDIA_COMPLETE,\n  REMOVE_MEDIA_START,\n  REMOVE_MEDIA_COMPLETE,\n  MOVE_MEDIA_START,\n  MOVE_MEDIA_COMPLETE,\n  UPDATE_MEDIA_START,\n  UPDATE_MEDIA_COMPLETE,\n  FILTER_PLAYLIST_ITEMS,\n  FILTER_PLAYLIST_ITEMS_COMPLETE,\n\n  DO_FAVORITE_COMPLETE,\n\n  SEARCH_START,\n  SEARCH_DELETE,\n} from '../constants/ActionTypes';\n\nconst initialState = {\n  playlists: {},\n  playlistItems: {},\n  activePlaylistID: null,\n  selectedPlaylistID: null,\n  currentFilter: {},\n};\n\nfunction deselectAll(playlists) {\n  return mapObj(playlists, playlist => (\n    playlist.selected\n      ? { ...playlist, selected: false }\n      : playlist\n  ));\n}\n\nfunction processInsert(list, insert, position) {\n  let insertIdx = 0;\n  if (position.at === 'end') {\n    insertIdx = list.length;\n  } else if (position.at === 'start') {\n    insertIdx = 0;\n  } else if (position.after != null && position.after !== -1) {\n    insertIdx = findIndex(list, media => media !== null && media._id === position.after) + 1;\n  }\n  return [\n    ...list.slice(0, insertIdx),\n    ...insert,\n    ...list.slice(insertIdx),\n  ];\n}\n\n// Moves a list of media items to a given position in the playlist.\nfunction processMove(list, movedMedia, location) {\n  // Take all moved media items out of the playlist…\n  const wasMoved = indexBy(movedMedia, '_id');\n  const newPlaylist = list.filter(media => media === null || !wasMoved[media._id]);\n  // …and add them back in at the correct place.\n  return processInsert(newPlaylist, movedMedia, location);\n}\n\nfunction updatePlaylist(state, playlistID, modify) {\n  const playlist = state.playlists[playlistID];\n  if (playlist) {\n    return {\n      ...state,\n      playlists: {\n        ...state.playlists,\n        [playlistID]: modify(playlist),\n      },\n    };\n  }\n  return state;\n}\n\n// Applies a function to the media list belonging to `playlistID` if it is found\n// locally, i.e. in either the active or the selected playlist.\nfunction updatePlaylistItems(state, playlistID, modify) {\n  const playlist = state.playlists[playlistID];\n  const media = state.playlistItems[playlistID];\n  if (playlist) {\n    let nextFilter = state.currentFilter;\n    if (state.selectedPlaylistID === playlistID && nextFilter) {\n      nextFilter = {\n        ...nextFilter,\n        items: modify(nextFilter.items || [], playlist),\n      };\n    }\n    return {\n      ...state,\n      playlistItems: {\n        ...state.playlistItems,\n        [playlistID]: modify(media || [], playlist),\n      },\n      currentFilter: nextFilter,\n    };\n  }\n  return state;\n}\n\nfunction updatePlaylistAndItems(state, playlistID, modifyPlaylist, modifyItems) {\n  const newState = updatePlaylist(state, playlistID, modifyPlaylist);\n  return updatePlaylistItems(newState, playlistID, modifyItems);\n}\n\nfunction setPlaylistLoading(state, id, loading = true) {\n  return updatePlaylist(state, id, playlist => ({\n    ...playlist,\n    loading,\n  }));\n}\n\nfunction fill(array, value) {\n  for (let i = 0, l = array.length; i < l; i += 1) {\n    array[i] = value; // eslint-disable-line no-param-reassign\n  }\n  return array;\n}\n\nfunction mergePlaylistPage(size, oldMedia, newMedia, { page, pageSize }) {\n  const media = fill(Array(size), null);\n  oldMedia.forEach((item, i) => {\n    media[i] = item;\n  });\n  newMedia.forEach((item, i) => {\n    media[(page * pageSize) + i] = item;\n  });\n  return media;\n}\n\nfunction filterCachedPlaylistItems(state, playlistID, filter) {\n  const rx = new RegExp(escapeStringRegExp(filter), 'i');\n  const playlist = state.playlistItems[playlistID];\n  if (playlist) {\n    return playlist.filter(item => item && (\n      rx.test(item.artist) || rx.test(item.title)\n    ));\n  }\n  return [];\n}\n\nexport default function reduce(state = initialState, action = {}) {\n  const {\n    type, payload, meta, error,\n  } = action;\n\n  switch (type) {\n    case INIT_STATE:\n      // Probably not signed in.\n      if (!payload.playlists) return state;\n\n      return {\n        ...state,\n        playlists: indexBy(payload.playlists.map(playlist => ({\n          ...playlist,\n          active: playlist._id === payload.activePlaylist,\n          selected: playlist._id === payload.activePlaylist,\n        })), '_id'),\n        // Preload the first item in the active playlist so it can be shown in\n        // the footer bar immediately. Else it would flash \"This playlist is empty\"\n        // for a moment.\n        playlistItems: payload.activePlaylist && payload.firstActivePlaylistItem ? {\n          ...state.playlistItems,\n          [payload.activePlaylist]: [payload.firstActivePlaylistItem],\n        } : state.playlistItems,\n        activePlaylistID: payload.activePlaylist,\n        selectedPlaylistID: payload.activePlaylist,\n      };\n    case LOAD_ALL_PLAYLISTS_COMPLETE:\n      return {\n        ...state,\n        playlists: indexBy(payload.playlists, '_id'),\n      };\n    case ACTIVATE_PLAYLIST_START:\n    // TODO use a different property here so we can show a loading icon on\n    // the \"Active\" button only, instead of on top of the entire playlist\n      return setPlaylistLoading(state, payload.playlistID);\n    case ACTIVATE_PLAYLIST_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return {\n        ...state,\n        // set `active` property on all playlists\n        playlists: mapObj(state.playlists, playlist => ({\n          ...playlist,\n          loading: playlist._id === payload.playlistID ? false : playlist.loading,\n          active: playlist._id === payload.playlistID,\n        })),\n        activePlaylistID: payload.playlistID,\n      };\n    case SELECT_PLAYLIST:\n      return {\n        ...state,\n        // set `selected` property on playlists\n        playlists: mapObj(state.playlists, playlist => ({\n          ...playlist,\n          selected: playlist._id === payload.playlistID,\n        })),\n        selectedPlaylistID: payload.playlistID,\n      };\n    case SEARCH_START:\n    // We deselect playlists when doing a search, so the UI can switch to the\n    // search results view instead.\n      return {\n        ...state,\n        playlists: deselectAll(state.playlists),\n        selectedPlaylistID: null,\n      };\n    case SEARCH_DELETE:\n    // Select the active playlist when search results are closed while they\n    // were focused.\n      if (state.selectedPlaylistID) return state;\n\n      return {\n        ...state,\n        playlists: mapObj(state.playlists, playlist => ({\n          ...playlist,\n          selected: playlist.active,\n        })),\n        selectedPlaylistID: state.activePlaylistID,\n      };\n\n    case LOAD_PLAYLIST_START: {\n      if (meta.sneaky || meta.page !== 0 || state.playlistItems[payload.playlistID]) {\n        return state;\n      }\n\n      // Reserve space in the playlistItems array.\n      return updatePlaylistItems(\n        state,\n        payload.playlistID,\n        (items, playlist) => fill(Array(playlist.size), null)\n          .map((item, i) => items[i] || item),\n      );\n    }\n    case LOAD_PLAYLIST_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({ ...playlist, loading: false }),\n        items => mergePlaylistPage(meta.size, items, payload.media, meta),\n      );\n\n    case FILTER_PLAYLIST_ITEMS:\n    // Only the selected playlist can be filtered.\n      if (payload.playlistID !== state.selectedPlaylistID) {\n        return state;\n      }\n      if (!payload.filter) {\n        return {\n          ...state,\n          currentFilter: null,\n        };\n      }\n      return {\n        ...state,\n        currentFilter: {\n          playlistID: payload.playlistID,\n          filter: payload.filter,\n          items: filterCachedPlaylistItems(state, payload.playlistID, payload.filter),\n        },\n      };\n    case FILTER_PLAYLIST_ITEMS_COMPLETE: {\n    // Only the selected playlist can be filtered.\n      if (payload.playlistID !== state.selectedPlaylistID) {\n        return state;\n      }\n      const { currentFilter } = state;\n      const items = mergePlaylistPage(meta.size, currentFilter.items, payload.media, meta);\n      return {\n        ...state,\n        currentFilter: { ...currentFilter, items },\n      };\n    }\n\n    case PLAYLIST_CYCLED:\n      return updatePlaylistItems(state, payload.playlistID, (items, playlist) => {\n        const newItems = items.slice(1);\n        newItems[playlist.size - 1] = items[0]; // eslint-disable-line prefer-destructuring\n        return newItems;\n      });\n\n      // here be dragons\n      // TODO find a simpler way to store this stuff, that doesn't involve keeping\n      // millions of properties (six properties to be precise) in sync\n      // Playlists that are being created have a temporary ID that is used until the\n      // real ID comes back from the server.\n    case CREATE_PLAYLIST_START: {\n      const newPlaylist = {\n        _id: meta.tempId,\n        name: payload.name,\n        description: payload.description,\n        shared: payload.shared,\n        selected: true,\n        creating: true,\n      };\n      return {\n        ...state,\n        playlists: assign(\n          deselectAll(state.playlists),\n          { [meta.tempId]: newPlaylist },\n        ),\n        selectedPlaylistID: meta.tempId,\n      };\n    }\n    case CREATE_PLAYLIST_COMPLETE:\n      if (error) {\n        return {\n          ...state,\n          playlists: except(state.playlists, `${meta.tempId}`),\n        };\n      }\n\n      return {\n        ...state,\n        playlists: assign(\n          deselectAll(except(state.playlists, `${meta.tempId}`)),\n          {\n            [payload.playlist._id]: {\n              ...payload.playlist,\n              selected: true,\n            },\n          },\n        ),\n        selectedPlaylistID: payload.playlist._id,\n      };\n\n    case RENAME_PLAYLIST_START:\n      return setPlaylistLoading(state, payload.playlistID);\n    case RENAME_PLAYLIST_COMPLETE: {\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      const renamedPlaylist = state.playlists[payload.playlistID];\n      if (renamedPlaylist) {\n        return updatePlaylist(state, payload.playlistID, playlist => ({\n          ...playlist,\n          name: payload.name,\n          loading: false,\n        }));\n      }\n      return state;\n    }\n    case DELETE_PLAYLIST_START:\n      return setPlaylistLoading(state, payload.playlistID);\n    case DELETE_PLAYLIST_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return {\n        ...state,\n        // When deleting the selected playlist, select the active playlist instead.\n        selectedPlaylistID: state.selectedPlaylistID === payload.playlistID\n          ? state.activePlaylistID\n          : state.selectedPlaylistID,\n        playlists: except(state.playlists, payload.playlistID),\n      };\n\n    case ADD_MEDIA_START:\n      return setPlaylistLoading(state, payload.playlistID);\n    case ADD_MEDIA_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({\n          ...playlist,\n          loading: false,\n          size: payload.newSize,\n        }),\n        items => processInsert(items, payload.appendedMedia, { after: payload.afterID }),\n      );\n    case DO_FAVORITE_COMPLETE:\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({\n          ...playlist,\n          size: payload.newSize,\n        }),\n        items => processInsert(items, payload.added, { at: 'end' }),\n      );\n\n    case UPDATE_MEDIA_START:\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => (\n          media && media._id === payload.mediaID\n            ? { ...media, loading: true }\n            : media\n        )));\n    case UPDATE_MEDIA_COMPLETE:\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => (\n          media && media._id === payload.mediaID\n            ? { ...media, ...payload.media, loading: false }\n            : media\n        )));\n\n    case MOVE_MEDIA_START: {\n      const isMovingMedia = indexBy(payload.medias, '_id');\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => media && ({\n          ...media,\n          loading: isMovingMedia[media._id] || media.loading,\n        })));\n    }\n    case MOVE_MEDIA_COMPLETE:\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        processMove(items, payload.medias, payload.location));\n\n    case REMOVE_MEDIA_START: {\n      const isRemovingMedia = indexBy(payload.medias, '_id');\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => media && ({\n          ...media,\n          loading: isRemovingMedia[media._id] || media.loading,\n        })));\n    }\n    case REMOVE_MEDIA_COMPLETE: {\n      const isRemovedMedia = indexBy(payload.removedMedia, '_id');\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({ ...playlist, size: payload.newSize }),\n        items => items.filter(media => media === null || !isRemovedMedia[media._id]),\n      );\n    }\n    default:\n      return state;\n  }\n}\n"]}