{"version":3,"sources":["reducers/playlists.js"],"names":["initialState","playlists","playlistItems","activePlaylistID","selectedPlaylistID","currentFilter","deselectAll","playlist","selected","processInsert","list","insert","position","insertIdx","at","length","after","media","_id","slice","concat","processMove","movedMedia","location","wasMoved","newPlaylist","filter","updatePlaylist","state","playlistID","modify","_objectSpread2","updatePlaylistItems","_objectSpread3","nextFilter","items","updatePlaylistAndItems","modifyPlaylist","modifyItems","newState","setPlaylistLoading","id","loading","fill","array","value","i","l","mergePlaylistPage","size","oldMedia","newMedia","_ref","page","pageSize","Array","forEach","item","filterCachedPlaylistItems","rx","RegExp","test","artist","title","reduce","action","_assign2","_action","type","payload","meta","error","LOAD_ALL_PLAYLISTS_COMPLETE","ACTIVATE_PLAYLIST_START","ACTIVATE_PLAYLIST_COMPLETE","active","SELECT_PLAYLIST","SEARCH_START","SEARCH_DELETE","LOAD_PLAYLIST_START","sneaky","map","LOAD_PLAYLIST_COMPLETE","FILTER_PLAYLIST_ITEMS","FILTER_PLAYLIST_ITEMS_COMPLETE","_state","PLAYLIST_CYCLED","newItems","CREATE_PLAYLIST_START","_assign","tempId","name","description","shared","creating","CREATE_PLAYLIST_COMPLETE","RENAME_PLAYLIST_START","RENAME_PLAYLIST_COMPLETE","renamedPlaylist","DELETE_PLAYLIST_START","DELETE_PLAYLIST_COMPLETE","ADD_MEDIA_START","ADD_MEDIA_COMPLETE","newSize","appendedMedia","afterID","DO_FAVORITE_COMPLETE","added","UPDATE_MEDIA_START","mediaID","UPDATE_MEDIA_COMPLETE","MOVE_MEDIA_START","isMovingMedia","medias","MOVE_MEDIA_COMPLETE","REMOVE_MEDIA_START","isRemovingMedia","REMOVE_MEDIA_COMPLETE","isRemovedMedia","removedMedia"],"mappings":"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","file":"playlists.js","sourcesContent":["import assign from 'object-assign';\nimport except from 'except';\nimport escapeStringRegExp from 'escape-string-regexp';\nimport findIndex from 'array-findindex';\nimport indexBy from 'index-by';\nimport mapObj from 'object.map';\n\nimport {\n  LOAD_ALL_PLAYLISTS_COMPLETE,\n  LOAD_PLAYLIST_START,\n  LOAD_PLAYLIST_COMPLETE,\n  PLAYLIST_CYCLED,\n  SELECT_PLAYLIST,\n  ACTIVATE_PLAYLIST_START,\n  ACTIVATE_PLAYLIST_COMPLETE,\n  CREATE_PLAYLIST_START,\n  CREATE_PLAYLIST_COMPLETE,\n  RENAME_PLAYLIST_START,\n  RENAME_PLAYLIST_COMPLETE,\n  DELETE_PLAYLIST_START,\n  DELETE_PLAYLIST_COMPLETE,\n  ADD_MEDIA_START,\n  ADD_MEDIA_COMPLETE,\n  REMOVE_MEDIA_START,\n  REMOVE_MEDIA_COMPLETE,\n  MOVE_MEDIA_START,\n  MOVE_MEDIA_COMPLETE,\n  UPDATE_MEDIA_START,\n  UPDATE_MEDIA_COMPLETE,\n  FILTER_PLAYLIST_ITEMS,\n  FILTER_PLAYLIST_ITEMS_COMPLETE,\n} from '../constants/actionTypes/playlists';\nimport { DO_FAVORITE_COMPLETE } from '../constants/actionTypes/votes';\nimport {\n  SEARCH_START,\n  SEARCH_DELETE,\n} from '../constants/actionTypes/search';\n\nconst initialState = {\n  playlists: {},\n  playlistItems: {},\n  activePlaylistID: null,\n  selectedPlaylistID: null,\n  currentFilter: {},\n};\n\nfunction deselectAll(playlists) {\n  return mapObj(playlists, playlist => (\n    playlist.selected\n      ? { ...playlist, selected: false }\n      : playlist\n  ));\n}\n\nfunction processInsert(list, insert, position) {\n  let insertIdx = 0;\n  if (position.at === 'end') {\n    insertIdx = list.length;\n  } else if (position.at === 'start') {\n    insertIdx = 0;\n  } else if (position.after != null && position.after !== -1) {\n    insertIdx = findIndex(list, media => media !== null && media._id === position.after) + 1;\n  }\n  return [\n    ...list.slice(0, insertIdx),\n    ...insert,\n    ...list.slice(insertIdx),\n  ];\n}\n\n// Moves a list of media items to a given position in the playlist.\nfunction processMove(list, movedMedia, location) {\n  // Take all moved media items out of the playlist…\n  const wasMoved = indexBy(movedMedia, '_id');\n  const newPlaylist = list.filter(media => media === null || !wasMoved[media._id]);\n  // …and add them back in at the correct place.\n  return processInsert(newPlaylist, movedMedia, location);\n}\n\nfunction updatePlaylist(state, playlistID, modify) {\n  const playlist = state.playlists[playlistID];\n  if (playlist) {\n    return {\n      ...state,\n      playlists: {\n        ...state.playlists,\n        [playlistID]: modify(playlist),\n      },\n    };\n  }\n  return state;\n}\n\n// Applies a function to the media list belonging to `playlistID` if it is found\n// locally, i.e. in either the active or the selected playlist.\nfunction updatePlaylistItems(state, playlistID, modify) {\n  const playlist = state.playlists[playlistID];\n  const media = state.playlistItems[playlistID];\n  if (playlist) {\n    let nextFilter = state.currentFilter;\n    if (state.selectedPlaylistID === playlistID && nextFilter) {\n      nextFilter = {\n        ...nextFilter,\n        items: modify(nextFilter.items || [], playlist),\n      };\n    }\n    return {\n      ...state,\n      playlistItems: {\n        ...state.playlistItems,\n        [playlistID]: modify(media || [], playlist),\n      },\n      currentFilter: nextFilter,\n    };\n  }\n  return state;\n}\n\nfunction updatePlaylistAndItems(state, playlistID, modifyPlaylist, modifyItems) {\n  const newState = updatePlaylist(state, playlistID, modifyPlaylist);\n  return updatePlaylistItems(newState, playlistID, modifyItems);\n}\n\nfunction setPlaylistLoading(state, id, loading = true) {\n  return updatePlaylist(state, id, playlist => ({\n    ...playlist,\n    loading,\n  }));\n}\n\nfunction fill(array, value) {\n  for (let i = 0, l = array.length; i < l; i += 1) {\n    array[i] = value; // eslint-disable-line no-param-reassign\n  }\n  return array;\n}\n\nfunction mergePlaylistPage(size, oldMedia, newMedia, { page, pageSize }) {\n  const media = fill(Array(size), null);\n  oldMedia.forEach((item, i) => {\n    media[i] = item;\n  });\n  newMedia.forEach((item, i) => {\n    media[(page * pageSize) + i] = item;\n  });\n  return media;\n}\n\nfunction filterCachedPlaylistItems(state, playlistID, filter) {\n  const rx = new RegExp(escapeStringRegExp(filter), 'i');\n  const playlist = state.playlistItems[playlistID];\n  if (playlist) {\n    return playlist.filter(item => item && (\n      rx.test(item.artist) || rx.test(item.title)\n    ));\n  }\n  return [];\n}\n\nexport default function reduce(state = initialState, action = {}) {\n  const {\n    type, payload, meta, error,\n  } = action;\n\n  switch (type) {\n    case LOAD_ALL_PLAYLISTS_COMPLETE:\n      return {\n        ...state,\n        playlists: indexBy(payload.playlists, '_id'),\n      };\n    case ACTIVATE_PLAYLIST_START:\n    // TODO use a different property here so we can show a loading icon on\n    // the \"Active\" button only, instead of on top of the entire playlist\n      return setPlaylistLoading(state, payload.playlistID);\n    case ACTIVATE_PLAYLIST_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return {\n        ...state,\n        // set `active` property on all playlists\n        playlists: mapObj(state.playlists, playlist => ({\n          ...playlist,\n          loading: playlist._id === payload.playlistID ? false : playlist.loading,\n          active: playlist._id === payload.playlistID,\n        })),\n        activePlaylistID: payload.playlistID,\n      };\n    case SELECT_PLAYLIST:\n      return {\n        ...state,\n        // set `selected` property on playlists\n        playlists: mapObj(state.playlists, playlist => ({\n          ...playlist,\n          selected: playlist._id === payload.playlistID,\n        })),\n        selectedPlaylistID: payload.playlistID,\n      };\n    case SEARCH_START:\n    // We deselect playlists when doing a search, so the UI can switch to the\n    // search results view instead.\n      return {\n        ...state,\n        playlists: deselectAll(state.playlists),\n        selectedPlaylistID: null,\n      };\n    case SEARCH_DELETE:\n    // Select the active playlist when search results are closed while they\n    // were focused.\n      if (state.selectedPlaylistID) return state;\n\n      return {\n        ...state,\n        playlists: mapObj(state.playlists, playlist => ({\n          ...playlist,\n          selected: playlist.active,\n        })),\n        selectedPlaylistID: state.activePlaylistID,\n      };\n\n    case LOAD_PLAYLIST_START: {\n      if (meta.sneaky || meta.page !== 0 || state.playlistItems[payload.playlistID]) {\n        return state;\n      }\n\n      // Reserve space in the playlistItems array.\n      return updatePlaylistItems(\n        state,\n        payload.playlistID,\n        (items, playlist) => fill(Array(playlist.size), null)\n          .map((item, i) => items[i] || item),\n      );\n    }\n    case LOAD_PLAYLIST_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({ ...playlist, loading: false }),\n        items => mergePlaylistPage(meta.size, items, payload.media, meta),\n      );\n\n    case FILTER_PLAYLIST_ITEMS:\n    // Only the selected playlist can be filtered.\n      if (payload.playlistID !== state.selectedPlaylistID) {\n        return state;\n      }\n      if (!payload.filter) {\n        return {\n          ...state,\n          currentFilter: null,\n        };\n      }\n      return {\n        ...state,\n        currentFilter: {\n          playlistID: payload.playlistID,\n          filter: payload.filter,\n          items: filterCachedPlaylistItems(state, payload.playlistID, payload.filter),\n        },\n      };\n    case FILTER_PLAYLIST_ITEMS_COMPLETE: {\n    // Only the selected playlist can be filtered.\n      if (payload.playlistID !== state.selectedPlaylistID) {\n        return state;\n      }\n      const { currentFilter } = state;\n      const items = mergePlaylistPage(meta.size, currentFilter.items, payload.media, meta);\n      return {\n        ...state,\n        currentFilter: { ...currentFilter, items },\n      };\n    }\n\n    case PLAYLIST_CYCLED:\n      return updatePlaylistItems(state, payload.playlistID, (items, playlist) => {\n        const newItems = items.slice(1);\n        newItems[playlist.size - 1] = items[0]; // eslint-disable-line prefer-destructuring\n        return newItems;\n      });\n\n      // here be dragons\n      // TODO find a simpler way to store this stuff, that doesn't involve keeping\n      // millions of properties (six properties to be precise) in sync\n      // Playlists that are being created have a temporary ID that is used until the\n      // real ID comes back from the server.\n    case CREATE_PLAYLIST_START: {\n      const newPlaylist = {\n        _id: meta.tempId,\n        name: payload.name,\n        description: payload.description,\n        shared: payload.shared,\n        selected: true,\n        creating: true,\n      };\n      return {\n        ...state,\n        playlists: assign(\n          deselectAll(state.playlists),\n          { [meta.tempId]: newPlaylist },\n        ),\n        selectedPlaylistID: meta.tempId,\n      };\n    }\n    case CREATE_PLAYLIST_COMPLETE:\n      if (error) {\n        return {\n          ...state,\n          playlists: except(state.playlists, `${meta.tempId}`),\n        };\n      }\n\n      return {\n        ...state,\n        playlists: assign(\n          deselectAll(except(state.playlists, `${meta.tempId}`)),\n          {\n            [payload.playlist._id]: {\n              ...payload.playlist,\n              selected: true,\n            },\n          },\n        ),\n        selectedPlaylistID: payload.playlist._id,\n      };\n\n    case RENAME_PLAYLIST_START:\n      return setPlaylistLoading(state, payload.playlistID);\n    case RENAME_PLAYLIST_COMPLETE: {\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      const renamedPlaylist = state.playlists[payload.playlistID];\n      if (renamedPlaylist) {\n        return updatePlaylist(state, payload.playlistID, playlist => ({\n          ...playlist,\n          name: payload.name,\n          loading: false,\n        }));\n      }\n      return state;\n    }\n    case DELETE_PLAYLIST_START:\n      return setPlaylistLoading(state, payload.playlistID);\n    case DELETE_PLAYLIST_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return {\n        ...state,\n        // When deleting the selected playlist, select the active playlist instead.\n        selectedPlaylistID: state.selectedPlaylistID === payload.playlistID\n          ? state.activePlaylistID\n          : state.selectedPlaylistID,\n        playlists: except(state.playlists, payload.playlistID),\n      };\n\n    case ADD_MEDIA_START:\n      return setPlaylistLoading(state, payload.playlistID);\n    case ADD_MEDIA_COMPLETE:\n      if (error) {\n        return setPlaylistLoading(state, meta.playlistID, false);\n      }\n\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({\n          ...playlist,\n          loading: false,\n          size: payload.newSize,\n        }),\n        items => processInsert(items, payload.appendedMedia, { after: payload.afterID }),\n      );\n    case DO_FAVORITE_COMPLETE:\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({\n          ...playlist,\n          size: payload.newSize,\n        }),\n        items => processInsert(items, payload.added, { at: 'end' }),\n      );\n\n    case UPDATE_MEDIA_START:\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => (\n          media && media._id === payload.mediaID\n            ? { ...media, loading: true }\n            : media\n        )));\n    case UPDATE_MEDIA_COMPLETE:\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => (\n          media && media._id === payload.mediaID\n            ? { ...media, ...payload.media, loading: false }\n            : media\n        )));\n\n    case MOVE_MEDIA_START: {\n      const isMovingMedia = indexBy(payload.medias, '_id');\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => media && ({\n          ...media,\n          loading: isMovingMedia[media._id] || media.loading,\n        })));\n    }\n    case MOVE_MEDIA_COMPLETE:\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        processMove(items, payload.medias, payload.location));\n\n    case REMOVE_MEDIA_START: {\n      const isRemovingMedia = indexBy(payload.medias, '_id');\n      return updatePlaylistItems(state, payload.playlistID, items =>\n        items.map(media => media && ({\n          ...media,\n          loading: isRemovingMedia[media._id] || media.loading,\n        })));\n    }\n    case REMOVE_MEDIA_COMPLETE: {\n      const isRemovedMedia = indexBy(payload.removedMedia, '_id');\n      return updatePlaylistAndItems(\n        state,\n        payload.playlistID,\n        playlist => ({ ...playlist, size: payload.newSize }),\n        items => items.filter(media => media === null || !isRemovedMedia[media._id]),\n      );\n    }\n    default:\n      return state;\n  }\n}\n"]}