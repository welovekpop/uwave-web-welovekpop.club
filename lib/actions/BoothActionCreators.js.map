{"version":3,"sources":["actions/BoothActionCreators.js"],"names":["advanceToEmpty","dispatch","getState","type","ADVANCE","payload","meta","previous","advance","nextBooth","historyID","media","userID","playlistID","playedAt","user","timestamp","skipSelf","opts","remove","Promise","reject","Error","skipped","_ref","moderatorID","reason","users","BOOTH_SKIP","moderator","Date","now","loadHistoryStart","LOAD_HISTORY_START","loadHistoryComplete","response","currentHistoryID","playHistory","_id","slice","LOAD_HISTORY_COMPLETE","page","Math","floor","offset","pageSize","size","loadHistory","onStart","onComplete"],"mappings":"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","file":"BoothActionCreators.js","sourcesContent":["import {\n  ADVANCE,\n  BOOTH_SKIP,\n  LOAD_HISTORY_START, LOAD_HISTORY_COMPLETE,\n} from '../constants/actionTypes/booth';\nimport { flattenPlaylistItem } from './PlaylistActionCreators';\nimport { get, post } from './RequestActionCreators';\n\nimport { historyIDSelector, isCurrentDJSelector } from '../selectors/boothSelectors';\nimport { currentPlaySelector } from '../selectors/roomHistorySelectors';\nimport { usersSelector } from '../selectors/userSelectors';\nimport mergeIncludedModels from '../utils/mergeIncludedModels';\n\nexport function advanceToEmpty() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADVANCE,\n      payload: null,\n      meta: { previous: currentPlaySelector(getState()) },\n    });\n  };\n}\n\n/**\n * Set the current song and DJ.\n */\nexport function advance(nextBooth) {\n  if (!nextBooth || !nextBooth.historyID) {\n    return advanceToEmpty();\n  }\n  const {\n    media, userID, historyID, playlistID, playedAt,\n  } = nextBooth;\n  return (dispatch, getState) => {\n    const user = usersSelector(getState())[userID];\n    dispatch({\n      type: ADVANCE,\n      payload: {\n        userID,\n        historyID,\n        playlistID,\n        user,\n        media: flattenPlaylistItem(media),\n        timestamp: playedAt,\n      },\n      meta: {\n        previous: currentPlaySelector(getState()),\n      },\n    });\n  };\n}\n\nexport function skipSelf(opts = {}) {\n  const remove = !!opts.remove;\n  return (dispatch, getState) => {\n    if (isCurrentDJSelector(getState())) {\n      return dispatch(post('/booth/skip', { remove }));\n    }\n    return Promise.reject(new Error('You\\'re not currently playing.'));\n  };\n}\n\nexport function skipped({ userID, moderatorID, reason }) {\n  return (dispatch, getState) => {\n    const users = usersSelector(getState());\n    dispatch({\n      type: BOOTH_SKIP,\n      payload: {\n        user: users[userID],\n        moderator: users[moderatorID],\n        reason,\n        timestamp: Date.now(),\n      },\n    });\n  };\n}\n\nexport function loadHistoryStart() {\n  return { type: LOAD_HISTORY_START };\n}\n\nexport function loadHistoryComplete(response) {\n  return (dispatch, getState) => {\n    const currentHistoryID = historyIDSelector(getState());\n    const { meta } = response;\n    let playHistory = mergeIncludedModels(response);\n    if (playHistory[0] && playHistory[0]._id === currentHistoryID) {\n      playHistory = playHistory.slice(1);\n    }\n    dispatch({\n      type: LOAD_HISTORY_COMPLETE,\n      payload: playHistory,\n      meta: {\n        page: Math.floor(meta.offset / meta.pageSize),\n        size: meta.pageSize,\n      },\n    });\n  };\n}\n\nexport function loadHistory() {\n  return get('/booth/history', {\n    onStart: loadHistoryStart,\n    onComplete: loadHistoryComplete,\n  });\n}\n"]}