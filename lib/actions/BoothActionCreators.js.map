{"version":3,"sources":["actions/BoothActionCreators.js"],"names":["advanceToEmpty","advance","skipSelf","loadHistoryStart","loadHistoryComplete","loadHistory","dispatch","getState","type","payload","meta","previous","nextBooth","historyID","media","userID","playlistID","playedAt","user","timestamp","opts","arguments","length","undefined","remove","Promise","reject","Error","response","currentHistoryID","playHistory","_id","slice","page","Math","floor","offset","pageSize","size","onStart","onComplete"],"mappings":";;;;;QASgBA,c,GAAAA,c;QAaAC,O,GAAAA,O;QA6BAC,Q,GAAAA,Q;QAYAC,gB,GAAAA,gB;QAIAC,mB,GAAAA,mB;QAoBAC,W,GAAAA,W;;AAvFhB;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;AAEO,SAASL,cAAT,GAA0B;AAC/B,SAAO,UAAUM,QAAV,EAAoBC,QAApB,EAA8B;AACnCD,aAAS;AACPE,0BADO;AAEPC,eAAS,IAFF;AAGPC,YAAM,EAAEC,UAAU,+CAAoBJ,UAApB,CAAZ;AAHC,KAAT;AAKD,GAND;AAOD;;AAED;;;AAGO,SAASN,OAAT,CAAiBW,SAAjB,EAA4B;AACjC,MAAI,CAACA,SAAD,IAAc,CAACA,UAAUC,SAA7B,EAAwC;AACtC,WAAOb,gBAAP;AACD;AACD,MAAIc,QAAQF,UAAUE,KAAtB;AAAA,MACIC,SAASH,UAAUG,MADvB;AAAA,MAEIF,YAAYD,UAAUC,SAF1B;AAAA,MAGIG,aAAaJ,UAAUI,UAH3B;AAAA,MAIIC,WAAWL,UAAUK,QAJzB;;AAMA,SAAO,UAAUX,QAAV,EAAoBC,QAApB,EAA8B;AACnC,QAAIW,OAAO,kCAAcX,UAAd,EAA0BQ,MAA1B,CAAX;AACAT,aAAS;AACPE,0BADO;AAEPC,eAAS;AACPM,gBAAQA,MADD;AAEPF,mBAAWA,SAFJ;AAGPG,oBAAYA,UAHL;AAIPE,cAAMA,IAJC;AAKPJ,eAAO,iDAAoBA,KAApB,CALA;AAMPK,mBAAWF;AANJ,OAFF;AAUPP,YAAM;AACJC,kBAAU,+CAAoBJ,UAApB;AADN;AAVC,KAAT;AAcD,GAhBD;AAiBD;;AAEM,SAASL,QAAT,GAAoB;AACzB,MAAIkB,OAAOC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAA/E;;AAEA,MAAIG,SAAS,CAAC,CAACJ,KAAKI,MAApB;AACA,SAAO,UAAUlB,QAAV,EAAoBC,QAApB,EAA8B;AACnC,QAAI,yCAAoBA,UAApB,CAAJ,EAAqC;AACnC,aAAOD,SAAS,iCAAK,aAAL,EAAoB,EAAEkB,QAAQA,MAAV,EAApB,CAAT,CAAP;AACD;AACD,WAAOC,QAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gCAAV,CAAf,CAAP;AACD,GALD;AAMD;;AAEM,SAASxB,gBAAT,GAA4B;AACjC,SAAO,EAAEK,+BAAF,EAAP;AACD;;AAEM,SAASJ,mBAAT,CAA6BwB,QAA7B,EAAuC;AAC5C,SAAO,UAAUtB,QAAV,EAAoBC,QAApB,EAA8B;AACnC,QAAIsB,mBAAmB,uCAAkBtB,UAAlB,CAAvB;AACA,QAAIG,OAAOkB,SAASlB,IAApB;;AAEA,QAAIoB,cAAc,mCAAoBF,QAApB,CAAlB;AACA,QAAIE,YAAY,CAAZ,KAAkBA,YAAY,CAAZ,EAAeC,GAAf,KAAuBF,gBAA7C,EAA+D;AAC7DC,oBAAcA,YAAYE,KAAZ,CAAkB,CAAlB,CAAd;AACD;AACD1B,aAAS;AACPE,wCADO;AAEPC,eAASqB,WAFF;AAGPpB,YAAM;AACJuB,cAAMC,KAAKC,KAAL,CAAWzB,KAAK0B,MAAL,GAAc1B,KAAK2B,QAA9B,CADF;AAEJC,cAAM5B,KAAK2B;AAFP;AAHC,KAAT;AAQD,GAhBD;AAiBD;;AAEM,SAAShC,WAAT,GAAuB;AAC5B,SAAO,gCAAI,gBAAJ,EAAsB;AAC3BkC,aAASpC,gBADkB;AAE3BqC,gBAAYpC;AAFe,GAAtB,CAAP;AAID;AACD","file":"BoothActionCreators.js","sourcesContent":["import {\n  ADVANCE,\n  LOAD_HISTORY_START, LOAD_HISTORY_COMPLETE\n} from '../constants/actionTypes/booth';\nimport { flattenPlaylistItem } from './PlaylistActionCreators';\nimport { get, post } from './RequestActionCreators';\n\nimport { historyIDSelector, isCurrentDJSelector } from '../selectors/boothSelectors';\nimport { currentPlaySelector } from '../selectors/roomHistorySelectors';\nimport { usersSelector } from '../selectors/userSelectors';\nimport mergeIncludedModels from '../utils/mergeIncludedModels';\n\nexport function advanceToEmpty() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADVANCE,\n      payload: null,\n      meta: { previous: currentPlaySelector(getState()) }\n    });\n  };\n}\n\n/**\n * Set the current song and DJ.\n */\nexport function advance(nextBooth) {\n  if (!nextBooth || !nextBooth.historyID) {\n    return advanceToEmpty();\n  }\n  const { media, userID, historyID, playlistID, playedAt } = nextBooth;\n  return (dispatch, getState) => {\n    const user = usersSelector(getState())[userID];\n    dispatch({\n      type: ADVANCE,\n      payload: {\n        userID,\n        historyID,\n        playlistID,\n        user,\n        media: flattenPlaylistItem(media),\n        timestamp: playedAt\n      },\n      meta: {\n        previous: currentPlaySelector(getState())\n      }\n    });\n  };\n}\n\nexport function skipSelf(opts = {}) {\n  const remove = !!opts.remove;\n  return (dispatch, getState) => {\n    if (isCurrentDJSelector(getState())) {\n      return dispatch(post('/booth/skip', { remove }));\n    }\n    return Promise.reject(new Error('You\\'re not currently playing.'));\n  };\n}\n\nexport function loadHistoryStart() {\n  return { type: LOAD_HISTORY_START };\n}\n\nexport function loadHistoryComplete(response) {\n  return (dispatch, getState) => {\n    const currentHistoryID = historyIDSelector(getState());\n    const { meta } = response;\n    let playHistory = mergeIncludedModels(response);\n    if (playHistory[0] && playHistory[0]._id === currentHistoryID) {\n      playHistory = playHistory.slice(1);\n    }\n    dispatch({\n      type: LOAD_HISTORY_COMPLETE,\n      payload: playHistory,\n      meta: {\n        page: Math.floor(meta.offset / meta.pageSize),\n        size: meta.pageSize\n      }\n    });\n  };\n}\n\nexport function loadHistory() {\n  return get('/booth/history', {\n    onStart: loadHistoryStart,\n    onComplete: loadHistoryComplete\n  });\n}\n"]}