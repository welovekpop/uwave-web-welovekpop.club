{"version":3,"sources":["actions/LoginActionCreators.js"],"names":["socketConnect","socketReconnect","loginComplete","loadedState","initState","setJWT","login","register","logout","resetPassword","Session","debug","type","_ref","jwt","user","dispatch","payload","state","getState","motd","users","playlists","waitlist","locked","waitlistLocked","booth","historyID","stats","token","activePlaylist","beforeTime","Date","now","onStart","onComplete","time","loginStart","_ref2","email","password","res","set","meta","onError","error","_ref3","username","grecaptcha","data","then","matchMedia","matches","logoutStart","logoutComplete","me","unset"],"mappings":"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","file":"LoginActionCreators.js","sourcesContent":["import createDebug from 'debug';\nimport {\n  INIT_STATE,\n  SOCKET_CONNECT,\n  SOCKET_RECONNECT,\n\n  REGISTER_START,\n  REGISTER_COMPLETE,\n  LOGIN_START,\n  LOGIN_COMPLETE,\n  SET_TOKEN,\n  LOGOUT_START,\n  LOGOUT_COMPLETE,\n\n  RESET_PASSWORD_COMPLETE\n} from '../constants/actionTypes/auth';\nimport { LOAD_ALL_PLAYLISTS_START } from '../constants/actionTypes/playlists';\nimport * as Session from '../utils/Session';\nimport { get, post } from './RequestActionCreators';\nimport { advance, loadHistory } from './BoothActionCreators';\nimport { receiveMotd } from './ChatActionCreators';\nimport {\n  setPlaylists, selectPlaylist, activatePlaylistComplete\n} from './PlaylistActionCreators';\nimport { syncTimestamps } from './TickerActionCreators';\nimport { closeLoginDialog } from './DialogActionCreators';\nimport { setUsers } from './UserActionCreators';\nimport { setVoteStats } from './VoteActionCreators';\nimport { setWaitList } from './WaitlistActionCreators';\nimport { currentUserSelector, tokenSelector } from '../selectors/userSelectors';\nimport startTutorial from '../_wlk/startTutorial';\n\nconst debug = createDebug('uwave:actions:login');\n\nexport function socketConnect() {\n  return { type: SOCKET_CONNECT };\n}\n\nexport function socketReconnect() {\n  return { type: SOCKET_RECONNECT };\n}\n\nexport function loginComplete({ jwt, user }) {\n  return (dispatch) => {\n    dispatch({\n      type: LOGIN_COMPLETE,\n      payload: { jwt, user }\n    });\n    dispatch(closeLoginDialog());\n  };\n}\n\nexport function loadedState(state) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: INIT_STATE,\n      payload: state\n    });\n    if (state.motd) {\n      dispatch(receiveMotd(state.motd));\n    }\n    dispatch(setUsers(state.users || []));\n    dispatch(setPlaylists(state.playlists || []));\n    dispatch(setWaitList({\n      waitlist: state.waitlist,\n      locked: state.waitlistLocked\n    }));\n    if (state.booth && state.booth.historyID) {\n      // TODO don't set this when logging in _after_ entering the page?\n      dispatch(advance(state.booth));\n      dispatch(setVoteStats(state.booth.stats));\n    }\n    if (state.user) {\n      const token = tokenSelector(getState());\n      dispatch(loginComplete({\n        jwt: token,\n        user: state.user\n      }));\n    }\n    if (state.activePlaylist) {\n      dispatch(activatePlaylistComplete(state.activePlaylist));\n      dispatch(selectPlaylist(state.activePlaylist));\n    }\n  };\n}\n\nexport function initState() {\n  const beforeTime = Date.now();\n\n  return get('/now', {\n    onStart: () => ({ type: LOAD_ALL_PLAYLISTS_START }),\n    onComplete: state => (dispatch) => {\n      dispatch(syncTimestamps(beforeTime, state.time));\n      dispatch(loadedState(state));\n      dispatch(loadHistory());\n    }\n  });\n}\n\nexport function setJWT(jwt) {\n  return {\n    type: SET_TOKEN,\n    payload: { jwt }\n  };\n}\n\nfunction loginStart() {\n  return { type: LOGIN_START };\n}\n\nexport function login({ email, password }) {\n  return post('/auth/login', { email, password }, {\n    onStart: loginStart,\n    onComplete: res => (dispatch) => {\n      Session.set(res.meta.jwt);\n      dispatch(setJWT(res.meta.jwt));\n      dispatch(initState());\n    },\n    onError: error => ({\n      type: LOGIN_COMPLETE,\n      error: true,\n      payload: error\n    })\n  });\n}\n\nexport function register({ email, username, password, grecaptcha }) {\n  return post('/auth/register', { email, username, password, grecaptcha }, {\n    onStart: () => ({ type: REGISTER_START }),\n    onComplete: res => (dispatch) => {\n      const user = res.data;\n      debug('registered', user);\n      dispatch({\n        type: REGISTER_COMPLETE,\n        payload: { user }\n      });\n      dispatch(login({ email, password }))\n        .then(() => {\n          if (matchMedia('(min-width: 769px)').matches) {\n            return startTutorial();\n          }\n        });\n    },\n    onError: error => ({\n      type: REGISTER_COMPLETE,\n      error: true,\n      payload: error\n    })\n  });\n}\n\nfunction logoutStart() {\n  return { type: LOGOUT_START };\n}\n\nfunction logoutComplete() {\n  return (dispatch) => {\n    dispatch({ type: LOGOUT_COMPLETE });\n    dispatch(setPlaylists([]));\n  };\n}\n\nexport function logout() {\n  return (dispatch, getState) => {\n    const me = currentUserSelector(getState());\n    dispatch(logoutStart());\n    Session.unset();\n    if (me) {\n      dispatch(logoutComplete());\n      dispatch(socketReconnect());\n    } else {\n      dispatch(logoutComplete());\n    }\n  };\n}\n\nexport function resetPassword(email) {\n  return post('/auth/password/reset', email, {\n    onStart: () => ({\n      type: RESET_PASSWORD_COMPLETE,\n      payload: 'Successfully sent password reset email'\n    }),\n    onComplete: token => (dispatch) => {\n      debug('reset token: ', token);\n      dispatch(closeLoginDialog());\n    },\n    onError: error => ({\n      type: RESET_PASSWORD_COMPLETE,\n      error: true,\n      payload: error\n    })\n  });\n}\n"]}