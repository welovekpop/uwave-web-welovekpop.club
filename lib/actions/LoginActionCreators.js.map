{"version":3,"sources":["actions/LoginActionCreators.js"],"names":["socketConnect","socketReconnect","setAuthenticationStrategies","loginComplete","loadedState","initState","setSessionToken","login","register","logout","resetPassword","getSocketAuthToken","loginWithGoogle","Session","debug","type","strategies","payload","_ref","token","socketToken","user","dispatch","state","getState","motd","authStrategies","users","playlists","waitlist","locked","waitlistLocked","booth","historyID","stats","activePlaylist","beforeTime","Date","now","onStart","onComplete","time","loginStart","_ref2","email","password","sessionType","preferredSessionType","res","set","meta","jwt","onError","error","_ref3","username","grecaptcha","data","then","matchMedia","matches","logoutStart","logoutComplete","unset","whenWindowClosed","window","Promise","resolve","i","setInterval","closed","clearInterval","socialLogin","service","apiUrl","config","loginWindow","open"],"mappings":";;;;;QAkBgBA,a,GAAAA,a;QAIAC,e,GAAAA,e;QAIAC,2B,GAAAA,2B;QAOAC,a,GAAAA,a;QAkBAC,W,GAAAA,W;QAoCAC,S,GAAAA,S;QAiBAC,e,GAAAA,e;QAWAC,K,GAAAA,K;QAwBAC,Q,GAAAA,Q;QAiDAC,M,GAAAA,M;QAYAC,a,GAAAA,a;QAkBAC,kB,GAAAA,kB;QAiCAC,e,GAAAA,e;;AA3PhB;;;;AACA;;AACA;;AACA;;IAAYC,O;;AACZ;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAIC,QAAQ,qBAAY,qBAAZ,CAAZ;;AAEO,SAASd,aAAT,GAAyB;AAC9B,SAAO,EAAEe,0BAAF,EAAP;AACD;;AAEM,SAASd,eAAT,GAA2B;AAChC,SAAO,EAAEc,4BAAF,EAAP;AACD;;AAEM,SAASb,2BAAT,CAAqCc,UAArC,EAAiD;AACtD,SAAO;AACLD,+BADK;AAELE,aAAS,EAAED,YAAYA,UAAd;AAFJ,GAAP;AAID;;AAEM,SAASb,aAAT,CAAuBe,IAAvB,EAA6B;AAClC,MAAIC,QAAQD,KAAKC,KAAjB;AAAA,MACIC,cAAcF,KAAKE,WADvB;AAAA,MAEIC,OAAOH,KAAKG,IAFhB;;AAIA,SAAO,UAAUC,QAAV,EAAoB;AACzBA,aAAS;AACPP,gCADO;AAEPE,eAAS;AACPE,eAAOA,KADA;AAEPC,qBAAaA,WAFN;AAGPC,cAAMA;AAHC;AAFF,KAAT;AAQAC,aAAS,6CAAT;AACD,GAVD;AAWD;;AAEM,SAASlB,WAAT,CAAqBmB,KAArB,EAA4B;AACjC,SAAO,UAAUD,QAAV,EAAoBE,QAApB,EAA8B;AACnCF,aAAS;AACPP,4BADO;AAEPE,eAASM;AAFF,KAAT;AAIA,QAAIA,MAAME,IAAV,EAAgB;AACdH,eAAS,qCAAYC,MAAME,IAAlB,CAAT;AACD;AACDH,aAASpB,4BAA4BqB,MAAMG,cAAlC,CAAT;AACAJ,aAAS,kCAASC,MAAMI,KAAN,IAAe,EAAxB,CAAT;AACAL,aAAS,0CAAaC,MAAMK,SAAN,IAAmB,EAAhC,CAAT;AACAN,aAAS,yCAAY;AACnBO,gBAAUN,MAAMM,QADG;AAEnBC,cAAQP,MAAMQ;AAFK,KAAZ,CAAT;AAIA,QAAIR,MAAMS,KAAN,IAAeT,MAAMS,KAAN,CAAYC,SAA/B,EAA0C;AACxC;AACAX,eAAS,kCAAQC,MAAMS,KAAd,CAAT;AACAV,eAAS,sCAAaC,MAAMS,KAAN,CAAYE,KAAzB,CAAT;AACD;AACD,QAAIX,MAAMF,IAAV,EAAgB;AACd,UAAIF,QAAQ,kCAAcK,UAAd,CAAZ;AACAF,eAASnB,cAAc;AACrBgB,eAAOA,KADc;AAErBC,qBAAaG,MAAMH,WAFE;AAGrBC,cAAME,MAAMF;AAHS,OAAd,CAAT;AAKD;AACD,QAAIE,MAAMY,cAAV,EAA0B;AACxBb,eAAS,sDAAyBC,MAAMY,cAA/B,CAAT;AACAb,eAAS,4CAAeC,MAAMY,cAArB,CAAT;AACD;AACF,GAhCD;AAiCD;;AAEM,SAAS9B,SAAT,GAAqB;AAC1B,MAAI+B,aAAaC,KAAKC,GAAL,EAAjB;;AAEA,SAAO,gCAAI,MAAJ,EAAY;AACjBC,aAAS,SAASA,OAAT,GAAmB;AAC1B,aAAO,EAAExB,yCAAF,EAAP;AACD,KAHgB;AAIjByB,gBAAY,SAASA,UAAT,CAAoBjB,KAApB,EAA2B;AACrC,aAAO,UAAUD,QAAV,EAAoB;AACzBA,iBAAS,0CAAec,UAAf,EAA2Bb,MAAMkB,IAAjC,CAAT;AACAnB,iBAASlB,YAAYmB,KAAZ,CAAT;AACAD,iBAAS,uCAAT;AACD,OAJD;AAKD;AAVgB,GAAZ,CAAP;AAYD;;AAEM,SAAShB,eAAT,CAAyBa,KAAzB,EAAgC;AACrC,SAAO;AACLJ,yBADK;AAELE,aAAS,EAAEE,OAAOA,KAAT;AAFJ,GAAP;AAID;;AAED,SAASuB,UAAT,GAAsB;AACpB,SAAO,EAAE3B,uBAAF,EAAP;AACD;;AAEM,SAASR,KAAT,CAAeoC,KAAf,EAAsB;AAC3B,MAAIC,QAAQD,MAAMC,KAAlB;AAAA,MACIC,WAAWF,MAAME,QADrB;;AAGA,MAAIC,cAAcjC,QAAQkC,oBAAR,EAAlB;AACA,SAAO,iCAAK,yBAAyBD,WAA9B,EAA2C,EAAEF,OAAOA,KAAT,EAAgBC,UAAUA,QAA1B,EAA3C,EAAiF;AACtFN,aAASG,UAD6E;AAEtFF,gBAAY,SAASA,UAAT,CAAoBQ,GAApB,EAAyB;AACnC,aAAO,UAAU1B,QAAV,EAAoB;AACzBT,gBAAQoC,GAAR,CAAYD,IAAIE,IAAJ,CAASC,GAArB;AACA7B,iBAAShB,gBAAgB0C,IAAIE,IAAJ,CAASC,GAAzB,CAAT;AACA7B,iBAASjB,WAAT;AACD,OAJD;AAKD,KARqF;AAStF+C,aAAS,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AAC/B,aAAO;AACLtC,kCADK;AAELsC,eAAO,IAFF;AAGLpC,iBAASoC;AAHJ,OAAP;AAKD;AAfqF,GAAjF,CAAP;AAiBD;;AAEM,SAAS7C,QAAT,CAAkB8C,KAAlB,EAAyB;AAC9B,MAAIV,QAAQU,MAAMV,KAAlB;AAAA,MACIW,WAAWD,MAAMC,QADrB;AAAA,MAEIV,WAAWS,MAAMT,QAFrB;AAAA,MAGIW,aAAaF,MAAME,UAHvB;;AAKA,SAAO,iCAAK,gBAAL,EAAuB;AAC5BZ,WAAOA,KADqB,EACdW,UAAUA,QADI,EACMV,UAAUA,QADhB,EAC0BW,YAAYA;AADtC,GAAvB,EAEJ;AACDjB,aAAS,SAASA,OAAT,GAAmB;AAC1B,aAAO,EAAExB,0BAAF,EAAP;AACD,KAHA;AAIDyB,gBAAY,SAASA,UAAT,CAAoBQ,GAApB,EAAyB;AACnC,aAAO,UAAU1B,QAAV,EAAoB;AACzB,YAAID,OAAO2B,IAAIS,IAAf;AACA3C,cAAM,YAAN,EAAoBO,IAApB;AACAC,iBAAS;AACPP,uCADO;AAEPE,mBAAS,EAAEI,MAAMA,IAAR;AAFF,SAAT;AAIAC,iBAASf,MAAM,EAAEqC,OAAOA,KAAT,EAAgBC,UAAUA,QAA1B,EAAN,CAAT,EAAsDa,IAAtD,CAA2D,YAAY;AACrE,cAAIC,WAAW,oBAAX,EAAiCC,OAArC,EAA8C;AAC5C,mBAAO,8BAAP;AACD;AACD,iBAAO,IAAP;AACD,SALD;AAMD,OAbD;AAcD,KAnBA;AAoBDR,aAAS,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AAC/B,aAAO;AACLtC,qCADK;AAELsC,eAAO,IAFF;AAGLpC,iBAASoC;AAHJ,OAAP;AAKD;AA1BA,GAFI,CAAP;AA8BD;;AAED,SAASQ,WAAT,GAAuB;AACrB,SAAO,EAAE9C,wBAAF,EAAP;AACD;;AAED,SAAS+C,cAAT,GAA0B;AACxB,SAAO,UAAUxC,QAAV,EAAoB;AACzBA,aAAS,EAAEP,2BAAF,EAAT;AACAO,aAAS,0CAAa,EAAb,CAAT;AACD,GAHD;AAID;;AAEM,SAASb,MAAT,GAAkB;AACvB,SAAO,gCAAI,OAAJ,EAAa,EAAb,EAAiB;AACtB8B,aAAS,SAASA,OAAT,GAAmB;AAC1B,aAAO,UAAUjB,QAAV,EAAoB;AACzBA,iBAASuC,aAAT;AACAhD,gBAAQkD,KAAR;AACD,OAHD;AAID,KANqB;AAOtBvB,gBAAYsB;AAPU,GAAjB,CAAP;AASD;;AAEM,SAASpD,aAAT,CAAuBkC,KAAvB,EAA8B;AACnC,SAAO,iCAAK,sBAAL,EAA6BA,KAA7B,EAAoC;AACzCJ,gBAAY,SAASA,UAAT,GAAsB;AAChC,aAAO;AACLzB,2CADK;AAELE,iBAAS;AAFJ,OAAP;AAID,KANwC;AAOzCmC,aAAS,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AAC/B,aAAO;AACLtC,2CADK;AAELsC,eAAO,IAFF;AAGLpC,iBAASoC;AAHJ,OAAP;AAKD;AAbwC,GAApC,CAAP;AAeD;;AAEM,SAAS1C,kBAAT,GAA8B;AACnC,SAAO,gCAAI,cAAJ,EAAoB;AACzB6B,gBAAY,SAASA,UAAT,CAAoBQ,GAApB,EAAyB;AACnC,aAAO,YAAY;AACjB,eAAO;AACL5B,uBAAa4B,IAAIS,IAAJ,CAASrC;AADjB,SAAP;AAGD,OAJD;AAKD;AAPwB,GAApB,CAAP;AASD;;AAED,SAAS4C,gBAAT,CAA0BC,MAA1B,EAAkC;AAChC,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpC,QAAIC,IAAIC,YAAY,YAAY;AAC9B,UAAIJ,OAAOK,MAAX,EAAmB;AACjBC,sBAAcH,CAAd;AACAD;AACD;AACF,KALO,EAKL,EALK,CAAR;AAMD,GAPM,CAAP;AAQD;AACD,SAASK,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,SAAO,UAAUnD,QAAV,EAAoBE,QAApB,EAA8B;AACnC,QAAIkD,SAASlD,WAAWmD,MAAX,CAAkBD,MAA/B;;AAEA,QAAIE,cAAcX,OAAOY,IAAP,CAAYH,SAAS,gBAAT,GAA4BD,OAAxC,CAAlB;AACA,WAAOT,iBAAiBY,WAAjB,EAA8BlB,IAA9B,CAAmC,YAAY;AACpD;AACApC,eAASjB,WAAT;AACD,KAHM,CAAP;AAID,GARD;AASD;AACM,SAASO,eAAT,GAA2B;AAChC,SAAO4D,YAAY,QAAZ,CAAP;AACD;AACD","file":"LoginActionCreators.js","sourcesContent":["import createDebug from 'debug';\nimport {\n  INIT_STATE,\n  SOCKET_CONNECT,\n  SOCKET_RECONNECT,\n\n  AUTH_STRATEGIES,\n  REGISTER_START,\n  REGISTER_COMPLETE,\n  LOGIN_START,\n  LOGIN_COMPLETE,\n  SET_TOKEN,\n  LOGOUT_START,\n  LOGOUT_COMPLETE,\n\n  RESET_PASSWORD_COMPLETE,\n} from '../constants/actionTypes/auth';\nimport { LOAD_ALL_PLAYLISTS_START } from '../constants/actionTypes/playlists';\nimport * as Session from '../utils/Session';\nimport { get, post, del } from './RequestActionCreators';\nimport { advance, loadHistory } from './BoothActionCreators';\nimport { receiveMotd } from './ChatActionCreators';\nimport { setPlaylists, selectPlaylist, activatePlaylistComplete } from './PlaylistActionCreators';\nimport { syncTimestamps } from './TickerActionCreators';\nimport { closeLoginDialog } from './DialogActionCreators';\nimport { setUsers } from './UserActionCreators';\nimport { setVoteStats } from './VoteActionCreators';\nimport { setWaitList } from './WaitlistActionCreators';\nimport { tokenSelector } from '../selectors/userSelectors';\nimport startTutorial from '../_wlk/startTutorial';\n\nconst debug = createDebug('uwave:actions:login');\n\nexport function socketConnect() {\n  return { type: SOCKET_CONNECT };\n}\n\nexport function socketReconnect() {\n  return { type: SOCKET_RECONNECT };\n}\n\nexport function setAuthenticationStrategies(strategies) {\n  return {\n    type: AUTH_STRATEGIES,\n    payload: { strategies },\n  };\n}\n\nexport function loginComplete({ token, socketToken, user }) {\n  return (dispatch) => {\n    dispatch({\n      type: LOGIN_COMPLETE,\n      payload: {\n        token,\n        socketToken,\n        user,\n      },\n    });\n    dispatch(closeLoginDialog());\n  };\n}\n\nexport function loadedState(state) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: INIT_STATE,\n      payload: state,\n    });\n    if (state.motd) {\n      dispatch(receiveMotd(state.motd));\n    }\n    dispatch(setAuthenticationStrategies(state.authStrategies));\n    dispatch(setUsers(state.users || []));\n    dispatch(setPlaylists(state.playlists || []));\n    dispatch(setWaitList({\n      waitlist: state.waitlist,\n      locked: state.waitlistLocked,\n    }));\n    if (state.booth && state.booth.historyID) {\n      // TODO don't set this when logging in _after_ entering the page?\n      dispatch(advance(state.booth));\n      dispatch(setVoteStats(state.booth.stats));\n    }\n    if (state.user) {\n      const token = tokenSelector(getState());\n      dispatch(loginComplete({\n        token,\n        socketToken: state.socketToken,\n        user: state.user,\n      }));\n    }\n    if (state.activePlaylist) {\n      dispatch(activatePlaylistComplete(state.activePlaylist));\n      dispatch(selectPlaylist(state.activePlaylist));\n    }\n  };\n}\n\nexport function initState() {\n  const beforeTime = Date.now();\n\n  return get('/now', {\n    onStart: () => ({ type: LOAD_ALL_PLAYLISTS_START }),\n    onComplete: state => (dispatch) => {\n      dispatch(syncTimestamps(beforeTime, state.time));\n      dispatch(loadedState(state));\n      dispatch(loadHistory());\n    },\n  });\n}\n\nexport function setSessionToken(token) {\n  return {\n    type: SET_TOKEN,\n    payload: { token },\n  };\n}\n\nfunction loginStart() {\n  return { type: LOGIN_START };\n}\n\nexport function login({ email, password }) {\n  const sessionType = Session.preferredSessionType();\n  return post(`/auth/login?session=${sessionType}`, { email, password }, {\n    onStart: loginStart,\n    onComplete: res => (dispatch) => {\n      Session.set(res.meta.jwt);\n      dispatch(setSessionToken(res.meta.jwt));\n      dispatch(initState());\n    },\n    onError: error => ({\n      type: LOGIN_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n\nexport function register({\n  email, username, password, grecaptcha,\n}) {\n  return post('/auth/register', {\n    email, username, password, grecaptcha,\n  }, {\n    onStart: () => ({ type: REGISTER_START }),\n    onComplete: res => (dispatch) => {\n      const user = res.data;\n      debug('registered', user);\n      dispatch({\n        type: REGISTER_COMPLETE,\n        payload: { user },\n      });\n      dispatch(login({ email, password }))\n        .then(() => {\n          if (matchMedia('(min-width: 769px)').matches) {\n            return startTutorial();\n          }\n          return null;\n        });\n    },\n    onError: error => ({\n      type: REGISTER_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n\nfunction logoutStart() {\n  return { type: LOGOUT_START };\n}\n\nfunction logoutComplete() {\n  return (dispatch) => {\n    dispatch({ type: LOGOUT_COMPLETE });\n    dispatch(setPlaylists([]));\n  };\n}\n\nexport function logout() {\n  return del('/auth', {}, {\n    onStart: () => (dispatch) => {\n      dispatch(logoutStart());\n      Session.unset();\n    },\n    onComplete: logoutComplete,\n  });\n}\n\nexport function resetPassword(email) {\n  return post('/auth/password/reset', email, {\n    onComplete: () => ({\n      type: RESET_PASSWORD_COMPLETE,\n      payload: 'Successfully sent password reset email',\n    }),\n    onError: error => ({\n      type: RESET_PASSWORD_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n\nexport function getSocketAuthToken() {\n  return get('/auth/socket', {\n    onComplete: res => () => ({\n      socketToken: res.data.socketToken,\n    }),\n  });\n}\n\nfunction whenWindowClosed(window) {\n  return new Promise((resolve) => {\n    const i = setInterval(() => {\n      if (window.closed) {\n        clearInterval(i);\n        resolve();\n      }\n    }, 50);\n  });\n}\nfunction socialLogin(service) {\n  return (dispatch, getState) => {\n    const { apiUrl } = getState().config;\n    const loginWindow = window.open(`${apiUrl}/auth/service/${service}`);\n    return whenWindowClosed(loginWindow).then(() => {\n      // Check login state after the window closed.\n      dispatch(initState());\n    });\n  };\n}\nexport function loginWithGoogle() {\n  return socialLogin('google');\n}\n"]}