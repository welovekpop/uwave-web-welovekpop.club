{"version":3,"sources":["actions/ChatActionCreators.js"],"names":["receiveMotd","text","type","RECEIVE_MOTD","payload","logIdx","Date","now","log","LOG","_id","prepareMessage","state","user","parseOpts","parsed","SEND_MESSAGE","message","sendChat","dispatch","getState","sender","hasRole","mute","timeLeft","expiresAt","long","users","mentions","map","username","concat","inputMessage","_splitargs","slice","command","params","result","isMuted","userID","indexOf","receive","settings","currentUser","senderHasRole","mention","isMention","RECEIVE_MESSAGE","mentionSound","removeMessage","id","REMOVE_MESSAGE","removeMessagesByUser","REMOVE_USER_MESSAGES","removeAllMessages","REMOVE_ALL_MESSAGES","expireMute","UNMUTE_USER","muteUser","_ref","moderatorID","currentTime","expireIn","MUTE_USER","expirationTimer","setTimeout","unmuteUser","_ref2","muteTimeouts","clearTimeout","setMotdStart","motd","SET_MOTD_START","setMotdComplete","SET_MOTD_COMPLETE","setMotd","onStart","onComplete","_ref3","data","onError","error"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACO,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAO;AACLC,UAAMC,kBADD;AAELC,aAASH;AAFJ,GAAP;AAID;;AACD,IAAII,SAASC,KAAKC,GAAL,EAAb;;AACO,SAASC,GAAT,CAAaP,IAAb,EAAmB;AACxBI,YAAU,CAAV;AACA,SAAO;AACLH,UAAMO,SADD;AAELL,aAAS;AACPM,WAAKL,MADE;AAEPJ,YAAMA;AAFC;AAFJ,GAAP;AAOD;;AACM,SAASU,cAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCZ,IAArC,EAA2Ca,SAA3C,EAAsD;AAC3D,MAAIA,cAAc,KAAK,CAAvB,EAA0B;AACxBA,gBAAY,EAAZ;AACD;;AAED,MAAIC,SAAS,mCAAgBd,IAAhB,EAAsBa,SAAtB,CAAb;AACA,qCAAgBC,MAAhB,EAAwBH,KAAxB;AACA,SAAO;AACLV,UAAMc,kBADD;AAELZ,aAAS;AACPS,YAAMA,IADC;AAEPI,eAAShB,IAFF;AAGPc,cAAQA;AAHD;AAFJ,GAAP;AAQD;;AACM,SAASG,QAAT,CAAkBjB,IAAlB,EAAwB;AAC7B,SAAO,UAAUkB,QAAV,EAAoBC,QAApB,EAA8B;AACnC,QAAIR,QAAQQ,UAAZ;AACA,QAAIC,SAAS,wCAAoBT,KAApB,CAAb;AACA,QAAIU,UAAU,+CAA2BV,KAA3B,CAAd;AACA,QAAIW,OAAO,4CAAwBX,KAAxB,CAAX;;AAEA,QAAIW,IAAJ,EAAU;AACR,UAAIC,WAAW,iBAAGD,KAAKE,SAAL,GAAiBnB,KAAKC,GAAL,EAApB,EAAgC;AAC7CmB,cAAM;AADuC,OAAhC,CAAf;AAGAP,eAASX,IAAI,sDAAsDgB,QAAtD,GAAiE,GAArE,CAAT;AACA;AACD;;AAED,QAAIG,QAAQ,qCAAiBf,KAAjB,CAAZ;AACA,QAAIK,UAAUN,eAAeC,KAAf,EAAsBS,MAAtB,EAA8BpB,IAA9B,EAAoC;AAChD2B,gBAAUD,MAAME,GAAN,CAAU,UAAUhB,IAAV,EAAgB;AAClC,eAAOA,KAAKiB,QAAZ;AACD,OAFS,EAEPC,MAFO,CAEA,6CAA0BT,OAA1B,CAFA;AADsC,KAApC,CAAd;AAKAH,aAASF,OAAT;AACD,GArBD;AAsBD;;AACM,SAASe,YAAT,CAAsB/B,IAAtB,EAA4B;AACjC,SAAO,UAAUkB,QAAV,EAAoBC,QAApB,EAA8B;AACnC,QAAInB,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACnB,UAAIgC,aAAa,yBAAUhC,KAAKiC,KAAL,CAAW,CAAX,CAAV,CAAjB;AAAA,UACIC,UAAUF,WAAW,CAAX,CADd;AAAA,UAEIG,SAASH,WAAWC,KAAX,CAAiB,CAAjB,CAFb;;AAIA,UAAIC,OAAJ,EAAa;AACX,YAAIE,SAAS,2BAAQjB,UAAR,EAAoBe,OAApB,EAA6BC,MAA7B,CAAb;;AAEA,YAAIC,MAAJ,EAAY;AACVlB,mBAASkB,MAAT;AACD;;AAED;AACD;AACF;;AAEDlB,aAASD,SAASjB,IAAT,CAAT;AACD,GAlBD;AAmBD;;AAED,SAASqC,OAAT,CAAiB1B,KAAjB,EAAwB2B,MAAxB,EAAgC;AAC9B,SAAO,yCAAqB3B,KAArB,EAA4B4B,OAA5B,CAAoCD,MAApC,MAAgD,CAAC,CAAxD;AACD;;AAEM,SAASE,OAAT,CAAiBxB,OAAjB,EAA0B;AAC/B,SAAO,UAAUE,QAAV,EAAoBC,QAApB,EAA8B;AACnC,QAAIR,QAAQQ,UAAZ;AACA,QAAIsB,WAAW,wCAAiB9B,KAAjB,CAAf;AACA,QAAI+B,cAAc,wCAAoB/B,KAApB,CAAlB;AACA,QAAIe,QAAQ,qCAAiBf,KAAjB,CAAZ;AACA,QAAIS,SAAS,wBAAKM,KAAL,EAAY,UAAUd,IAAV,EAAgB;AACvC,aAAOA,KAAKH,GAAL,KAAaO,QAAQsB,MAA5B;AACD,KAFY,CAAb;AAGA,QAAIK,gBAAgB,wCAAoBhC,KAApB,EAA2BS,MAA3B,CAApB;AACA,QAAIO,WAAWD,MAAME,GAAN,CAAU,UAAUhB,IAAV,EAAgB;AACvC,aAAOA,KAAKiB,QAAZ;AACD,KAFc,EAEZC,MAFY,CAEL,6CAA0B,UAAUc,OAAV,EAAmB;AACrD,aAAOD,cAAc,kBAAkBC,OAAhC,CAAP;AACD,KAFS,CAFK,CAAf;;AAMA,QAAIP,QAAQ1B,KAAR,EAAeK,QAAQsB,MAAvB,CAAJ,EAAoC;AAClC;AACD;;AAED,QAAIxB,SAAS,mCAAgBE,QAAQhB,IAAxB,EAA8B;AACzC2B,gBAAUA;AAD+B,KAA9B,CAAb;AAGA,uCAAgBb,MAAhB,EAAwBH,KAAxB;AACA,QAAIkC,YAAYH,cAAc,8BAAW5B,MAAX,EAAmB4B,YAAYjC,GAA/B,CAAd,GAAoD,KAApE;AACAS,aAAS;AACPjB,YAAM6C,qBADC;AAEP3C,eAAS;AACPa,iBAAS,uBAAS,EAAT,EAAaA,OAAb,EAAsB;AAC7BJ,gBAAMQ;AADuB,SAAtB,CADF;AAIPyB,mBAAWA,SAJJ;AAKP/B,gBAAQA;AALD;AAFF,KAAT;;AAWA,QAAI+B,SAAJ,EAAe;AACb,UAAIJ,SAASM,YAAb,EAA2B;AACzB;AACD;;AAED,uCAAmB,kBAAkB3B,OAAOS,QAA5C;AACD;AACF,GA1CD;AA2CD;;AACM,SAASmB,aAAT,CAAuBC,EAAvB,EAA2B;AAChC,SAAO;AACLhD,UAAMiD,oBADD;AAEL/C,aAAS;AACPM,WAAKwC;AADE;AAFJ,GAAP;AAMD;;AACM,SAASE,oBAAT,CAA8Bb,MAA9B,EAAsC;AAC3C,SAAO;AACLrC,UAAMmD,0BADD;AAELjD,aAAS;AACPmC,cAAQA;AADD;AAFJ,GAAP;AAMD;;AACM,SAASe,iBAAT,GAA6B;AAClC,SAAO;AACLpD,UAAMqD;AADD,GAAP;AAGD;;AAED,SAASC,UAAT,CAAoBjB,MAApB,EAA4B;AAC1B,SAAO;AACLrC,UAAMuD,iBADD;AAELrD,aAAS;AACPmC,cAAQA;AADD;AAFJ,GAAP;AAMD;;AAEM,SAASmB,QAAT,CAAkBnB,MAAlB,EAA0BoB,IAA1B,EAAgC;AACrC,MAAIC,cAAcD,KAAKC,WAAvB;AAAA,MACInC,YAAYkC,KAAKlC,SADrB;AAEA,SAAO,UAAUN,QAAV,EAAoBC,QAApB,EAA8B;AACnC,QAAIyC,cAAc,wCAAoBzC,UAApB,CAAlB;AACA,QAAI0C,WAAWrC,YAAYoC,WAA3B;AACA1C,aAAS;AACPjB,YAAM6D,eADC;AAEP3D,eAAS;AACPmC,gBAAQA,MADD;AAEPqB,qBAAaA,WAFN;AAGPnC,mBAAWA,SAHJ;AAIPuC,yBAAiBF,WAAW,CAAX,GAAeG,WAAW,YAAY;AACrD,iBAAO9C,SAASqC,WAAWjB,MAAX,CAAT,CAAP;AACD,SAF+B,EAE7BuB,QAF6B,CAAf,GAEF;AANR;AAFF,KAAT;AAWD,GAdD;AAeD;;AACM,SAASI,UAAT,CAAoB3B,MAApB,EAA4B4B,KAA5B,EAAmC;AACxC,MAAIP,cAAcO,MAAMP,WAAxB;AACA,SAAO,UAAUzC,QAAV,EAAoBC,QAApB,EAA8B;AACnC,QAAIgD,eAAe,yCAAqBhD,UAArB,CAAnB;;AAEA,QAAIgD,gBAAgBA,aAAa7B,MAAb,CAApB,EAA0C;AACxC8B,mBAAaD,aAAa7B,MAAb,CAAb;AACD;;AAEDpB,aAAS;AACPjB,YAAMuD,iBADC;AAEPrD,eAAS;AACPmC,gBAAQA,MADD;AAEPqB,qBAAaA;AAFN;AAFF,KAAT;AAOD,GAdD;AAeD;;AACM,SAASU,YAAT,CAAsBC,IAAtB,EAA4B;AACjC,SAAO;AACLrE,UAAMsE,oBADD;AAELpE,aAASmE;AAFJ,GAAP;AAID;;AACM,SAASE,eAAT,CAAyBF,IAAzB,EAA+B;AACpC,SAAO;AACLrE,UAAMwE,uBADD;AAELtE,aAASmE;AAFJ,GAAP;AAID;;AACM,SAASI,OAAT,CAAiB1E,IAAjB,EAAuB;AAC5B,SAAO,gCAAI,OAAJ,EAAa;AAClBsE,UAAMtE;AADY,GAAb,EAEJ;AACD2E,aAAS,SAASA,OAAT,GAAmB;AAC1B,aAAON,aAAarE,IAAb,CAAP;AACD,KAHA;AAID4E,gBAAY,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AACrC,UAAIC,OAAOD,MAAMC,IAAjB;AACA,aAAO,UAAU5D,QAAV,EAAoB;AACzBA,iBAASsD,gBAAgBM,KAAKR,IAArB,CAAT;AACApD,iBAASX,IAAI,gCAAgCuE,KAAKR,IAAzC,CAAT;AACD,OAHD;AAID,KAVA;AAWDS,aAAS,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AAC/B,aAAO;AACL/E,cAAMwE,uBADD;AAELO,eAAO,IAFF;AAGL7E,iBAAS6E;AAHJ,OAAP;AAKD;AAjBA,GAFI,CAAP;AAqBD,C,CACD","file":"ChatActionCreators.js","sourcesContent":["import find from 'array-find';\nimport ms from 'ms';\nimport splitargs from 'splitargs';\nimport parseChatMarkup from 'u-wave-parse-chat-markup';\nimport flashDocumentTitle from 'flash-document-title';\nimport playMentionSound from '../utils/playMentionSound';\nimport {\n  RECEIVE_MOTD,\n  SET_MOTD_START,\n  SET_MOTD_COMPLETE,\n\n  SEND_MESSAGE,\n  RECEIVE_MESSAGE,\n\n  LOG,\n\n  REMOVE_MESSAGE,\n  REMOVE_USER_MESSAGES,\n  REMOVE_ALL_MESSAGES,\n\n  MUTE_USER,\n  UNMUTE_USER,\n} from '../constants/actionTypes/chat';\nimport { put } from './RequestActionCreators';\nimport { execute } from '../utils/ChatCommands';\nimport {\n  muteTimeoutsSelector,\n  mutedUserIDsSelector,\n  currentUserMuteSelector,\n} from '../selectors/chatSelectors';\nimport { settingsSelector } from '../selectors/settingSelectors';\nimport {\n  currentUserSelector,\n  userListSelector,\n  userHasRoleSelector,\n  currentUserHasRoleSelector,\n} from '../selectors/userSelectors';\nimport { currentTimeSelector } from '../selectors/timeSelectors';\n\nimport {\n  getAvailableGroupMentions,\n  resolveMentions,\n  hasMention,\n} from '../utils/chatMentions';\n\nexport function receiveMotd(text) {\n  return {\n    type: RECEIVE_MOTD,\n    payload: text,\n  };\n}\n\nlet logIdx = Date.now();\nexport function log(text) {\n  logIdx += 1;\n  return {\n    type: LOG,\n    payload: {\n      _id: logIdx,\n      text,\n    },\n  };\n}\n\nexport function prepareMessage(state, user, text, parseOpts = {}) {\n  const parsed = parseChatMarkup(text, parseOpts);\n  resolveMentions(parsed, state);\n  return {\n    type: SEND_MESSAGE,\n    payload: {\n      user,\n      message: text,\n      parsed,\n    },\n  };\n}\n\nexport function sendChat(text) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const sender = currentUserSelector(state);\n    const hasRole = currentUserHasRoleSelector(state);\n    const mute = currentUserMuteSelector(state);\n    if (mute) {\n      const timeLeft = ms(mute.expiresAt - Date.now(), { long: true });\n      dispatch(log(`You have been muted, and cannot chat for another ${timeLeft}.`));\n      return;\n    }\n\n    const users = userListSelector(state);\n    const message = prepareMessage(state, sender, text, {\n      mentions: [\n        ...users.map(user => user.username),\n        ...getAvailableGroupMentions(hasRole),\n      ],\n    });\n    dispatch(message);\n  };\n}\n\nexport function inputMessage(text) {\n  return (dispatch, getState) => {\n    if (text[0] === '/') {\n      const [command, ...params] = splitargs(text.slice(1));\n      if (command) {\n        const result = execute(getState(), command, params);\n        if (result) {\n          dispatch(result);\n        }\n        return;\n      }\n    }\n    dispatch(sendChat(text));\n  };\n}\n\nfunction isMuted(state, userID) {\n  return mutedUserIDsSelector(state).indexOf(userID) !== -1;\n}\n\nexport function receive(message) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const settings = settingsSelector(state);\n    const currentUser = currentUserSelector(state);\n    const users = userListSelector(state);\n    const sender = find(users, user => user._id === message.userID);\n    const senderHasRole = userHasRoleSelector(state)(sender);\n    const mentions = [\n      ...users.map(user => user.username),\n      ...getAvailableGroupMentions(mention => senderHasRole(`chat.mention.${mention}`)),\n    ];\n\n    if (isMuted(state, message.userID)) {\n      return;\n    }\n\n    const parsed = parseChatMarkup(message.text, { mentions });\n    resolveMentions(parsed, state);\n\n    const isMention = currentUser ? hasMention(parsed, currentUser._id) : false;\n\n    dispatch({\n      type: RECEIVE_MESSAGE,\n      payload: {\n        message: {\n          ...message,\n          user: sender,\n        },\n        isMention,\n        parsed,\n      },\n    });\n\n    if (isMention) {\n      if (settings.mentionSound) {\n        playMentionSound();\n      }\n      flashDocumentTitle(`💬 ${sender.username}`);\n    }\n  };\n}\n\nexport function removeMessage(id) {\n  return {\n    type: REMOVE_MESSAGE,\n    payload: { _id: id },\n  };\n}\n\nexport function removeMessagesByUser(userID) {\n  return {\n    type: REMOVE_USER_MESSAGES,\n    payload: { userID },\n  };\n}\n\nexport function removeAllMessages() {\n  return {\n    type: REMOVE_ALL_MESSAGES,\n  };\n}\n\nfunction expireMute(userID) {\n  return {\n    type: UNMUTE_USER,\n    payload: { userID },\n  };\n}\n\nexport function muteUser(userID, { moderatorID, expiresAt }) {\n  return (dispatch, getState) => {\n    const currentTime = currentTimeSelector(getState());\n    const expireIn = expiresAt - currentTime;\n\n    dispatch({\n      type: MUTE_USER,\n      payload: {\n        userID,\n        moderatorID,\n        expiresAt,\n        expirationTimer: expireIn > 0 ?\n          setTimeout(() => dispatch(expireMute(userID)), expireIn) : null,\n      },\n    });\n  };\n}\n\nexport function unmuteUser(userID, { moderatorID }) {\n  return (dispatch, getState) => {\n    const muteTimeouts = muteTimeoutsSelector(getState());\n    if (muteTimeouts && muteTimeouts[userID]) {\n      clearTimeout(muteTimeouts[userID]);\n    }\n    dispatch({\n      type: UNMUTE_USER,\n      payload: { userID, moderatorID },\n    });\n  };\n}\n\nexport function setMotdStart(motd) {\n  return {\n    type: SET_MOTD_START,\n    payload: motd,\n  };\n}\n\nexport function setMotdComplete(motd) {\n  return {\n    type: SET_MOTD_COMPLETE,\n    payload: motd,\n  };\n}\n\nexport function setMotd(text) {\n  return put('/motd', { motd: text }, {\n    onStart: () => setMotdStart(text),\n    onComplete: ({ data }) => (dispatch) => {\n      dispatch(setMotdComplete(data.motd));\n      dispatch(log(`Message of the Day is now: ${data.motd}`));\n    },\n    onError: error => ({\n      type: SET_MOTD_COMPLETE,\n      error: true,\n      payload: error,\n    }),\n  });\n}\n"]}