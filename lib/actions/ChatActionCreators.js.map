{"version":3,"sources":["actions/ChatActionCreators.js"],"names":["receiveMotd","log","prepareMessage","sendChat","inputMessage","receive","removeMessage","removeMessagesByUser","removeAllMessages","muteUser","unmuteUser","setMotdStart","setMotdComplete","setMotd","text","type","payload","logIdx","Date","now","_id","state","user","parseOpts","arguments","length","undefined","parsed","message","dispatch","getState","sender","mute","timeLeft","expiresAt","long","users","mentions","concat","map","username","_splitargs","slice","command","params","result","isMuted","userID","indexOf","settings","currentUser","isMention","mentionSound","id","expireMute","_ref","moderatorID","currentTime","expireIn","expirationTimer","setTimeout","_ref2","muteTimeouts","clearTimeout","motd","onStart","onComplete","_ref3","data","onError","error"],"mappings":"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","file":"ChatActionCreators.js","sourcesContent":["import find from 'array-find';\nimport ms from 'ms';\nimport splitargs from 'splitargs';\nimport parseChatMarkup from 'u-wave-parse-chat-markup';\nimport playMentionSound from '../utils/playMentionSound';\nimport {\n  RECEIVE_MOTD,\n  SET_MOTD_START,\n  SET_MOTD_COMPLETE,\n\n  SEND_MESSAGE,\n  RECEIVE_MESSAGE,\n\n  LOG,\n\n  REMOVE_MESSAGE,\n  REMOVE_USER_MESSAGES,\n  REMOVE_ALL_MESSAGES,\n\n  MUTE_USER,\n  UNMUTE_USER\n} from '../constants/actionTypes/chat';\nimport { put } from './RequestActionCreators';\nimport { execute } from '../utils/ChatCommands';\nimport {\n  muteTimeoutsSelector,\n  mutedUserIDsSelector,\n  currentUserMuteSelector\n} from '../selectors/chatSelectors';\nimport { settingsSelector } from '../selectors/settingSelectors';\nimport {\n  currentUserSelector,\n  userListSelector\n} from '../selectors/userSelectors';\nimport { currentTimeSelector } from '../selectors/timeSelectors';\n\nimport {\n  getAvailableGroupMentions,\n  resolveMentions,\n  hasMention\n} from '../utils/chatMentions';\n\nexport function receiveMotd(text) {\n  return {\n    type: RECEIVE_MOTD,\n    payload: parseChatMarkup(text, {})\n  };\n}\n\nlet logIdx = Date.now();\nexport function log(text) {\n  logIdx += 1;\n  return {\n    type: LOG,\n    payload: {\n      _id: logIdx,\n      text\n    }\n  };\n}\n\nexport function prepareMessage(state, user, text, parseOpts = {}) {\n  const parsed = parseChatMarkup(text, parseOpts);\n  resolveMentions(parsed, state);\n  return {\n    type: SEND_MESSAGE,\n    payload: {\n      user,\n      message: text,\n      parsed\n    }\n  };\n}\n\nexport function sendChat(text) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const sender = currentUserSelector(state);\n    const mute = currentUserMuteSelector(state);\n    if (mute) {\n      const timeLeft = ms(mute.expiresAt - Date.now(), { long: true });\n      dispatch(log(`You have been muted, and cannot chat for another ${timeLeft}.`));\n      return;\n    }\n\n    const users = userListSelector(state);\n    const message = prepareMessage(state, sender, text, {\n      mentions: [\n        ...users.map(user => user.username),\n        ...getAvailableGroupMentions(sender)\n      ]\n    });\n    dispatch(message);\n  };\n}\n\nexport function inputMessage(text) {\n  return (dispatch, getState) => {\n    if (text[0] === '/') {\n      const [ command, ...params ] = splitargs(text.slice(1));\n      if (command) {\n        const result = execute(getState(), command, params);\n        if (result) {\n          dispatch(result);\n        }\n        return;\n      }\n    }\n    dispatch(sendChat(text));\n  };\n}\n\nfunction isMuted(state, userID) {\n  return mutedUserIDsSelector(state).indexOf(userID) !== -1;\n}\n\nexport function receive(message) {\n  return (dispatch, getState) => {\n    const settings = settingsSelector(getState());\n    const currentUser = currentUserSelector(getState());\n    const users = userListSelector(getState());\n    const sender = find(users, user => user._id === message.userID);\n    const mentions = [\n      ...users.map(user => user.username),\n      ...getAvailableGroupMentions(sender)\n    ];\n\n    if (isMuted(getState(), message.userID)) {\n      return;\n    }\n\n    const parsed = parseChatMarkup(message.text, { mentions });\n    resolveMentions(parsed, getState());\n\n    const isMention = currentUser ? hasMention(parsed, currentUser._id) : false;\n\n    dispatch({\n      type: RECEIVE_MESSAGE,\n      payload: {\n        message: {\n          ...message,\n          user: sender\n        },\n        isMention,\n        parsed\n      }\n    });\n\n    if (isMention && settings.mentionSound) {\n      playMentionSound();\n    }\n  };\n}\n\nexport function removeMessage(id) {\n  return {\n    type: REMOVE_MESSAGE,\n    payload: { _id: id }\n  };\n}\n\nexport function removeMessagesByUser(userID) {\n  return {\n    type: REMOVE_USER_MESSAGES,\n    payload: { userID }\n  };\n}\n\nexport function removeAllMessages() {\n  return {\n    type: REMOVE_ALL_MESSAGES\n  };\n}\n\nfunction expireMute(userID) {\n  return {\n    type: UNMUTE_USER,\n    payload: { userID }\n  };\n}\n\nexport function muteUser(userID, { moderatorID, expiresAt }) {\n  return (dispatch, getState) => {\n    const currentTime = currentTimeSelector(getState());\n    const expireIn = expiresAt - currentTime;\n\n    dispatch({\n      type: MUTE_USER,\n      payload: {\n        userID,\n        moderatorID,\n        expiresAt,\n        expirationTimer: expireIn > 0 ?\n          setTimeout(() => dispatch(expireMute(userID)), expireIn) : null\n      }\n    });\n  };\n}\n\nexport function unmuteUser(userID, { moderatorID }) {\n  return (dispatch, getState) => {\n    const muteTimeouts = muteTimeoutsSelector(getState());\n    if (muteTimeouts && muteTimeouts[userID]) {\n      clearTimeout(muteTimeouts[userID]);\n    }\n    dispatch({\n      type: UNMUTE_USER,\n      payload: { userID, moderatorID }\n    });\n  };\n}\n\nexport function setMotdStart(motd) {\n  return {\n    type: SET_MOTD_START,\n    payload: motd\n  };\n}\n\nexport function setMotdComplete(motd) {\n  return {\n    type: SET_MOTD_COMPLETE,\n    payload: motd\n  };\n}\n\nexport function setMotd(text) {\n  return put('/motd', { motd: text }, {\n    onStart: () => setMotdStart(text),\n    onComplete: ({ data }) => (dispatch) => {\n      dispatch(setMotdComplete(data.motd));\n      dispatch(log(`Message of the Day is now: ${data.motd}`));\n    },\n    onError: error => ({\n      type: SET_MOTD_COMPLETE,\n      error: true,\n      payload: error\n    })\n  });\n}\n"]}