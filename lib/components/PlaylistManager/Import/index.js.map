{"version":3,"sources":["components/PlaylistManager/Import/index.js"],"names":["PlaylistImport","_ref","getMediaSource","getAllMediaSources","selectedSourceType","sourceStates","_onShowImportPanel","onShowImportPanel","onHideImportPanel","Panel","ImportPanel","state","React","createElement","onClosePanel","forms","sources","Object","keys","forEach","sourceType","ImportForm","push","className","propTypes","process","env","NODE_ENV","PropTypes","string","object","func","isRequired"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAIA,iBAAiB,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AACjD,MAAIC,iBAAiBD,KAAKC,cAA1B;AAAA,MACIC,qBAAqBF,KAAKE,kBAD9B;AAAA,MAEIC,qBAAqBH,KAAKG,kBAF9B;AAAA,MAGIC,eAAeJ,KAAKI,YAHxB;AAAA,MAIIC,qBAAqBL,KAAKM,iBAJ9B;AAAA,MAKIC,oBAAoBP,KAAKO,iBAL7B;;AAOA,MAAIJ,kBAAJ,EAAwB;AACtB,QAAIK,QAAQP,eAAeE,kBAAf,EAAmCM,WAA/C;AACA,QAAIC,QAAQN,aAAaD,kBAAb,CAAZ;AACA,WAAOQ,eAAMC,aAAN,CAAoBJ,KAApB,EAA2B,uBAAS;AACzCK,oBAAcN;AAD2B,KAAT,EAE/BG,KAF+B,CAA3B,CAAP;AAGD;;AAED,MAAII,QAAQ,EAAZ;AACA,MAAIC,UAAUb,oBAAd;AACAc,SAAOC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,UAAUC,UAAV,EAAsB;AACjD,QAAIC,aAAaL,QAAQI,UAAR,EAAoBC,UAArC;;AAEA,QAAIA,UAAJ,EAAgB;AACdN,YAAMO,IAAN,CAAW,mBAAKD,UAAL,EAAiB;AAC1Bd,2BAAmB,SAASA,iBAAT,GAA6B;AAC9C,iBAAOD,mBAAmBc,UAAnB,CAAP;AACD,SAHyB;AAI1BZ,2BAAmBA;AAJO,OAAjB,EAKRY,UALQ,CAAX;AAMD;AACF,GAXD;AAYA,SAAO,mBAAK,KAAL,EAAY;AACjBG,eAAW;AADM,GAAZ,EAEJ,KAAK,CAFD,EAEIR,KAFJ,CAAP;AAGD,CAjCD;;AAmCAf,eAAewB,SAAf,GAA2BC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AACjEvB,sBAAoBwB,mBAAUC,MADmC;AAEjExB,gBAAcuB,mBAAUE,MAFyC;AAGjE5B,kBAAgB0B,mBAAUG,IAAV,CAAeC,UAHkC;AAIjE7B,sBAAoByB,mBAAUG,IAAV,CAAeC,UAJ8B;AAKjEzB,qBAAmBqB,mBAAUG,IAAV,CAAeC,UAL+B;AAMjExB,qBAAmBoB,mBAAUG,IAAV,CAAeC;AAN+B,CAAxC,GAOvB,EAPJ;;eAQe,mCAAqBhC,cAArB,C,EACf","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport injectMediaSources from '../../../utils/injectMediaSources';\n\nconst PlaylistImport = ({\n  getMediaSource,\n  getAllMediaSources,\n  selectedSourceType,\n  sourceStates,\n  onShowImportPanel,\n  onHideImportPanel,\n}) => {\n  if (selectedSourceType) {\n    const Panel = getMediaSource(selectedSourceType).ImportPanel;\n    const state = sourceStates[selectedSourceType];\n    return (\n      <Panel\n        onClosePanel={onHideImportPanel}\n        {...state}\n      />\n    );\n  }\n\n  const forms = [];\n  const sources = getAllMediaSources();\n  Object.keys(sources).forEach((sourceType) => {\n    const { ImportForm } = sources[sourceType];\n    if (ImportForm) {\n      forms.push((\n        <ImportForm\n          key={sourceType}\n          onShowImportPanel={() => onShowImportPanel(sourceType)}\n          onHideImportPanel={onHideImportPanel}\n        />\n      ));\n    }\n  });\n\n  return (\n    <div className=\"PlaylistImport\">\n      {forms}\n    </div>\n  );\n};\n\nPlaylistImport.propTypes = {\n  selectedSourceType: PropTypes.string,\n  sourceStates: PropTypes.object,\n\n  getMediaSource: PropTypes.func.isRequired,\n  getAllMediaSources: PropTypes.func.isRequired,\n  onShowImportPanel: PropTypes.func.isRequired,\n  onHideImportPanel: PropTypes.func.isRequired,\n};\n\nexport default injectMediaSources()(PlaylistImport);\n"]}