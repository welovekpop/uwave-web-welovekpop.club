{"version":3,"sources":["components/PlaylistManager/Import/index.js"],"names":["PlaylistImport","_ref","getMediaSource","getAllMediaSources","selectedSourceType","sourceStates","_onShowImportPanel","onShowImportPanel","onHideImportPanel","Panel","ImportPanel","state","createElement","onClosePanel","forms","sources","Object","keys","forEach","sourceType","ImportForm","push","className","propTypes","process","env","NODE_ENV","string","object","func","isRequired"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,iBAAiB,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AACjD,MAAIC,iBAAiBD,KAAKC,cAA1B;AAAA,MACIC,qBAAqBF,KAAKE,kBAD9B;AAAA,MAEIC,qBAAqBH,KAAKG,kBAF9B;AAAA,MAGIC,eAAeJ,KAAKI,YAHxB;AAAA,MAIIC,qBAAqBL,KAAKM,iBAJ9B;AAAA,MAKIC,oBAAoBP,KAAKO,iBAL7B;;AAOA,MAAIJ,kBAAJ,EAAwB;AACtB,QAAIK,QAAQP,eAAeE,kBAAf,EAAmCM,WAA/C;AACA,QAAIC,QAAQN,aAAaD,kBAAb,CAAZ;AACA,WAAO,gBAAMQ,aAAN,CAAoBH,KAApB,EAA2B,uBAAS;AACzCI,oBAAcL;AAD2B,KAAT,EAE/BG,KAF+B,CAA3B,CAAP;AAGD;;AAED,MAAIG,QAAQ,EAAZ;AACA,MAAIC,UAAUZ,oBAAd;AACAa,SAAOC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,UAAUC,UAAV,EAAsB;AACjD,QAAIC,aAAaL,QAAQI,UAAR,EAAoBC,UAArC;;AAEA,QAAIA,UAAJ,EAAgB;AACdN,YAAMO,IAAN,CAAW,mBAAKD,UAAL,EAAiB;AAC1Bb,2BAAmB,SAASA,iBAAT,GAA6B;AAC9C,iBAAOD,mBAAmBa,UAAnB,CAAP;AACD,SAHyB;AAI1BX,2BAAmBA;AAJO,OAAjB,EAKRW,UALQ,CAAX;AAMD;AACF,GAXD;;AAaA,SAAO,mBAAK,KAAL,EAAY;AACjBG,eAAW;AADM,GAAZ,EAEJ,KAAK,CAFD,EAEIR,KAFJ,CAAP;AAGD,CAlCD;;AAoCAd,eAAeuB,SAAf,GAA2BC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AACjEtB,sBAAoB,oBAAUuB,MADmC;AAEjEtB,gBAAc,oBAAUuB,MAFyC;;AAIjE1B,kBAAgB,oBAAU2B,IAAV,CAAeC,UAJkC;AAKjE3B,sBAAoB,oBAAU0B,IAAV,CAAeC,UAL8B;AAMjEvB,qBAAmB,oBAAUsB,IAAV,CAAeC,UAN+B;AAOjEtB,qBAAmB,oBAAUqB,IAAV,CAAeC;AAP+B,CAAxC,GAQvB,EARJ;;kBAUe,oCAAqB9B,cAArB,C;AACf","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport injectMediaSources from '../../../utils/injectMediaSources';\n\nconst PlaylistImport = ({\n  getMediaSource,\n  getAllMediaSources,\n  selectedSourceType,\n  sourceStates,\n  onShowImportPanel,\n  onHideImportPanel,\n}) => {\n  if (selectedSourceType) {\n    const Panel = getMediaSource(selectedSourceType).ImportPanel;\n    const state = sourceStates[selectedSourceType];\n    return (\n      <Panel\n        onClosePanel={onHideImportPanel}\n        {...state}\n      />\n    );\n  }\n\n  const forms = [];\n  const sources = getAllMediaSources();\n  Object.keys(sources).forEach((sourceType) => {\n    const { ImportForm } = sources[sourceType];\n    if (ImportForm) {\n      forms.push((\n        <ImportForm\n          key={sourceType}\n          onShowImportPanel={() => onShowImportPanel(sourceType)}\n          onHideImportPanel={onHideImportPanel}\n        />\n      ));\n    }\n  });\n\n  return (\n    <div className=\"PlaylistImport\">\n      {forms}\n    </div>\n  );\n};\n\nPlaylistImport.propTypes = {\n  selectedSourceType: PropTypes.string,\n  sourceStates: PropTypes.object,\n\n  getMediaSource: PropTypes.func.isRequired,\n  getAllMediaSources: PropTypes.func.isRequired,\n  onShowImportPanel: PropTypes.func.isRequired,\n  onHideImportPanel: PropTypes.func.isRequired,\n};\n\nexport default injectMediaSources()(PlaylistImport);\n"]}