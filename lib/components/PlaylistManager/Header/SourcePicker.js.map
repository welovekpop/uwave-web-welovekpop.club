{"version":3,"sources":["components/PlaylistManager/Header/SourcePicker.js"],"names":["enhance","popoverPosition","anchorOrigin","vertical","horizontal","transformOrigin","_ref","ArrowIcon","className","SourcePicker","_React$Component","_temp","_this","_len","arguments","length","args","Array","_key","call","apply","concat","state","open","handleOpen","setState","anchor","container","handleClose","refContainer","_proto","prototype","createElement","sourceName","_this2","_props","props","selected","getMediaSource","onClick","handleChange","SourcePickerElement","name","source","active","onChange","render","_this3","_props2","getAllMediaSources","sourceNames","Object","keys","sources","filter","map","React","ref","Popover","classes","paper","anchorEl","onClose","Component","propTypes","process","env","NODE_ENV","PropTypes","string","func","isRequired"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA,IAAIA,UAAU,kCAAd;AACA,IAAIC,kBAAkB;AACpBC,gBAAc;AACZC,cAAU,QADE;AAEZC,gBAAY;AAFA,GADM;AAKpBC,mBAAiB;AACfF,cAAU,KADK;AAEfC,gBAAY;AAFG;AALG,CAAtB;;AAWA,IAAIE;AACJ;AACA,mBAAKC,sBAAL,EAAgB;AACdC,aAAW;AADG,CAAhB,CAFA;;AAMA,IAAIC;AACJ;AACA,UAAUC,gBAAV,EAA4B;AAC1B,+BAAeD,YAAf,EAA6BC,gBAA7B;;AAEA,WAASD,YAAT,GAAwB;AACtB,QAAIE,KAAJ,EAAWC,KAAX;;AAEA,SAAK,IAAIC,OAAOC,UAAUC,MAArB,EAA6BC,OAAO,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,OAAO,CAAjE,EAAoEA,OAAOL,IAA3E,EAAiFK,MAAjF,EAAyF;AACvFF,WAAKE,IAAL,IAAaJ,UAAUI,IAAV,CAAb;AACD;;AAED,WAAO,CAACP,QAAQC,QAAQF,iBAAiBS,IAAjB,CAAsBC,KAAtB,CAA4BV,gBAA5B,EAA8C,CAAC,IAAD,EAAOW,MAAP,CAAcL,IAAd,CAA9C,KAAsE,IAAtF,EAA4FJ,MAAMU,KAAN,GAAc;AAChHC,YAAM;AAD0G,KAA1G,EAELX,MAAMY,UAAN,GAAmB,YAAY;AAChCZ,YAAMa,QAAN,CAAe;AACbF,cAAM,IADO;AAEbG,gBAAQd,MAAMe;AAFD,OAAf;AAID,KAPO,EAOLf,MAAMgB,WAAN,GAAoB,YAAY;AACjChB,YAAMa,QAAN,CAAe;AACbF,cAAM;AADO,OAAf;AAGD,KAXO,EAWLX,MAAMiB,YAAN,GAAqB,UAAUF,SAAV,EAAqB;AAC3Cf,YAAMe,SAAN,GAAkBA,SAAlB;AACD,KAbO,EAaLhB,KAbI,KAaM,qCAAuBC,KAAvB,CAbb;AAcD;;AAED,MAAIkB,SAASrB,aAAasB,SAA1B;;AAEAD,SAAOE,aAAP,GAAuB,SAASA,aAAT,CAAuBC,UAAvB,EAAmC;AACxD,QAAIC,SAAS,IAAb;;AAEA,QAAIC,SAAS,KAAKC,KAAlB;AAAA,QACIC,WAAWF,OAAOE,QADtB;AAAA,QAEIC,iBAAiBH,OAAOG,cAF5B;AAGA,WAAO,mBAAK,QAAL,EAAe;AACpB9B,iBAAW,mBADS;AAEpB+B,eAAS,SAASA,OAAT,GAAmB;AAC1B,eAAOL,OAAOM,YAAP,CAAoBP,UAApB,CAAP;AACD;AAJmB,KAAf,EAKJA,UALI,EAKQ,mBAAKQ,4BAAL,EAA0B;AACvCC,YAAMT,UADiC;AAEvCU,cAAQL,eAAeL,UAAf,CAF+B;AAGvCW,cAAQP,aAAaJ;AAHkB,KAA1B,CALR,CAAP;AAUD,GAhBD;;AAkBAH,SAAOU,YAAP,GAAsB,SAASA,YAAT,CAAsBP,UAAtB,EAAkC;AACtD,SAAKL,WAAL;AACA,SAAKQ,KAAL,CAAWS,QAAX,CAAoBZ,UAApB;AACD,GAHD;;AAKAH,SAAOgB,MAAP,GAAgB,SAASA,MAAT,GAAkB;AAChC,QAAIC,SAAS,IAAb;;AAEA,QAAIC,UAAU,KAAKZ,KAAnB;AAAA,QACI5B,YAAYwC,QAAQxC,SADxB;AAAA,QAEI6B,WAAWW,QAAQX,QAFvB;AAAA,QAGIC,iBAAiBU,QAAQV,cAH7B;AAAA,QAIIW,qBAAqBD,QAAQC,kBAJjC;AAKA,QAAIC,cAAcC,OAAOC,IAAP,CAAYH,oBAAZ,CAAlB;AACA,QAAII,UAAUH,YAAYI,MAAZ,CAAmB,UAAUZ,IAAV,EAAgB;AAC/C,aAAOA,SAASL,QAAhB;AACD,KAFa,EAEXkB,GAFW,CAEP,UAAUb,IAAV,EAAgB;AACrB,aAAOK,OAAOf,aAAP,CAAqBU,IAArB,CAAP;AACD,KAJa,CAAd;AAKA,WAAOc,eAAMxB,aAAN,CAAoB,KAApB,EAA2B;AAChCxB,iBAAW,yBAAG,cAAH,EAAmBA,SAAnB,CADqB;AAEhCiD,WAAK,KAAK5B;AAFsB,KAA3B,EAGJ,mBAAK,QAAL,EAAe;AAChBrB,iBAAW,qBADK;AAEhB+B,eAAS,KAAKf;AAFE,KAAf,EAGA,KAAK,CAHL,EAGQ,mBAAKiB,4BAAL,EAA0B;AACnCC,YAAML,QAD6B;AAEnCM,cAAQL,eAAeD,QAAf,CAF2B;AAGnCO,cAAQ;AAH2B,KAA1B,CAHR,EAOCtC,IAPD,CAHI,EAUIkD,eAAMxB,aAAN,CAAoB0B,gBAApB,EAA6B,uBAAS;AAC/CC,eAAS;AACPC,eAAO;AADA,OADsC;AAI/CrC,YAAM,KAAKD,KAAL,CAAWC,IAJ8B;AAK/CsC,gBAAU,KAAKvC,KAAL,CAAWI,MAL0B;AAM/CoC,eAAS,KAAKlC;AANiC,KAAT,EAOrC3B,eAPqC,CAA7B,EAOUoD,OAPV,CAVJ,CAAP;AAkBD,GAhCD;;AAkCA,SAAO5C,YAAP;AACD,CAtFD,CAsFE+C,eAAMO,SAtFR,CAFA;;AA0FAtD,aAAauD,SAAb,GAAyBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC/D3D,aAAW4D,mBAAUC,MAD0C;AAE/DhC,YAAU+B,mBAAUC,MAF2C;AAG/DxB,YAAUuB,mBAAUE,IAH2C;AAI/DhC,kBAAgB8B,mBAAUE,IAAV,CAAeC,UAJgC;AAK/DtB,sBAAoBmB,mBAAUE,IAAV,CAAeC;AAL4B,CAAxC,GAMrB,EANJ;;eAOevE,QAAQS,YAAR,C,EACf","file":"SourcePicker.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Popover from 'material-ui/Popover';\nimport ArrowIcon from '@material-ui/icons/ArrowDropDown';\nimport injectMediaSources from '../../../utils/injectMediaSources';\nimport SourcePickerElement from './SourcePickerElement';\n\nconst enhance = injectMediaSources();\n\nconst popoverPosition = {\n  anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n  transformOrigin: { vertical: 'top', horizontal: 'left' },\n};\n\nclass SourcePicker extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    selected: PropTypes.string,\n    onChange: PropTypes.func,\n\n    getMediaSource: PropTypes.func.isRequired,\n    getAllMediaSources: PropTypes.func.isRequired,\n  };\n\n  state = { open: false };\n\n  createElement(sourceName) {\n    const { selected, getMediaSource } = this.props;\n    return (\n      <button\n        className=\"SourcePicker-item\"\n        key={sourceName}\n        onClick={() => this.handleChange(sourceName)}\n      >\n        <SourcePickerElement\n          name={sourceName}\n          source={getMediaSource(sourceName)}\n          active={selected === sourceName}\n        />\n      </button>\n    );\n  }\n\n  handleOpen = () => {\n    this.setState({\n      open: true,\n      anchor: this.container,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleChange(sourceName) {\n    this.handleClose();\n    this.props.onChange(sourceName);\n  }\n\n  refContainer = (container) => {\n    this.container = container;\n  };\n\n  render() {\n    const {\n      className,\n      selected,\n      getMediaSource,\n      getAllMediaSources,\n    } = this.props;\n\n    const sourceNames = Object.keys(getAllMediaSources());\n    const sources = sourceNames\n      .filter(name => name !== selected)\n      .map(name => this.createElement(name));\n\n    return (\n      <div\n        className={cx('SourcePicker', className)}\n        ref={this.refContainer}\n      >\n        <button\n          className=\"SourcePicker-active\"\n          onClick={this.handleOpen}\n        >\n          <SourcePickerElement\n            name={selected}\n            source={getMediaSource(selected)}\n            active\n          />\n          <ArrowIcon className=\"SourcePicker-arrow\" />\n        </button>\n        <Popover\n          classes={{ paper: 'SourcePicker-list' }}\n          open={this.state.open}\n          anchorEl={this.state.anchor}\n          onClose={this.handleClose}\n          {...popoverPosition}\n        >\n          {sources}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nexport default enhance(SourcePicker);\n"]}