{"version":3,"sources":["components/PlaylistManager/Header/SourcePicker.js"],"names":["SourcePicker","_React$Component","_temp","_this","_ret","_len","arguments","length","args","Array","_key","call","apply","concat","state","open","handleOpen","setState","anchor","container","handleClose","refContainer","prototype","createElement","sourceName","_this2","_props","props","selected","getMediaSource","className","onClick","handleChange","name","source","active","onChange","render","_this3","_props2","muiTheme","getAllMediaSources","sourceNames","Object","keys","sources","filter","map","ref","color","palette","textColor","style","height","anchorEl","onRequestClose","Component","propTypes","process","env","NODE_ENV","string","func","object","isRequired"],"mappings":"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","file":"SourcePicker.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport Popover from 'material-ui/Popover';\nimport ArrowIcon from 'material-ui/svg-icons/navigation/arrow-drop-down';\nimport muiThemeable from 'material-ui/styles/muiThemeable';\n\nimport injectMediaSources from '../../../utils/injectMediaSources';\nimport SourcePickerElement from './SourcePickerElement';\n\nclass SourcePicker extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    selected: PropTypes.string,\n    onChange: PropTypes.func,\n\n    muiTheme: PropTypes.object.isRequired,\n    getMediaSource: PropTypes.func.isRequired,\n    getAllMediaSources: PropTypes.func.isRequired\n  };\n\n  state = { open: false };\n\n  createElement(sourceName) {\n    const { selected, getMediaSource } = this.props;\n    return (\n      <button\n        className=\"SourcePicker-item\"\n        key={sourceName}\n        onClick={() => this.handleChange(sourceName)}\n      >\n        <SourcePickerElement\n          name={sourceName}\n          source={getMediaSource(sourceName)}\n          active={selected === sourceName}\n        />\n      </button>\n    );\n  }\n\n  handleOpen = () => {\n    this.setState({\n      open: true,\n      anchor: this.container\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleChange(sourceName) {\n    this.handleClose();\n    this.props.onChange(sourceName);\n  }\n\n  refContainer = (container) => {\n    this.container = container;\n  };\n\n  render() {\n    const {\n      className,\n      selected,\n      muiTheme,\n      getMediaSource,\n      getAllMediaSources\n    } = this.props;\n\n    const sourceNames = Object.keys(getAllMediaSources());\n    const sources = sourceNames\n      .filter(name => name !== selected)\n      .map(name => this.createElement(name));\n\n    return (\n      <div\n        className={cx('SourcePicker', className)}\n        ref={this.refContainer}\n      >\n        <button\n          className=\"SourcePicker-active\"\n          onClick={this.handleOpen}\n        >\n          <SourcePickerElement\n            name={selected}\n            source={getMediaSource(selected)}\n            active\n          />\n          <ArrowIcon\n            color={muiTheme.palette.textColor}\n            style={{ height: '100%' }}\n          />\n        </button>\n        <Popover\n          className=\"SourcePicker-list\"\n          open={this.state.open}\n          anchorEl={this.state.anchor}\n          onRequestClose={this.handleClose}\n        >\n          {sources}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectMediaSources(),\n  muiThemeable()\n)(SourcePicker);\n"]}