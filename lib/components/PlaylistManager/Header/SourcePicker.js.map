{"version":3,"sources":["components/PlaylistManager/Header/SourcePicker.js"],"names":["enhance","popoverPosition","anchorOrigin","vertical","horizontal","transformOrigin","_ref","className","SourcePicker","_React$Component","_temp","_this","_ret","_len","arguments","length","args","Array","_key","call","apply","concat","state","open","handleOpen","setState","anchor","container","handleClose","refContainer","prototype","createElement","sourceName","_this2","_props","props","selected","getMediaSource","onClick","handleChange","name","source","active","onChange","render","_this3","_props2","getAllMediaSources","sourceNames","Object","keys","sources","filter","map","ref","classes","paper","anchorEl","onClose","Component","propTypes","process","env","NODE_ENV","string","func","isRequired"],"mappings":"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","file":"SourcePicker.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Popover from 'material-ui/Popover';\nimport ArrowIcon from 'material-ui-icons/ArrowDropDown';\nimport injectMediaSources from '../../../utils/injectMediaSources';\nimport SourcePickerElement from './SourcePickerElement';\n\nconst enhance = injectMediaSources();\n\nconst popoverPosition = {\n  anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n  transformOrigin: { vertical: 'top', horizontal: 'left' },\n};\n\nclass SourcePicker extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    selected: PropTypes.string,\n    onChange: PropTypes.func,\n\n    getMediaSource: PropTypes.func.isRequired,\n    getAllMediaSources: PropTypes.func.isRequired,\n  };\n\n  state = { open: false };\n\n  createElement(sourceName) {\n    const { selected, getMediaSource } = this.props;\n    return (\n      <button\n        className=\"SourcePicker-item\"\n        key={sourceName}\n        onClick={() => this.handleChange(sourceName)}\n      >\n        <SourcePickerElement\n          name={sourceName}\n          source={getMediaSource(sourceName)}\n          active={selected === sourceName}\n        />\n      </button>\n    );\n  }\n\n  handleOpen = () => {\n    this.setState({\n      open: true,\n      anchor: this.container,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleChange(sourceName) {\n    this.handleClose();\n    this.props.onChange(sourceName);\n  }\n\n  refContainer = (container) => {\n    this.container = container;\n  };\n\n  render() {\n    const {\n      className,\n      selected,\n      getMediaSource,\n      getAllMediaSources,\n    } = this.props;\n\n    const sourceNames = Object.keys(getAllMediaSources());\n    const sources = sourceNames\n      .filter(name => name !== selected)\n      .map(name => this.createElement(name));\n\n    return (\n      <div\n        className={cx('SourcePicker', className)}\n        ref={this.refContainer}\n      >\n        <button\n          className=\"SourcePicker-active\"\n          onClick={this.handleOpen}\n        >\n          <SourcePickerElement\n            name={selected}\n            source={getMediaSource(selected)}\n            active\n          />\n          <ArrowIcon className=\"SourcePicker-arrow\" />\n        </button>\n        <Popover\n          classes={{ paper: 'SourcePicker-list' }}\n          open={this.state.open}\n          anchorEl={this.state.anchor}\n          onClose={this.handleClose}\n          {...popoverPosition}\n        >\n          {sources}\n        </Popover>\n      </div>\n    );\n  }\n}\n\nexport default enhance(SourcePicker);\n"]}