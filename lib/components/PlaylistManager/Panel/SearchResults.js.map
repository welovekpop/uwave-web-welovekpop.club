{"version":3,"sources":["components/PlaylistManager/Panel/SearchResults.js"],"names":["_ref2","className","size","SearchResults","_ref","t","query","results","loadingState","onOpenAddMediaMenu","onOpenPreviewMediaDialog","list","media","makeActions","selection","Fragment","onAdd","position","propTypes","process","env","NODE_ENV","func","isRequired","string","arrayOf","object","oneOf"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAIA,QAAQ,mBAAK,KAAL,EAAY;AACtBC,aAAW;AADW,CAAZ,EAET,KAAK,CAFI,EAED,+CAAuB;AAChCC,QAAM;AAD0B,CAAvB,CAFC,CAAZ;;AAMA,IAAIC,gBAAgB,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC/C,MAAIC,IAAID,KAAKC,CAAb;AAAA,MACIJ,YAAYG,KAAKH,SADrB;AAAA,MAEIK,QAAQF,KAAKE,KAFjB;AAAA,MAGIC,UAAUH,KAAKG,OAHnB;AAAA,MAIIC,eAAeJ,KAAKI,YAJxB;AAAA,MAKIC,qBAAqBL,KAAKK,kBAL9B;AAAA,MAMIC,2BAA2BN,KAAKM,wBANpC;;AAQA,MAAIC,OAAO,KAAK,CAAhB;AACA,MAAIH,sCAAJ,EAA6B;AAC3BG,WAAO,wCAAgB;AACrBV,iBAAW,qBADU;AAErBW,aAAOL,OAFc;AAGrBG,gCAA0BA,wBAHL;AAIrBG,mBAAa,SAASA,WAAT,CAAqBD,KAArB,EAA4BE,SAA5B,EAAuC;AAClD,eAAO,mBAAK,gBAAMC,QAAX,EAAqB,EAArB,EAAyB,KAAK,CAA9B,EAAiC,4CAA0B;AAChEC,iBAAO,SAASA,KAAT,CAAeC,QAAf,EAAyB;AAC9B,mBAAOR,mBAAmBQ,QAAnB,EAA6BL,KAA7B,EAAoCE,SAApC,CAAP;AACD;AAH+D,SAA1B,CAAjC,CAAP;AAKD;AAVoB,KAAhB,CAAP;AAYD,GAbD,MAaO;AACLH,WAAOX,KAAP;AACD;;AAED,SAAO,mBAAK,KAAL,EAAY;AACjBC,eAAW,0BAAG,eAAH,EAAoB,eAApB,EAAqCA,SAArC;AADM,GAAZ,EAEJ,KAAK,CAFD,EAEI,mBAAK,KAAL,EAAY;AACrBA,eAAW;AADU,GAAZ,EAER,KAAK,CAFG,EAEAI,EAAE,0BAAF,EAA8B,EAAEC,OAAOA,KAAT,EAA9B,CAFA,CAFJ,EAIsDK,IAJtD,CAAP;AAKD,CAhCD;;AAkCAR,cAAce,SAAd,GAA0BC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAChEhB,KAAG,oBAAUiB,IAAV,CAAeC,UAD8C;AAEhEtB,aAAW,oBAAUuB,MAF2C;AAGhElB,SAAO,oBAAUkB,MAAV,CAAiBD,UAHwC;AAIhEhB,WAAS,oBAAUkB,OAAV,CAAkB,oBAAUC,MAA5B,CAJuD;AAKhElB,gBAAc,oBAAUmB,KAAV,CAAgB,oEAAhB,EAAyCJ,UALS;AAMhEd,sBAAoB,oBAAUa,IAAV,CAAeC,UAN6B;AAOhEb,4BAA0B,oBAAUY,IAAV,CAAeC;AAPuB,CAAxC,GAQtB,EARJ;;kBAUe,+BAAYpB,aAAZ,C;AACf","file":"SearchResults.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { CircularProgress } from 'material-ui/Progress';\nimport { IDLE, LOADING, LOADED } from '../../../constants/LoadingStates';\nimport MediaList from '../../MediaList';\nimport AddToPlaylistAction from '../../MediaList/Actions/AddToPlaylist';\n\nconst SearchResults = ({\n  t,\n  className,\n  query,\n  results,\n  loadingState,\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog,\n}) => {\n  let list;\n  if (loadingState === LOADED) {\n    list = (\n      <MediaList\n        className=\"PlaylistPanel-media\"\n        media={results}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        makeActions={(media, selection) => (\n          <React.Fragment>\n            <AddToPlaylistAction\n              onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n            />\n          </React.Fragment>\n        )}\n      />\n    );\n  } else {\n    list = (\n      <div className=\"PlaylistPanel-loading\">\n        <CircularProgress size=\"100%\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className={cx('PlaylistPanel', 'SearchResults', className)}>\n      <div className=\"SearchResults-query\">\n        {t('playlists.search.results', { query })}\n      </div>\n      {list}\n    </div>\n  );\n};\n\nSearchResults.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  query: PropTypes.string.isRequired,\n  results: PropTypes.arrayOf(PropTypes.object),\n  loadingState: PropTypes.oneOf([IDLE, LOADING, LOADED]).isRequired,\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired,\n};\n\nexport default translate()(SearchResults);\n"]}