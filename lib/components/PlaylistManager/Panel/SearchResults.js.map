{"version":3,"sources":["components/PlaylistManager/Panel/SearchResults.js"],"names":["_ref2","className","size","SearchResults","_ref","t","query","results","loadingState","onOpenAddMediaMenu","onOpenPreviewMediaDialog","list","media","makeActions","selection","onAdd","position","propTypes","process","env","NODE_ENV","func","isRequired","string","arrayOf","object","oneOf"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAIA,QAAQ,mBAAK,KAAL,EAAY;AACtBC,aAAW;AADW,CAAZ,EAET,KAAK,CAFI,EAED,qCAAa;AACtBC,QAAM;AADgB,CAAb,CAFC,CAAZ;;AAMA,IAAIC,gBAAgB,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC/C,MAAIC,IAAID,KAAKC,CAAb;AAAA,MACIJ,YAAYG,KAAKH,SADrB;AAAA,MAEIK,QAAQF,KAAKE,KAFjB;AAAA,MAGIC,UAAUH,KAAKG,OAHnB;AAAA,MAIIC,eAAeJ,KAAKI,YAJxB;AAAA,MAKIC,qBAAqBL,KAAKK,kBAL9B;AAAA,MAMIC,2BAA2BN,KAAKM,wBANpC;;AAQA,MAAIC,OAAO,KAAK,CAAhB;AACA,MAAIH,sCAAJ,EAA6B;AAC3BG,WAAO,wCAAgB;AACrBV,iBAAW,qBADU;AAErBW,aAAOL,OAFc;AAGrBG,gCAA0BA,wBAHL;AAIrBG,mBAAa,SAASA,WAAT,CAAqBD,KAArB,EAA4BE,SAA5B,EAAuC;AAClD,eAAO,CAAC,4CAA0B;AAChCC,iBAAO,SAASA,KAAT,CAAeC,QAAf,EAAyB;AAC9B,mBAAOP,mBAAmBO,QAAnB,EAA6BJ,KAA7B,EAAoCE,SAApC,CAAP;AACD;AAH+B,SAA1B,EAIL,KAJK,CAAD,CAAP;AAKD;AAVoB,KAAhB,CAAP;AAYD,GAbD,MAaO;AACLH,WAAOX,KAAP;AACD;;AAED,SAAO,mBAAK,KAAL,EAAY;AACjBC,eAAW,0BAAG,eAAH,EAAoB,eAApB,EAAqCA,SAArC;AADM,GAAZ,EAEJ,KAAK,CAFD,EAEI,mBAAK,KAAL,EAAY;AACrBA,eAAW;AADU,GAAZ,EAER,KAAK,CAFG,EAEAI,EAAE,0BAAF,EAA8B,EAAEC,OAAOA,KAAT,EAA9B,CAFA,CAFJ,EAIsDK,IAJtD,CAAP;AAKD,CAhCD;;AAkCAR,cAAcc,SAAd,GAA0BC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAChEf,KAAG,oBAAUgB,IAAV,CAAeC,UAD8C;AAEhErB,aAAW,oBAAUsB,MAF2C;AAGhEjB,SAAO,oBAAUiB,MAAV,CAAiBD,UAHwC;AAIhEf,WAAS,oBAAUiB,OAAV,CAAkB,oBAAUC,MAA5B,CAJuD;AAKhEjB,gBAAc,oBAAUkB,KAAV,CAAgB,oEAAhB,EAAyCJ,UALS;AAMhEb,sBAAoB,oBAAUY,IAAV,CAAeC,UAN6B;AAOhEZ,4BAA0B,oBAAUW,IAAV,CAAeC;AAPuB,CAAxC,GAQtB,EARJ;;kBAUe,+BAAYnB,aAAZ,C;AACf","file":"SearchResults.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport { IDLE, LOADING, LOADED } from '../../../constants/LoadingStates';\nimport Loader from '../../Loader';\nimport MediaList from '../../MediaList';\n\nimport AddToPlaylistAction from '../../MediaList/Actions/AddToPlaylist';\n\nconst SearchResults = ({\n  t,\n  className,\n  query,\n  results,\n  loadingState,\n  onOpenAddMediaMenu,\n  onOpenPreviewMediaDialog\n}) => {\n  let list;\n  if (loadingState === LOADED) {\n    list = (\n      <MediaList\n        className=\"PlaylistPanel-media\"\n        media={results}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        makeActions={(media, selection) => [\n          <AddToPlaylistAction\n            key=\"add\"\n            onAdd={position => onOpenAddMediaMenu(position, media, selection)}\n          />\n        ]}\n      />\n    );\n  } else {\n    list = (\n      <div className=\"PlaylistPanel-loading\">\n        <Loader size=\"large\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className={cx('PlaylistPanel', 'SearchResults', className)}>\n      <div className=\"SearchResults-query\">\n        {t('playlists.search.results', { query })}\n      </div>\n      {list}\n    </div>\n  );\n};\n\nSearchResults.propTypes = {\n  t: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  query: PropTypes.string.isRequired,\n  results: PropTypes.arrayOf(PropTypes.object),\n  loadingState: PropTypes.oneOf([ IDLE, LOADING, LOADED ]).isRequired,\n  onOpenAddMediaMenu: PropTypes.func.isRequired,\n  onOpenPreviewMediaDialog: PropTypes.func.isRequired\n};\n\nexport default translate()(SearchResults);\n"]}