{"version":3,"sources":["components/MediaList/index.js"],"names":["didMediaChange","prev","next","some","item","i","_id","MediaList","_React$Component","_temp","_this","_ret","_len","arguments","length","args","Array","_key","call","apply","concat","state","selection","props","media","renderRow","index","_makeActions","makeActions","rowProps","selected","isSelectedIndex","className","MediaRow","rowComponent","isAlternate","createElement","key","get","onClick","e","selectItem","onOpenPreviewMediaDialog","prototype","componentWillReceiveProps","nextProps","getIndices","mediaChanged","setState","preventDefault","shiftKey","selectRange","ctrlKey","selectToggle","select","render","_props","size","onRequestPage","list","itemRenderer","type","forceUpdateOnMediaChange","forceUpdateOnSelectionChange","items","pageSize","Component","_ref","defaultProps","propTypes","process","env","NODE_ENV","string","array","number","func","object"],"mappings":"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","file":"index.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport BaseList from 'react-list';\nimport LazyList from 'react-list-lazy-load';\nimport itemSelection from 'item-selection/immutable';\nimport Row from './Row';\nimport LoadingRow from './LoadingRow';\n\n/**\n * Check if two media lists are different, taking into account\n * pagination. If the new media list contains items where the previous\n * list doesn't, but every other item is identical, we assume\n * the new list has just loaded a page that wasn't loaded in the\n * previous one, and decide that the list is not really different.\n */\nfunction didMediaChange(prev, next) {\n  return prev.some((item, i) => item && next[i] && item._id !== next[i]._id);\n}\n\nexport default class MediaList extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    media: PropTypes.array,\n    size: PropTypes.number,\n    onRequestPage: PropTypes.func,\n    rowComponent: PropTypes.func,\n    rowProps: PropTypes.object,\n\n    onOpenPreviewMediaDialog: PropTypes.func,\n    makeActions: PropTypes.func\n  };\n\n  static defaultProps = {\n    // The `size` property is only necessary for lazy loading.\n    size: null,\n    rowComponent: Row,\n    makeActions: () => <span />\n  };\n\n  state = { selection: itemSelection(this.props.media) };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.media !== this.props.media) {\n      const selection = this.state.selection.getIndices();\n      const mediaChanged = didMediaChange(this.props.media, nextProps.media);\n      this.setState({\n        selection: mediaChanged\n          ? itemSelection(nextProps.media)\n          : itemSelection(nextProps.media, selection)\n      });\n    }\n  }\n\n  selectItem(index, e) {\n    e.preventDefault();\n\n    let { selection } = this.state;\n\n    if (e.shiftKey) {\n      selection = selection.selectRange(index);\n    } else if (e.ctrlKey) {\n      selection = selection.selectToggle(index);\n    } else {\n      selection = selection.select(index);\n    }\n\n    this.setState({ selection });\n  }\n\n  renderRow = (index) => {\n    const { makeActions } = this.props;\n    const props = this.props.rowProps || {};\n    const media = this.props.media[index];\n    const { selection } = this.state;\n    const selected = selection.isSelectedIndex(index);\n    if (!media) {\n      return (\n        <LoadingRow\n          key={index}\n          className=\"MediaList-row\"\n          selected={selected}\n        />\n      );\n    }\n    const MediaRow = this.props.rowComponent;\n    const isAlternate = index % 2 === 0;\n    return (\n      <MediaRow\n        key={media ? media._id : index}\n        {...props}\n        className={cx('MediaList-row', isAlternate && 'MediaListRow--alternate')}\n        media={media}\n        selected={selected}\n        selection={selection.get()}\n        onClick={e => this.selectItem(index, e)}\n        onOpenPreviewMediaDialog={this.props.onOpenPreviewMediaDialog}\n        makeActions={() => makeActions(media, selection, index)}\n      />\n    );\n  };\n\n  render() {\n    const {\n      className, media, size, onRequestPage\n    } = this.props;\n    let list = (\n      <BaseList\n        itemRenderer={this.renderRow}\n        length={size || media.length}\n        type=\"uniform\"\n        forceUpdateOnMediaChange={media}\n        forceUpdateOnSelectionChange={this.state.selection}\n      />\n    );\n    if (onRequestPage) {\n      list = (\n        <LazyList\n          items={media}\n          length={size || media.length}\n          pageSize={50}\n          onRequestPage={onRequestPage}\n        >\n          {list}\n        </LazyList>\n      );\n    }\n    return (\n      <div className={cx('MediaList', className)}>\n        {list}\n      </div>\n    );\n  }\n}\n"]}