{"version":3,"sources":["components/MediaList/BaseMediaList.js"],"names":["item","next","BaseMediaList","state","selection","itemSelection","renderList","ref","renderRow","selected","media","index","makeActions","componentWillReceiveProps","nextProps","selectedIndices","mediaChanged","didMediaChange","selectItem","e","render","list","size","onRequestPage","cx","React","Component","defaultProps","propTypes","className","PropTypes","listComponent","rowComponent","rowProps","onOpenPreviewMediaDialog","func"],"mappings":"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","file":"BaseMediaList.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport BaseList from 'react-list';\nimport LazyList from 'react-list-lazy-load';\nimport itemSelection from 'item-selection/immutable';\nimport LoadingRow from './LoadingRow';\n\n/**\n * Check if two media lists are different, taking into account\n * pagination. If the new media list contains items where the previous\n * list doesn't, but every other item is identical, we assume\n * the new list has just loaded a page that wasn't loaded in the\n * previous one, and decide that the list is not really different.\n */\nfunction didMediaChange(prev, next) {\n  return prev.some((item, i) => item && next[i] && item._id !== next[i]._id);\n}\n\nexport default class BaseMediaList extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    media: PropTypes.array,\n    size: PropTypes.number,\n    onRequestPage: PropTypes.func,\n    listComponent: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func,\n    ]).isRequired,\n    rowComponent: PropTypes.func.isRequired,\n    rowProps: PropTypes.object,\n\n    onOpenPreviewMediaDialog: PropTypes.func,\n    makeActions: PropTypes.func,\n  };\n\n  static defaultProps = {\n    // The `size` property is only necessary for lazy loading.\n    size: null,\n    makeActions: () => <span />,\n  };\n\n  state = {\n    // eslint-disable-next-line react/destructuring-assignment\n    selection: itemSelection(this.props.media),\n  };\n\n  componentWillReceiveProps(nextProps) {\n    const { media } = this.props;\n    const { selection } = this.state;\n\n    if (nextProps.media !== media) {\n      const selectedIndices = selection.getIndices();\n      const mediaChanged = didMediaChange(media, nextProps.media);\n      this.setState({\n        selection: mediaChanged\n          ? itemSelection(nextProps.media)\n          : itemSelection(nextProps.media, selectedIndices),\n      });\n    }\n  }\n\n  selectItem(index, e) {\n    e.preventDefault();\n\n    let { selection } = this.state;\n\n    if (e.shiftKey) {\n      selection = selection.selectRange(index);\n    } else if (e.ctrlKey) {\n      selection = selection.selectToggle(index);\n    } else {\n      selection = selection.select(index);\n    }\n\n    this.setState({ selection });\n  }\n\n  renderList = (items, ref) => {\n    const { listComponent: ListComponent } = this.props;\n\n    return (\n      <ListComponent ref={ref}>\n        {items}\n      </ListComponent>\n    );\n  };\n\n  renderRow = (index) => {\n    const {\n      makeActions,\n      rowProps: props = {},\n      media,\n      rowComponent: RowComponent,\n      onOpenPreviewMediaDialog,\n    } = this.props;\n    const { selection } = this.state;\n\n    const selected = selection.isSelectedIndex(index);\n    if (!media[index]) {\n      return (\n        <LoadingRow\n          key={index}\n          className=\"MediaList-row\"\n          selected={selected}\n        />\n      );\n    }\n\n    return (\n      <RowComponent\n        key={media[index] ? media[index]._id : index}\n        {...props}\n        className=\"MediaList-row\"\n        media={media[index]}\n        selected={selected}\n        selection={selection.get()}\n        onClick={e => this.selectItem(index, e)}\n        onOpenPreviewMediaDialog={onOpenPreviewMediaDialog}\n        makeActions={() => makeActions(media[index], selection, index)}\n      />\n    );\n  };\n\n  render() {\n    const {\n      className, media, size, onRequestPage,\n    } = this.props;\n    const { selection } = this.state;\n\n    let list = (\n      <BaseList\n        itemsRenderer={this.renderList}\n        itemRenderer={this.renderRow}\n        length={size || media.length}\n        type=\"uniform\"\n        forceUpdateOnMediaChange={media}\n        forceUpdateOnSelectionChange={selection}\n      />\n    );\n\n    if (onRequestPage) {\n      list = (\n        <LazyList\n          items={media}\n          length={size || media.length}\n          pageSize={50}\n          onRequestPage={onRequestPage}\n        >\n          {list}\n        </LazyList>\n      );\n    }\n\n    return (\n      <div className={cx('MediaList', className)}>\n        {list}\n      </div>\n    );\n  }\n}\n"]}