{"version":3,"sources":["components/FooterBar/WaitlistButton.js"],"names":["WaitlistButton","_ref","t","userInWaitlist","isLocked","onClick","icon","className","classes","root","disabled","propTypes","process","env","NODE_ENV","func","isRequired","bool"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,iBAAiB,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;AACjD,MAAIC,IAAID,KAAKC,CAAb;AAAA,MACIC,iBAAiBF,KAAKE,cAD1B;AAAA,MAEIC,WAAWH,KAAKG,QAFpB;AAAA,MAGIC,UAAUJ,KAAKI,OAHnB;;AAKA,MAAIC,OAAO,KAAK,CAAhB;AACA,MAAIF,QAAJ,EAAc;AACZE,WAAO,mCAAiB;AACtBC,iBAAW,0BAAG,oBAAH;AACX;AACA;AACA,OAACJ,cAAD,IAAmB,4BAHR;AADW,KAAjB,CAAP;AAMD;;AAED,SAAO,qCAAa;AAClBK,aAAS;AACPC,YAAM,gBADC;AAEPC,gBAAU;AAFH,KADS;AAKlBA,cAAUN,YAAY,CAACD,cALL;AAMlBE,aAASA;AANS,GAAb,EAOJ,KAAK,CAPD,EAOIC,IAPJ,EAOUF,YAAY,GAPtB,EAO2BD,iBAAiBD,EAAE,gBAAF,CAAjB,GAAuCA,EAAE,eAAF,CAPlE,CAAP;AAQD,CAxBD;;AA0BAF,eAAeW,SAAf,GAA2BC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AACjEZ,KAAG,oBAAUa,IAAV,CAAeC,UAD+C;AAEjEb,kBAAgB,oBAAUc,IAFuC;AAGjEb,YAAU,oBAAUa,IAH6C;AAIjEZ,WAAS,oBAAUU,IAAV,CAAeC;AAJyC,CAAxC,GAKvB,EALJ;;kBAOe,uBAAQ,8BAAR,kBAA2BhB,cAA3B,C;AACf","file":"WaitlistButton.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport compose from 'recompose/compose';\nimport pure from 'recompose/pure';\nimport Button from 'material-ui/Button';\nimport LockedIcon from 'material-ui-icons/Lock';\n\nconst WaitlistButton = ({\n  t,\n  userInWaitlist,\n  isLocked,\n  onClick,\n}) => {\n  let icon;\n  if (isLocked) {\n    icon = (\n      <LockedIcon\n        className={cx(\n          'FooterBar-joinIcon',\n          // The user can still leave the waitlist, if it's locked,\n          // but cannot join the waitlist.\n          !userInWaitlist && 'FooterBar-joinIcon--locked',\n        )}\n      />\n    );\n  }\n\n  return (\n    <Button\n      classes={{\n        root: 'FooterBar-join',\n        disabled: 'FooterBar-join--locked',\n      }}\n      disabled={isLocked && !userInWaitlist}\n      onClick={onClick}\n    >\n      {icon}\n      {isLocked && ' '}\n      {userInWaitlist ? t('waitlist.leave') : t('waitlist.join')}\n    </Button>\n  );\n};\n\nWaitlistButton.propTypes = {\n  t: PropTypes.func.isRequired,\n  userInWaitlist: PropTypes.bool,\n  isLocked: PropTypes.bool,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default compose(\n  translate(),\n  pure,\n)(WaitlistButton);\n"]}