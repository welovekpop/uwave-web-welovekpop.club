{"version":3,"sources":["components/Video/index.js"],"names":["defaultSourceTools","enhance","_ref","className","Video","_React$Component","_temp","_this","_len","arguments","length","args","Array","_key","call","apply","concat","state","shouldShowToolbar","handleFullscreenEnter","screenfull","enabled","request","element","props","onFullscreenEnter","handleFullscreenChange","isFullscreen","onFullscreenExit","handleMouseMove","timer","clearTimeout","setState","setTimeout","handleMouseMoveEnd","refElement","_proto","prototype","componentDidMount","on","componentWillReceiveProps","nextProps","exit","shouldComponentUpdate","render","_this$props","getMediaSource","size","volume","isMuted","media","seek","currentSource","sourceType","MediaSourceTools","VideoTools","React","createElement","ref","VideoBackdrop","url","thumbnail","Player","MouseMoveCapture","active","onMouseMove","VideoProgressBar","VideoToolbar","Component","propTypes","process","env","NODE_ENV","PropTypes","func","isRequired","bool","string","number","object"],"mappings":"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","file":"index.js","sourcesContent":["import cx from 'classnames';\nimport isEqual from 'is-equal-shallow';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport screenfull from 'screenfull';\nimport injectMediaSources from '../../utils/injectMediaSources';\nimport VideoBackdrop from './VideoBackdrop';\nimport VideoProgressBar from './VideoProgressBar';\nimport VideoToolbar from './VideoToolbar';\nimport MouseMoveCapture from './VideoMouseMoveCapture';\nimport Player from '../Player';\n\nconst defaultSourceTools = () => null;\n\nconst enhance = injectMediaSources();\n\nclass Video extends React.Component {\n  static propTypes = {\n    getMediaSource: PropTypes.func.isRequired,\n    isFullscreen: PropTypes.bool,\n    enabled: PropTypes.bool,\n    size: PropTypes.string,\n    volume: PropTypes.number,\n    isMuted: PropTypes.bool,\n    media: PropTypes.object,\n    seek: PropTypes.number,\n    onFullscreenEnter: PropTypes.func.isRequired,\n    onFullscreenExit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    shouldShowToolbar: false,\n  };\n\n  componentDidMount() {\n    if (screenfull.enabled) {\n      screenfull.on('change', this.handleFullscreenChange);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.isFullscreen && !nextProps.isFullscreen && screenfull.enabled) {\n      // Checking for `enabled` here, because our props have probably changed\n      // _after_ exiting fullscreen mode (see `this.handleFullscreenChange`).\n      // This way we don't double-exit.\n      if (screenfull.isFullscreen) {\n        screenfull.exit();\n      }\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return !isEqual(nextProps, this.props);\n  }\n\n  handleFullscreenEnter = () => {\n    if (screenfull.enabled) {\n      screenfull.request(this.element);\n    }\n    this.props.onFullscreenEnter();\n  };\n\n  handleFullscreenChange = () => {\n    if (!screenfull.isFullscreen) {\n      this.props.onFullscreenExit();\n    }\n  };\n\n  handleMouseMove = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    } else {\n      this.setState({ shouldShowToolbar: true });\n    }\n    this.timer = setTimeout(this.handleMouseMoveEnd, 5000);\n  };\n\n  handleMouseMoveEnd = () => {\n    clearTimeout(this.timer);\n    this.timer = null;\n    this.setState({ shouldShowToolbar: false });\n  };\n\n  refElement = (element) => {\n    this.element = element;\n  };\n\n  render() {\n    const {\n      getMediaSource,\n      isFullscreen,\n      enabled,\n      size,\n      volume,\n      isMuted,\n      media,\n      seek,\n      onFullscreenExit,\n    } = this.props;\n\n    if (!media) {\n      return <div className=\"Video\" />;\n    }\n\n    const {\n      shouldShowToolbar,\n    } = this.state;\n\n    const currentSource = getMediaSource(media.sourceType);\n    const MediaSourceTools = (currentSource && currentSource.VideoTools)\n      ? currentSource.VideoTools\n      : defaultSourceTools;\n\n    return (\n      <div\n        ref={this.refElement}\n        className={cx('Video', `Video--${media.sourceType}`, `Video--${size}`)}\n      >\n        <VideoBackdrop url={media.thumbnail} />\n        <Player\n          enabled={enabled}\n          size={size}\n          volume={volume}\n          isMuted={isMuted}\n          media={media}\n          seek={seek}\n        />\n\n        {isFullscreen && (\n          <MouseMoveCapture\n            active={shouldShowToolbar}\n            onMouseMove={this.handleMouseMove}\n          />\n        )}\n        {isFullscreen && (\n          <VideoProgressBar\n            media={media}\n            seek={seek}\n          />\n        )}\n        {(!isFullscreen || shouldShowToolbar) && (\n          <VideoToolbar\n            isFullscreen={isFullscreen}\n            onFullscreenEnter={this.handleFullscreenEnter}\n            onFullscreenExit={onFullscreenExit}\n          >\n            <MediaSourceTools media={media} />\n          </VideoToolbar>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default enhance(Video);\n"]}