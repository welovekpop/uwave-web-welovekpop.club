{"version":3,"sources":["components/Video/index.js"],"names":["defaultSourceTools","enhance","_ref","className","Video","_React$Component","_temp","_this","_ret","_len","arguments","length","args","Array","_key","call","apply","concat","state","shouldShowToolbar","handleFullscreenEnter","enabled","request","element","props","onFullscreenEnter","handleFullscreenChange","isFullscreen","onFullscreenExit","handleMouseMove","timer","clearTimeout","setState","setTimeout","handleMouseMoveEnd","refElement","prototype","componentDidMount","on","componentWillReceiveProps","nextProps","exit","shouldComponentUpdate","render","_props","getMediaSource","size","volume","isMuted","media","seek","currentSource","sourceType","MediaSourceTools","VideoTools","createElement","ref","url","thumbnail","active","onMouseMove","Component","propTypes","process","env","NODE_ENV","func","isRequired","bool","string","number","object"],"mappings":"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","file":"index.js","sourcesContent":["import cx from 'classnames';\nimport isEqual from 'is-equal-shallow';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport screenfull from 'screenfull';\nimport injectMediaSources from '../../utils/injectMediaSources';\nimport VideoBackdrop from './VideoBackdrop';\nimport VideoProgressBar from './VideoProgressBar';\nimport VideoToolbar from './VideoToolbar';\nimport MouseMoveCapture from './VideoMouseMoveCapture';\nimport Player from '../Player';\n\nconst defaultSourceTools = () => null;\n\nconst enhance = injectMediaSources();\n\nclass Video extends React.Component {\n  static propTypes = {\n    getMediaSource: PropTypes.func.isRequired,\n    isFullscreen: PropTypes.bool,\n    enabled: PropTypes.bool,\n    size: PropTypes.string,\n    volume: PropTypes.number,\n    isMuted: PropTypes.bool,\n    media: PropTypes.object,\n    seek: PropTypes.number,\n    onFullscreenEnter: PropTypes.func.isRequired,\n    onFullscreenExit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    shouldShowToolbar: false,\n  };\n\n  componentDidMount() {\n    if (screenfull.enabled) {\n      screenfull.on('change', this.handleFullscreenChange);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.isFullscreen && !nextProps.isFullscreen && screenfull.enabled) {\n      // Checking for `enabled` here, because our props have probably changed\n      // _after_ exiting fullscreen mode (see `this.handleFullscreenChange`).\n      // This way we don't double-exit.\n      if (screenfull.isFullscreen) {\n        screenfull.exit();\n      }\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return !isEqual(nextProps, this.props);\n  }\n\n  handleFullscreenEnter = () => {\n    if (screenfull.enabled) {\n      screenfull.request(this.element);\n    }\n    this.props.onFullscreenEnter();\n  };\n\n  handleFullscreenChange = () => {\n    if (!screenfull.isFullscreen) {\n      this.props.onFullscreenExit();\n    }\n  };\n\n  handleMouseMove = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    } else {\n      this.setState({ shouldShowToolbar: true });\n    }\n    this.timer = setTimeout(this.handleMouseMoveEnd, 5000);\n  };\n\n  handleMouseMoveEnd = () => {\n    clearTimeout(this.timer);\n    this.timer = null;\n    this.setState({ shouldShowToolbar: false });\n  };\n\n  refElement = (element) => {\n    this.element = element;\n  };\n\n  render() {\n    const {\n      getMediaSource,\n      isFullscreen,\n      enabled,\n      size,\n      volume,\n      isMuted,\n      media,\n      seek,\n      onFullscreenExit,\n    } = this.props;\n\n    if (!media) {\n      return <div className=\"Video\" />;\n    }\n\n    const {\n      shouldShowToolbar,\n    } = this.state;\n\n    const currentSource = getMediaSource(media.sourceType);\n    const MediaSourceTools = (currentSource && currentSource.VideoTools)\n      ? currentSource.VideoTools\n      : defaultSourceTools;\n\n    return (\n      <div\n        ref={this.refElement}\n        className={cx('Video', `Video--${media.sourceType}`, `Video--${size}`)}\n      >\n        <VideoBackdrop url={media.thumbnail} />\n        <Player\n          enabled={enabled}\n          size={size}\n          volume={volume}\n          isMuted={isMuted}\n          media={media}\n          seek={seek}\n        />\n\n        {isFullscreen && (\n          <MouseMoveCapture\n            active={shouldShowToolbar}\n            onMouseMove={this.handleMouseMove}\n          />\n        )}\n        {isFullscreen && (\n          <VideoProgressBar\n            media={media}\n            seek={seek}\n          />\n        )}\n        {(!isFullscreen || shouldShowToolbar) && (\n          <VideoToolbar\n            isFullscreen={isFullscreen}\n            onFullscreenEnter={this.handleFullscreenEnter}\n            onFullscreenExit={onFullscreenExit}\n          >\n            <MediaSourceTools media={media} />\n          </VideoToolbar>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default enhance(Video);\n"]}