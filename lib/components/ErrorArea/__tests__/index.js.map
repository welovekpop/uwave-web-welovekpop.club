{"version":3,"sources":["components/ErrorArea/__tests__/index.js"],"names":["describe","it","error","onDismiss","context","testUtils","dive","childAt","to","have","prop","notificationTheme","muiTheme","palette","notifications","contextTheme","snackbar","property","errorTextColor","errorBackgroundColor","spy","area","call","calledOnce","equal"],"mappings":";;AAAA;;;;AAGA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAEAA,SAAS,eAAT,EAA0B,YAAY;AACpCC,KAAG,sCAAH,EAA2C,YAAY;AACrD,sBAAO,qBAAQ,+BAAgB;AAC7BC,aAAO,IADsB;AAE7BC,iBAAW,SAASA,SAAT,GAAqB,CAAE;AAFL,KAAhB,CAAR,EAGH,EAAEC,SAASC,UAAUD,OAArB,EAHG,EAG6BE,IAH7B,GAGoCC,OAHpC,CAG4C,CAH5C,CAAP,EAGuDC,EAHvD,CAG0DC,IAH1D,CAG+DC,IAH/D,CAGoE,MAHpE,EAG4E,KAH5E;AAID,GALD;;AAOAT,KAAG,kCAAH,EAAuC,YAAY;AACjD,sBAAO,qBAAQ,+BAAgB;AAC7BC,aAAO,qBADsB;AAE7BC,iBAAW,SAASA,SAAT,GAAqB,CAAE;AAFL,KAAhB,CAAR,EAGH,EAAEC,SAASC,UAAUD,OAArB,EAHG,EAG6BE,IAH7B,GAGoCC,OAHpC,CAG4C,CAH5C,CAAP,EAGuDC,EAHvD,CAG0DC,IAH1D,CAG+DC,IAH/D,CAGoE,MAHpE,EAG4E,IAH5E;AAID,GALD;;AAOAT,KAAG,+CAAH,EAAoD,YAAY;AAC9D,QAAIU,oBAAoBN,UAAUO,QAAV,CAAmBC,OAAnB,CAA2BC,aAAnD;;AAEA,QAAIC,eAAe,0BAAmBV,UAAUD,OAA7B,EAAsCQ,QAAzD;;AAEA,sBAAOG,aAAaC,QAApB,EAA8BR,EAA9B,CAAiCC,IAAjC,CAAsCQ,QAAtC,CAA+C,WAA/C,EAA4DN,kBAAkBO,cAA9E;AACA,sBAAOH,aAAaC,QAApB,EAA8BR,EAA9B,CAAiCC,IAAjC,CAAsCQ,QAAtC,CAA+C,iBAA/C,EAAkEN,kBAAkBQ,oBAApF;AACD,GAPD;;AASAlB,KAAG,8CAAH,EAAmD,YAAY;AAC7D,QAAImB,MAAM,gBAAMA,GAAN,EAAV;;AAEA,QAAIC,OAAO,qBAAQ,+BAAgB;AACjCnB,aAAO,SAD0B;AAEjCC,iBAAWiB;AAFsB,KAAhB,CAAR,EAGP,EAAEhB,SAASC,UAAUD,OAArB,EAHO,EAGyBE,IAHzB,EAAX;;AAKAe,SAAKd,OAAL,CAAa,CAAb,EAAgBG,IAAhB,CAAqB,gBAArB,EAAuCY,IAAvC;;AAEA,sBAAOF,IAAIG,UAAX,EAAuBf,EAAvB,CAA0BgB,KAA1B,CAAgC,IAAhC;AACD,GAXD;AAYD,CApCD;AAqCA;;AA7CA;AACA","file":"index.js","sourcesContent":["/* eslint-env mocha */\n/* global testUtils */\nimport React from 'react';\nimport sinon from 'sinon';\nimport { expect } from 'chai';\nimport { shallow } from 'enzyme';\nimport ErrorArea, { errorThemeSelector } from '../';\n\ndescribe('<ErrorArea />', () => {\n  it('should not show if there is no error', () => {\n    expect(\n      shallow(\n        <ErrorArea\n          error={null}\n          onDismiss={() => {}}\n        />,\n        { context: testUtils.context }\n      ).dive().childAt(0)\n    ).to.have.prop('open', false);\n  });\n\n  it('should open if there is an error', () => {\n    expect(\n      shallow(\n        <ErrorArea\n          error=\"Something is WRONG!\"\n          onDismiss={() => {}}\n        />,\n        { context: testUtils.context }\n      ).dive().childAt(0)\n    ).to.have.prop('open', true);\n  });\n\n  it('uses the error notification palette overrides', () => {\n    const notificationTheme = testUtils.muiTheme.palette.notifications;\n\n    const contextTheme = errorThemeSelector(testUtils.context).muiTheme;\n\n    expect(contextTheme.snackbar).to.have.property('textColor', notificationTheme.errorTextColor);\n    expect(contextTheme.snackbar).to.have.property('backgroundColor', notificationTheme.errorBackgroundColor);\n  });\n\n  it('closes when user clicks anywhere on the page', () => {\n    const spy = sinon.spy();\n\n    const area = shallow((\n      <ErrorArea\n        error=\"Message\"\n        onDismiss={spy}\n      />\n    ), { context: testUtils.context }).dive();\n\n    area.childAt(0).prop('onRequestClose').call();\n\n    expect(spy.calledOnce).to.equal(true);\n  });\n});\n"]}