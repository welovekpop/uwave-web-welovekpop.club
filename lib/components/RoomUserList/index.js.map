{"version":3,"sources":["components/RoomUserList/index.js"],"names":["RoomUserList","_ref","className","users","guests","showGuests","length","itemRenderer","index","key","rowClass","user","type","propTypes","process","env","NODE_ENV","string","arrayOf","object","isRequired","number"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,eAAe,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AAC7C,MAAIC,YAAYD,KAAKC,SAArB;AAAA,MACIC,QAAQF,KAAKE,KADjB;AAAA,MAEIC,SAASH,KAAKG,MAFlB;;AAIA,MAAIC,aAAaD,SAAS,CAA1B;AACA;AACA;AACA;AACA;AACA,MAAIE,SAASH,MAAMG,MAAN,IAAgBD,aAAa,CAAb,GAAiB,CAAjC,CAAb;AACA,SAAO,mBAAK,KAAL,EAAY;AACjBH,eAAW,0BAAG,UAAH,EAAe,kBAAf,EAAmCA,SAAnC;AADM,GAAZ,EAEJ,KAAK,CAFD,EAEI,wCAAW;AACpBK,kBAAc,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,GAA7B,EAAkC;AAC9C,UAAIC,WAAW,0BAAG,cAAH,EAAmBF,QAAQ,CAAR,KAAc,CAAd,IAAmB,yBAAtC,CAAf;AACA;AACA,UAAIA,UAAUL,MAAMG,MAApB,EAA4B;AAC1B,eAAO,wCAAgB;AACrBJ,qBAAWQ,QADU;AAErBN,kBAAQA;AAFa,SAAhB,EAGJK,GAHI,CAAP;AAID;AACD,aAAO,kCAAkB;AACvBP,mBAAWQ,QADY;AAEvBC,cAAMR,MAAMK,KAAN;AAFiB,OAAlB,EAGJC,GAHI,CAAP;AAID,KAdmB;AAepBH,YAAQA,MAfY;AAgBpBM,UAAM;AAhBc,GAAX,CAFJ,CAAP;AAoBD,CA/BD;;AAiCAZ,aAAaa,SAAb,GAAyBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC/Dd,aAAW,oBAAUe,MAD0C;AAE/Dd,SAAO,oBAAUe,OAAV,CAAkB,oBAAUC,MAA5B,EAAoCC,UAFoB;AAG/DhB,UAAQ,oBAAUiB,MAAV,CAAiBD;AAHsC,CAAxC,GAIrB,EAJJ;;kBAMepB,Y;AACf","file":"index.js","sourcesContent":["import cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport List from 'react-list';\nimport RoomUserRow from './Row';\nimport GuestsRow from './GuestsRow';\n\nconst RoomUserList = ({ className, users, guests }) => {\n  const showGuests = guests > 0;\n  // The \"and X guests\" row is implemented somewhat hackily as an extra user\n  // row. To render properly at the end of the list, it needs to be rendered as\n  // an element of the list--so we tell react-list that we have an extra row\n  // when th guests row is shown.\n  const length = users.length + (showGuests ? 1 : 0);\n  return (\n    <div className={cx('UserList', 'UserList--online', className)}>\n      <List\n        itemRenderer={(index, key) => {\n          const rowClass = cx(\n            'UserList-row',\n            (index % 2 === 0) && 'UserList-row--alternate',\n          );\n          // The very last row is the guests row\n          if (index === users.length) {\n            return (\n              <GuestsRow\n                key={key}\n                className={rowClass}\n                guests={guests}\n              />\n            );\n          }\n          return (\n            <RoomUserRow\n              key={key}\n              className={rowClass}\n              user={users[index]}\n            />\n          );\n        }}\n        length={length}\n        type=\"uniform\"\n      />\n    </div>\n  );\n};\n\nRoomUserList.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.arrayOf(PropTypes.object).isRequired,\n  guests: PropTypes.number.isRequired,\n};\n\nexport default RoomUserList;\n"]}