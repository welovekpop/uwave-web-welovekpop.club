{"version":3,"sources":["components/TimeAgo/index.js"],"names":["translateMs","str","_str$split","split","count","key","replace","parseInt","TimeAgo","_ref","t","currentTime","timestamp","secondsAgo","Math","max","floor","msString","long","_translateMs","time","defaultValue","propTypes","process","env","NODE_ENV","PropTypes","func","isRequired","number"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAAuC;AACvC;AAEA,SAASA,WAAT,CAAqBC,GAArB,EAA0B;AACxB;AACA,MAAIC,aAAaD,IAAIE,KAAJ,CAAU,GAAV,CAAjB;AAAA,MACIC,QAAQF,WAAW,CAAX,CADZ;AAAA,MAEIG,MAAMH,WAAW,CAAX,CAFV;;AAIA,SAAO;AACLG,SAAKA,IAAIC,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,IAAwB,GADxB;AAELF,WAAOG,SAASH,KAAT,EAAgB,EAAhB;AAFF,GAAP;AAID;;AAED,IAAII,UAAU,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACnC,MAAIC,IAAID,KAAKC,CAAb;AAAA,MACIC,cAAcF,KAAKE,WADvB;AAAA,MAEIC,YAAYH,KAAKG,SAFrB;AAGA,MAAIC,aAAaC,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKE,KAAL,CAAW,CAACL,cAAcC,SAAf,IAA4B,IAAvC,CAAZ,CAAjB;AACA,MAAIK,WAAW,iBAAGJ,aAAa,IAAhB,EAAsB;AACnCK,UAAM;AAD6B,GAAtB,CAAf;;AAIA,MAAIC,eAAenB,YAAYiB,QAAZ,CAAnB;AAAA,MACIZ,MAAMc,aAAad,GADvB;AAAA,MAEID,QAAQe,aAAaf,KAFzB;;AAIA,SAAO,mBAAK,MAAL,EAAa,EAAb,EAAiB,KAAK,CAAtB,EAAyBM,EAAE,gBAAF,EAAoB;AAClDU,UAAMV,EAAE,aAAaL,GAAf,EAAoB;AACxBD,aAAOA,KADiB;AAExBiB,oBAAcJ;AAFU,KAApB;AAD4C,GAApB,CAAzB,CAAP;AAMD,CAnBD;;AAqBAT,QAAQc,SAAR,GAAoBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC1Df,KAAGgB,mBAAUC,IAAV,CAAeC,UADwC;AAE1DjB,eAAae,mBAAUG,MAAV,CAAiBD,UAF4B;AAG1DhB,aAAWc,mBAAUG,MAAV,CAAiBD;AAH8B,CAAxC,GAIhB,EAJJ;;eAKe,sBAAQ,8BAAR,EAAqB,qBAArB,EAA8BpB,OAA9B,C,EACf","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { translate } from 'react-i18next';\nimport compose from 'recompose/compose';\nimport ms from 'ms';\n\nimport timed from '../../utils/timed';\n\n// Bit weird to do it like this perhaps, convert to an english string first and\n// then translate afterwards.\nfunction translateMs(str) {\n  // `ms` output of the form \"3 hours\"\n  const [count, key] = str.split(' ');\n  return {\n    key: `${key.replace(/s$/, '')}s`,\n    count: parseInt(count, 10),\n  };\n}\n\nconst TimeAgo = ({ t, currentTime, timestamp }) => {\n  const secondsAgo = Math.max(0, Math.floor((currentTime - timestamp) / 1000));\n  const msString = ms(secondsAgo * 1000, { long: true });\n  const { key, count } = translateMs(msString);\n  return (\n    <span>\n      {t('timeAgo.format', {\n        time: t(`timeAgo.${key}`, {\n          count,\n          defaultValue: msString,\n        }),\n      })}\n    </span>\n  );\n};\n\nTimeAgo.propTypes = {\n  t: PropTypes.func.isRequired,\n  currentTime: PropTypes.number.isRequired,\n  timestamp: PropTypes.number.isRequired,\n};\n\nexport default compose(\n  translate(),\n  timed(),\n)(TimeAgo);\n"]}