{"version":3,"sources":["components/Chat/Markup/compile.js"],"names":["compile","tree","opts","_opts","_opts$availableEmoji","availableEmoji","_opts$emojiImages","emojiImages","map","node","i","type","user","Mention","GroupMention","group","mention","users","Link","href","text","indexOf","name","Emoji","image","Italic","content","Bold","Code","StrikeThrough"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACe,SAASA,OAAT,CAAiBC,IAAjB,EAAuBC,IAAvB,EAA6B;AAC1C,MAAIA,SAAS,KAAK,CAAlB,EAAqB;AACnBA,WAAO,EAAP;AACD;;AAED,MAAIC,QAAQD,IAAZ;AAAA,MACIE,uBAAuBD,MAAME,cADjC;AAAA,MAEIA,iBAAiBD,yBAAyB,KAAK,CAA9B,GAAkC,EAAlC,GAAuCA,oBAF5D;AAAA,MAGIE,oBAAoBH,MAAMI,WAH9B;AAAA,MAIIA,cAAcD,sBAAsB,KAAK,CAA3B,GAA+B,EAA/B,GAAoCA,iBAJtD;AAKA,SAAOL,KAAKO,GAAL,CAAS,UAAUC,IAAV,EAAgBC,CAAhB,EAAmB;AACjC,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAOA,IAAP;AACD;AACD;;;AAGA,YAAQA,KAAKE,IAAb;AACE,WAAK,SAAL;AACE,eAAOF,KAAKG,IAAL,GAAY,mBAAKC,gBAAL,EAAc;AAC/BD,gBAAMH,KAAKG;AADoB,SAAd,EAEhBF,CAFgB,CAAZ,GAEC,mBAAKI,qBAAL,EAAmB;AACzBC,iBAAON,KAAKO,OADa;AAEzBC,iBAAOR,KAAKM;AAFa,SAAnB,EAGLL,CAHK,CAFR;;AAOF,WAAK,MAAL;AACE,eAAO,mBAAKQ,aAAL,EAAW;AAChBC,gBAAMV,KAAKU;AADK,SAAX,EAEJT,CAFI,EAEDD,KAAKW,IAFJ,CAAP;;AAIF,WAAK,OAAL;AACE,YAAIf,eAAegB,OAAf,CAAuBZ,KAAKa,IAA5B,MAAsC,CAAC,CAAvC,IAA4Cb,KAAKa,IAAL,IAAaf,WAA7D,EAA0E;AACxE,iBAAO,mBAAKgB,cAAL,EAAY;AACjBD,kBAAMb,KAAKa,IADM;AAEjBE,mBAAOjB,YAAYE,KAAKa,IAAjB;AAFU,WAAZ,EAGJZ,CAHI,CAAP;AAID;;AAED,eAAO,MAAMD,KAAKa,IAAX,GAAkB,GAAzB;;AAEF,WAAK,QAAL;AACE,eAAO,mBAAKG,eAAL,EAAa,EAAb,EAAiBf,CAAjB,EAAoBV,QAAQS,KAAKiB,OAAb,EAAsBxB,IAAtB,CAApB,CAAP;;AAEF,WAAK,MAAL;AACE,eAAO,mBAAKyB,aAAL,EAAW,EAAX,EAAejB,CAAf,EAAkBV,QAAQS,KAAKiB,OAAb,EAAsBxB,IAAtB,CAAlB,CAAP;;AAEF,WAAK,MAAL;AACE,eAAO,mBAAK0B,aAAL,EAAW,EAAX,EAAelB,CAAf,EAAkBV,QAAQS,KAAKiB,OAAb,EAAsBxB,IAAtB,CAAlB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,mBAAK2B,sBAAL,EAAoB,EAApB,EAAwBnB,CAAxB,EAA2BV,QAAQS,KAAKiB,OAAb,EAAsBxB,IAAtB,CAA3B,CAAP;;AAEF;AACE,eAAOF,QAAQS,KAAKiB,OAAb,EAAsBxB,IAAtB,CAAP;AArCJ;AAuCA;;AAED,GAhDM,CAAP;AAiDD","file":"compile.js","sourcesContent":["import React from 'react';\nimport Bold from './Bold';\nimport Code from './Code';\nimport Italic from './Italic';\nimport StrikeThrough from './StrikeThrough';\nimport Mention from './Mention';\nimport GroupMention from './GroupMention';\nimport Link from './Link';\nimport Emoji from './Emoji';\n\nexport default function compile(tree, opts = {}) {\n  const {\n    availableEmoji = [],\n    emojiImages = {},\n  } = opts;\n\n  return tree.map((node, i) => {\n    if (typeof node === 'string') {\n      return node;\n    }\n\n    /* eslint-disable react/no-array-index-key */\n    switch (node.type) {\n      case 'mention':\n        return node.user\n          ? <Mention key={i} user={node.user} />\n          : <GroupMention key={i} group={node.mention} users={node.group} />;\n      case 'link':\n        return <Link key={i} href={node.href}>{node.text}</Link>;\n      case 'emoji':\n        if (availableEmoji.indexOf(node.name) !== -1 && node.name in emojiImages) {\n          return (\n            <Emoji\n              key={i}\n              name={node.name}\n              image={emojiImages[node.name]}\n            />\n          );\n        }\n        return `:${node.name}:`;\n      case 'italic':\n        return <Italic key={i}>{compile(node.content, opts)}</Italic>;\n      case 'bold':\n        return <Bold key={i}>{compile(node.content, opts)}</Bold>;\n      case 'code':\n        return <Code key={i}>{compile(node.content, opts)}</Code>;\n      case 'strike':\n        return <StrikeThrough key={i}>{compile(node.content, opts)}</StrikeThrough>;\n      default:\n        return compile(node.content, opts);\n    }\n    /* eslint-enable react/no-array-index-key */\n  });\n}\n"]}