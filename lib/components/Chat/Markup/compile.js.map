{"version":3,"sources":["components/Chat/Markup/compile.js"],"names":["compile","tree","opts","arguments","length","undefined","_opts$availableEmoji","availableEmoji","_opts$emojiImages","emojiImages","map","node","i","type","user","group","mention","users","href","text","indexOf","name","image","content"],"mappings":";;;;;kBAWwBA,O;;AAXxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACpC,MAAIC,OAAOC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAA/E;AACA,MAAIG,uBAAuBJ,KAAKK,cAAhC;AAAA,MACIA,iBAAiBD,yBAAyBD,SAAzB,GAAqC,EAArC,GAA0CC,oBAD/D;AAAA,MAEIE,oBAAoBN,KAAKO,WAF7B;AAAA,MAGIA,cAAcD,sBAAsBH,SAAtB,GAAkC,EAAlC,GAAuCG,iBAHzD;;AAMA,SAAOP,KAAKS,GAAL,CAAS,UAAUC,IAAV,EAAgBC,CAAhB,EAAmB;AACjC,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAOA,IAAP;AACD;;AAED;AACA,YAAQA,KAAKE,IAAb;AACE,WAAK,SAAL;AACE,eAAOF,KAAKG,IAAL,GAAY,sCAAc;AAC/BA,gBAAMH,KAAKG;AADoB,SAAd,EAEhBF,CAFgB,CAAZ,GAEC,2CAAmB;AACzBG,iBAAOJ,KAAKK,OADa;AAEzBC,iBAAON,KAAKI;AAFa,SAAnB,EAGLH,CAHK,CAFR;AAMF,WAAK,MAAL;AACE,eAAO,mCAAW;AAChBM,gBAAMP,KAAKO;AADK,SAAX,EAEJN,CAFI,EAEDD,KAAKQ,IAFJ,CAAP;AAGF,WAAK,OAAL;AACE,YAAIZ,eAAea,OAAf,CAAuBT,KAAKU,IAA5B,MAAsC,CAAC,CAAvC,IAA4CV,KAAKU,IAAL,IAAaZ,WAA7D,EAA0E;AACxE,iBAAO,oCAAY;AACjBY,kBAAMV,KAAKU,IADM;AAEjBC,mBAAOb,YAAYE,KAAKU,IAAjB;AAFU,WAAZ,EAGJT,CAHI,CAAP;AAID;AACD,eAAO,MAAMD,KAAKU,IAAX,GAAkB,GAAzB;AACF,WAAK,QAAL;AACE,eAAO,qCAAa,EAAb,EAAiBT,CAAjB,EAAoBZ,QAAQW,KAAKY,OAAb,EAAsBrB,IAAtB,CAApB,CAAP;AACF,WAAK,MAAL;AACE,eAAO,mCAAW,EAAX,EAAeU,CAAf,EAAkBZ,QAAQW,KAAKY,OAAb,EAAsBrB,IAAtB,CAAlB,CAAP;AACF,WAAK,MAAL;AACE,eAAO,mCAAW,EAAX,EAAeU,CAAf,EAAkBZ,QAAQW,KAAKY,OAAb,EAAsBrB,IAAtB,CAAlB,CAAP;AACF,WAAK,QAAL;AACE,eAAO,4CAAoB,EAApB,EAAwBU,CAAxB,EAA2BZ,QAAQW,KAAKY,OAAb,EAAsBrB,IAAtB,CAA3B,CAAP;AACF;AACE,eAAOF,QAAQW,KAAKY,OAAb,EAAsBrB,IAAtB,CAAP;AA7BJ;AA+BA;AACD,GAtCM,CAAP;AAuCD;AACD","file":"compile.js","sourcesContent":["import React from 'react';\nimport Bold from './Bold';\nimport Code from './Code';\nimport Italic from './Italic';\nimport StrikeThrough from './StrikeThrough';\nimport Mention from './Mention';\nimport GroupMention from './GroupMention';\nimport Link from './Link';\nimport Emoji from './Emoji';\n\nexport default function compile(tree, opts = {}) {\n  const {\n    availableEmoji = [],\n    emojiImages = {},\n  } = opts;\n\n  return tree.map((node, i) => {\n    if (typeof node === 'string') {\n      return node;\n    }\n\n    /* eslint-disable react/no-array-index-key */\n    switch (node.type) {\n      case 'mention':\n        return node.user\n          ? <Mention key={i} user={node.user} />\n          : <GroupMention key={i} group={node.mention} users={node.group} />;\n      case 'link':\n        return <Link key={i} href={node.href}>{node.text}</Link>;\n      case 'emoji':\n        if (availableEmoji.indexOf(node.name) !== -1 && node.name in emojiImages) {\n          return (\n            <Emoji\n              key={i}\n              name={node.name}\n              image={emojiImages[node.name]}\n            />\n          );\n        }\n        return `:${node.name}:`;\n      case 'italic':\n        return <Italic key={i}>{compile(node.content, opts)}</Italic>;\n      case 'bold':\n        return <Bold key={i}>{compile(node.content, opts)}</Bold>;\n      case 'code':\n        return <Code key={i}>{compile(node.content, opts)}</Code>;\n      case 'strike':\n        return <StrikeThrough key={i}>{compile(node.content, opts)}</StrikeThrough>;\n      default:\n        return compile(node.content, opts);\n    }\n    /* eslint-enable react/no-array-index-key */\n  });\n}\n"]}